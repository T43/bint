string$303command;
string$303return_type;
string$303func_name;
stack$303func_stack;
bool$303bool_res;
string$303$init_return_var;
int$303$init_res;
goto$303#init_end$303null;
#init:
print$303""$303null;
print$303""$303null;
SET_SOURCE$303"benv/prep_func_program.b"$303null;
SET_DEST$303"benv/long_function_program.b"$303null;
push$3030$303null;
goto$303$init_return_var$303null;
#init_end:
print$303""$303null;
string$303$finish_return_var;
int$303$finish_res;
goto$303#finish_end$303null;
#finish:
print$303""$303null;
print$303""$303null;
DEL_DEST$303"benv/prep_func_program.b"$303null;
push$3030$303null;
goto$303$finish_return_var$303null;
#finish_end:
print$303""$303null;
string$303$next_func_return_var;
stack$303$next_func_res;
goto$303#next_func_end$303null;
#next_func:
print$303""$303null;
print$303""$303null;
int$303number;
int$303left_border;
int$303right_border;
stack$303func_stack;
string$303func_name;
int$303type_len;
string$303command;
string$303arg_type;
#next_func_st:
print$303""$303null;
next_command$303command$303null;
print$303""$303null;
[goto(#end_file),("end"==command),print("")];
=$303number$303index$303command$303"{";
print$303""$303null;
[goto(#end_clause),(-1==number),print("")];
=$303arg_type$303"int";
=$303number$303index$303command$303"int";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303"bool";
=$303number$303index$303command$303"bool";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303"float";
=$303number$303index$303command$303"float";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303"stack";
=$303number$303index$303command$303"stack";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303"string";
=$303number$303index$303command$303"string";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
#end_clause:
print$303""$303null;
goto$303#next_func_st$303null;
#next_func_e:
print$303""$303null;
=$303type_len$303len$303arg_type$303null;
=$303left_border$303type_len;
=$303right_border$303index$303command$303"(";
func_name=command[left_border:right_border];
func_stack.push(func_name);
func_stack.push(arg_type);
#end_file:
print$303""$303null;
push$303func_stack$303null;
UNDEFINE$303arg_type$303null;
UNDEFINE$303command$303null;
UNDEFINE$303type_len$303null;
UNDEFINE$303func_name$303null;
UNDEFINE$303func_stack$303null;
UNDEFINE$303right_border$303null;
UNDEFINE$303left_border$303null;
UNDEFINE$303number$303null;
goto$303$next_func_return_var$303null;
#next_func_end:
print$303""$303null;
string$303$get_funcs_return_var;
stack$303$get_funcs_res;
goto$303#get_funcs_end$303null;
#get_funcs:
print$303""$303null;
print$303""$303null;
stack$303res_stack;
string$303return_type;
string$303func_name;
#get_funcs_s:
print$303""$303null;
=$303$next_func_return_var$303"#next_func_res0";
goto$303#next_func$303null;
#next_func_res0:
pop$303$next_func_res$303null;
=$303func_stack$303$next_func_res;
func_stack.pop(return_type);
func_stack.pop(func_name);
print$303""$303null;
[goto(#get_funcs_e),("end"==func_name),print("")];
res_stack.push(func_name);
res_stack.push(return_type);
print$303""$303null;
goto$303#get_funcs_s$303null;
#get_funcs_e:
print$303""$303null;
RESET_SOURCE;
push$303res_stack$303null;
UNDEFINE$303func_name$303null;
UNDEFINE$303return_type$303null;
UNDEFINE$303res_stack$303null;
goto$303$get_funcs_return_var$303null;
#get_funcs_end:
print$303""$303null;
string$303$reverse_return_var;
stack$303$reverse_res;
goto$303#reverse_end$303null;
#reverse:
print$303""$303null;
stack$303s;
print$303""$303null;
pop$303s$303null;
print$303""$303null;
string$303buf;
stack$303res;
s.pop(buf);
#reverse_s:
print$303""$303null;
[goto(#reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
print$303""$303null;
goto$303#reverse_s$303null;
#reverse_e:
print$303""$303null;
push$303res$303null;
UNDEFINE$303res$303null;
UNDEFINE$303buf$303null;
UNDEFINE$303s$303null;
goto$303$reverse_return_var$303null;
#reverse_end:
print$303""$303null;
string$303$indexes_return_var;
stack$303$indexes_res;
goto$303#indexes_end$303null;
#indexes:
print$303""$303null;
string$303sub_s;
string$303s;
print$303""$303null;
pop$303sub_s$303null;
pop$303s$303null;
print$303""$303null;
stack$303res;
int$303i;
int$303pointer;
int$303s_len;
int$303s_len_old;
int$303sub_len;
=$303s_len$303len$303s$303null;
=$303sub_len$303len$303sub_s$303null;
=$303s_len_old$303s_len;
=$303i$303index$303s$303sub_s;
=$303pointer$303i;
#indexes_s:
print$303""$303null;
[goto(#indexes_e),(-1==i),print("")];
=$303i$303+$303i$303-$303s_len_old$303s_len;
res.push(i);
=$303pointer$303+$303pointer$303sub_len;
s=s[pointer:s_len];
=$303s_len$303len$303s$303null;
=$303i$303index$303s$303sub_s;
=$303pointer$303i;
print$303""$303null;
goto$303#indexes_s$303null;
#indexes_e:
print$303""$303null;
push$303res$303null;
=$303$reverse_return_var$303"#reverse_res0";
goto$303#reverse$303null;
#reverse_res0:
pop$303$reverse_res$303null;
=$303res$303$reverse_res;
push$303res$303null;
UNDEFINE$303sub_len$303null;
UNDEFINE$303s_len_old$303null;
UNDEFINE$303s_len$303null;
UNDEFINE$303pointer$303null;
UNDEFINE$303i$303null;
UNDEFINE$303res$303null;
UNDEFINE$303sub_s$303null;
UNDEFINE$303s$303null;
goto$303$indexes_return_var$303null;
#indexes_end:
print$303""$303null;
string$303$func_ends_return_var;
stack$303$func_ends_res;
goto$303#func_ends_end$303null;
#func_ends:
print$303""$303null;
int$303func_len;
stack$303func_begins;
string$303command;
print$303""$303null;
pop$303func_len$303null;
pop$303func_begins$303null;
pop$303command$303null;
print$303""$303null;
string$303buf;
string$303symbol;
int$303i;
int$303br_begin;
int$303br_end;
int$303command_len;
int$303opened_braces;
int$303closed_braces;
stack$303res;
string$303temp;
func_begins.pop(buf);
#func_ends_s:
print$303""$303null;
=$303closed_braces$3030;
print$303""$303null;
[goto(#func_ends_e),("end"==buf),print("")];
=$303i$303int$303buf$303null;
=$303command_len$303len$303command$303null;
=$303br_begin$303+$303i$303func_len;
=$303opened_braces$3031;
=$303br_end$303+$303br_begin$3031;
#counter_s:
print$303""$303null;
[goto(#counter_e),(opened_braces==closed_braces),print("")];
symbol=command[br_end];
print$303""$303null;
[print(""),("("==symbol),goto(#inc_o_end)];
=$303opened_braces$303+$303opened_braces$3031;
#inc_o_end:
print$303""$303null;
[print(""),(")"==symbol),goto(#inc_c_end)];
=$303closed_braces$303+$303closed_braces$3031;
#inc_c_end:
print$303""$303null;
=$303br_end$303+$303br_end$3031;
print$303""$303null;
goto$303#counter_s$303null;
#counter_e:
print$303""$303null;
res.push(br_end);
func_begins.pop(buf);
print$303""$303null;
goto$303#func_ends_s$303null;
#func_ends_e:
print$303""$303null;
push$303res$303null;
=$303$reverse_return_var$303"#reverse_res1";
goto$303#reverse$303null;
#reverse_res1:
pop$303$reverse_res$303null;
push$303$reverse_res$303null;
UNDEFINE$303temp$303null;
UNDEFINE$303res$303null;
UNDEFINE$303closed_braces$303null;
UNDEFINE$303opened_braces$303null;
UNDEFINE$303command_len$303null;
UNDEFINE$303br_end$303null;
UNDEFINE$303br_begin$303null;
UNDEFINE$303i$303null;
UNDEFINE$303symbol$303null;
UNDEFINE$303buf$303null;
UNDEFINE$303func_len$303null;
UNDEFINE$303func_begins$303null;
UNDEFINE$303command$303null;
goto$303$func_ends_return_var$303null;
#func_ends_end:
print$303""$303null;
string$303$del_file_return_var;
goto$303#del_file_end$303null;
#del_file:
print$303""$303null;
bool$303change_flag;
print$303""$303null;
pop$303change_flag$303null;
print$303""$303null;
string$303command;
print$303""$303null;
[print(""),(change_flag),goto(#copy_e)];
SET_SOURCE$303"benv/long_function_program2.b"$303null;
SET_DEST$303"benv/long_function_program.b"$303null;
next_command$303command$303null;
#copy_s:
print$303""$303null;
[goto(#copy_e),("end"==command),print("")];
send_command$303command$303null;
next_command$303command$303null;
print$303""$303null;
goto$303#copy_s$303null;
#copy_e:
print$303""$303null;
DEL_DEST$303"benv/long_function_program2.b"$303null;
UNDEFINE$303command$303null;
UNDEFINE$303change_flag$303null;
goto$303$del_file_return_var$303null;
#del_file_end:
print$303""$303null;
string$303$replace_return_var;
goto$303#replace_end$303null;
#replace:
print$303""$303null;
print$303""$303null;
string$303command;
string$303command_to_send;
string$303replaced_command;
string$303left_part;
string$303right_part;
int$303command_len;
int$303number;
int$303func_pos;
int$303itemp;
int$303offset;
stack$303func_pos_stack;
stack$303func_ends_stack;
bool$303change_flag;
int$303func_len;
string$303symbol;
string$303return_type;
int$303func_entry;
string$303str_func_entry;
string$303sleft_border;
string$303sright_border;
int$303left_border;
int$303right_border;
int$303left_border_reserv;
int$303right_border_reserv;
string$303func_call;
string$303stemp;
string$303temp;
int$303stemp_len;
=$303func_entry$3030;
=$303offset$3030;
=$303change_flag$303False;
=$303was_replace$303False;
=$303$get_funcs_return_var$303"#get_funcs_res0";
goto$303#get_funcs$303null;
#get_funcs_res0:
pop$303$get_funcs_res$303null;
=$303func_stack$303$get_funcs_res;
func_stack.push("$temp");
func_stack.push("$temp");
#replace_s:
print$303""$303null;
func_stack.pop(return_type);
func_stack.pop(func_name);
print$303""$303null;
[goto(#replace_e),("end"==func_name),print("")];
#next:
print$303""$303null;
next_command$303command$303null;
print$303""$303null;
[goto(#next_end),("end"==command),print("")];
=$303number$303index$303command$303func_name;
print$303""$303null;
[print(""),(-1==number),goto(#not_send)];
send_command$303command$303null;
print$303""$303null;
goto$303#next$303null;
#not_send:
print$303""$303null;
=$303func_len$303len$303func_name$303null;
=$303number$303+$303number$303func_len;
symbol=command[number];
print$303""$303null;
[print(""),("("==symbol),goto(#to_next_start)];
=$303arg_type$303"int";
=$303number$303index$303command$303"int";
print$303""$303null;
[goto(#to_next_start),(0==number),print("")];
=$303arg_type$303"bool";
=$303number$303index$303command$303"bool";
print$303""$303null;
[goto(#to_next_start),(0==number),print("")];
=$303arg_type$303"float";
=$303number$303index$303command$303"float";
print$303""$303null;
[goto(#to_next_start),(0==number),print("")];
=$303arg_type$303"stack";
=$303number$303index$303command$303"stack";
print$303""$303null;
[goto(#to_next_start),(0==number),print("")];
=$303arg_type$303"string";
=$303number$303index$303command$303"string";
print$303""$303null;
[goto(#to_next_start),(0==number),goto(#to_next_end)];
#to_next_start:
print$303""$303null;
send_command$303command$303null;
print$303""$303null;
goto$303#next$303null;
#to_next_end:
print$303""$303null;
push$303command$303null;
push$303func_name$303null;
=$303$indexes_return_var$303"#indexes_res0";
goto$303#indexes$303null;
#indexes_res0:
pop$303$indexes_res$303null;
=$303func_pos_stack$303$indexes_res;
push$303command$303null;
push$303func_pos_stack$303null;
push$303func_len$303null;
=$303$func_ends_return_var$303"#func_ends_res0";
goto$303#func_ends$303null;
#func_ends_res0:
pop$303$func_ends_res$303null;
=$303func_ends_stack$303$func_ends_res;
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
=$303replaced_command$303command;
=$303itemp$303len$303command$303null;
=$303stemp_len$3030;
#pop_func_pos_start:
print$303""$303null;
[goto(#pop_func_pos_end),("end"==sleft_border),print("")];
=$303left_border$303int$303sleft_border$303null;
=$303right_border$303int$303sright_border$303null;
=$303left_border_reserv$303left_border;
=$303right_border_reserv$303right_border;
=$303left_border$303+$303left_border$303offset;
=$303right_border$303+$303right_border$303offset;
=$303str_func_entry$303str$303func_entry$303null;
=$303command_to_send$303+$303+$303+$303+$303return_type$303"$"$303func_name$303"_res"$303str_func_entry;
send_command$303command_to_send$303null;
=$303command_to_send$303+$303+$303+$303+$303"$"$303func_name$303"_res"$303str_func_entry$303"=";
=$303func_entry$303+$303func_entry$3031;
func_call=command[left_border_reserv:right_border_reserv];
left_part=replaced_command[0:left_border];
right_part=replaced_command[right_border:itemp];
=$303replaced_command$303+$303+$303+$303+$303+$303left_part$303"$"$303func_name$303"_res"$303str_func_entry$303right_part;
=$303stemp$303+$303+$303+$303"$"$303func_name$303"_res"$303str_func_entry;
=$303stemp_len$303len$303stemp$303null;
=$303offset$303+$303offset$303-$303stemp_len$303-$303right_border$303left_border;
=$303temp$303str$303offset$303null;
=$303itemp$303len$303replaced_command$303null;
=$303command_to_send$303+$303command_to_send$303func_call;
send_command$303command_to_send$303null;
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
print$303""$303null;
goto$303#pop_func_pos_start$303null;
#pop_func_pos_end:
print$303""$303null;
send_command$303replaced_command$303null;
=$303offset$3030;
print$303""$303null;
goto$303#next$303null;
#next_end:
print$303""$303null;
UNSET_SOURCE;
UNSET_DEST;
func_stack.pop(func_name);
=$303func_entry$3030;
=$303offset$3030;
print$303""$303null;
[goto(#replace_e),("end"==func_name),print("")];
func_stack.push(func_name);
print$303""$303null;
[goto(#change),(change_flag),print("")];
=$303change_flag$303True;
SET_SOURCE$303"benv/long_function_program.b"$303null;
SET_DEST$303"benv/long_function_program2.b"$303null;
print$303""$303null;
goto$303#replace_s$303null;
#change:
print$303""$303null;
=$303change_flag$303False;
SET_SOURCE$303"benv/long_function_program2.b"$303null;
SET_DEST$303"benv/long_function_program.b"$303null;
print$303""$303null;
goto$303#replace_s$303null;
#replace_e:
print$303""$303null;
push$303change_flag$303null;
=$303$del_file_return_var$303"#del_file_res0";
goto$303#del_file$303null;
#del_file_res0:
print$303""$303null;
print$303""$303null;
UNDEFINE$303stemp_len$303null;
UNDEFINE$303temp$303null;
UNDEFINE$303stemp$303null;
UNDEFINE$303func_call$303null;
UNDEFINE$303right_border_reserv$303null;
UNDEFINE$303left_border_reserv$303null;
UNDEFINE$303right_border$303null;
UNDEFINE$303left_border$303null;
UNDEFINE$303sright_border$303null;
UNDEFINE$303sleft_border$303null;
UNDEFINE$303str_func_entry$303null;
UNDEFINE$303func_entry$303null;
UNDEFINE$303return_type$303null;
UNDEFINE$303symbol$303null;
UNDEFINE$303func_len$303null;
UNDEFINE$303change_flag$303null;
UNDEFINE$303func_ends_stack$303null;
UNDEFINE$303func_pos_stack$303null;
UNDEFINE$303offset$303null;
UNDEFINE$303itemp$303null;
UNDEFINE$303func_pos$303null;
UNDEFINE$303number$303null;
UNDEFINE$303command_len$303null;
UNDEFINE$303right_part$303null;
UNDEFINE$303left_part$303null;
UNDEFINE$303replaced_command$303null;
UNDEFINE$303command_to_send$303null;
UNDEFINE$303command$303null;
goto$303$replace_return_var$303null;
#replace_end:
print$303""$303null;
string$303$main_return_var;
goto$303#main_end$303null;
#main:
print$303""$303null;
print$303""$303null;
int$303res;
=$303$init_return_var$303"#init_res0";
goto$303#init$303null;
#init_res0:
pop$303$init_res$303null;
=$303res$303$init_res;
[print(""),(0==res),print("INIT ERROR
")];
=$303$replace_return_var$303"#replace_res0";
goto$303#replace$303null;
#replace_res0:
print$303""$303null;
print$303""$303null;
=$303$finish_return_var$303"#finish_res0";
goto$303#finish$303null;
#finish_res0:
pop$303$finish_res$303null;
=$303res$303$finish_res;
[print(""),(0==res),print("FINISH ERROR
")];
UNDEFINE$303res$303null;
goto$303$main_return_var$303null;
#main_end:
print$303""$303null;
=$303$main_return_var$303"#main_res0";
goto$303#main$303null;
#main_res0:
print$303""$303null;
print$303""$303null;
