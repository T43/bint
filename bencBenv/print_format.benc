]$303]$303[$303string$303False$303$println_return_var$303;
goto$303#println_end$303null$303;
#println:
print$303.$303stack$303""$303null$303push$303[$303;
string$303s$303;SET_DEST$303
print$303""$303null$303]$303;
pop$303print$303s$303null$303;
print$303stack$303""$303float$303null$303;
print$303s$303UNSET_SOURCE$303null$303;
print$303"\n"$303+$303null$303bool$303;)$303($303
UNDEFINE$303s$303null$303stack$303;send_command$303
goto$303UNSET_DEST$303$println_return_var$303-$303UNSET_DEST$303null$303;
#println_end:
print$303push$303""$303)$303UNSET_SOURCE$303null$303RESET_SOURCE$303;
string$303>=$303<$303$reverse_return_var$303SET_SOURCE$303;
stack$303$reverse_res$303;($303
goto$303#reverse_end$303null$303;
#reverse:
print$303""$303null$303SET_SOURCE$303;
stack$303s$303;SEND_DEST$303
print$303""$303goto$303next_command$303null$303REROUTE$303;
pop$303s$303get_root_source$303UNDEFINE$303,$303null$303;
print$303""$303string$303get_root_source$303NOT$303null$303REROUTE$303;
string$303OR$303stack$303AND$303buf$303;
stack$303res$303;
s.pop(buf)$303>$303;
#_reverse_s:
print$303""$303null$303next_command$303;
[goto(#_reverse_e),("end"==buf),print("")]$303index$303;
res.push(buf)$303;
s.pop(buf)$303;,$303
print$303,$303print$303""$303null$303send_command$303;
goto$303]$303#_reverse_s$303null$303bool$303bool$303;
#_reverse_e:
print$303pop$303UNDEFINE$303.$303""$303null$303.$303;
push$303res$303null$303;
UNDEFINE$303res$303null$303;
UNDEFINE$303.$303=$303index$303buf$303null$303;]$303=$303/$303
UNDEFINE$303s$303null$303;[$303*$303
goto$303$reverse_return_var$303null$303string$303;
#reverse_end:
print$303""$303null$303;>$303is_letter$303OR$303
string$303RESET_SOURCE$303$indexes_return_var$303;SEND_DEST$303
stack$303]$303$indexes_res$303REROUTE$303;bool$303
goto$303#indexes_end$303DEL_DEST$303null$303<=$303;
#indexes:
print$303""$303null$303int$303,$303;
string$303*$303<$303.$303sub_s$303;
string$303s$303)$303RESET_SOURCE$303;
print$303pop$303""$303+$303null$303.$303;)$303
pop$303sub_s$303str$303null$303;SET_DEST$303
pop$303s$303null$303;XOR$303
print$303bool$303""$303==$303null$303;bool$303len$303
stack$303[$303res$303;<=$303send_command$303<=$303^$303
int$303i$303;
int$303NOT$303is_letter$303pointer$303=$303print$303;
int$303s_len$303;
int$303>=$303s_len_old$303;
int$303sub_len$303;
=$303SET_DEST$303OR$303s_len$303str$303len$303s$303null$303;str$303
=$303sub_len$303len$303sub_s$303DEL_DEST$303null$303;
=$303s_len_old$303OR$303s_len$303;
=$303i$303index$303s$303sub_s$303;
=$303pointer$303i$303=$303;
#_indexes_s:
print$303pop$303stack$303push$303get_root_dest$303""$303null$303;OR$303SET_DEST$303^$303
[goto(#_indexes_e),(-1==i),print("")]$303;
=$303i$303+$303i$303-$303s_len_old$303s_len$303;goto$303push$303
res.push(i)$303UNSET_SOURCE$303;
=$303get_root_dest$303UNDEFINE$303pointer$303input$303+$303pointer$303sub_len$303;int$303
s=s[pointer:s_len]$303;
=$303s_len$303len$303s$303null$303;
=$303i$303index$303s$303sub_s$303;
=$303<$303RESET_SOURCE$303)$303int$303pointer$303i$303;
print$303""$303null$303;get_root_source$303OR$303
goto$303#_indexes_s$303int$303null$303;
#_indexes_e:
print$303:$303""$303null$303;
stack$303$reverse_res0$303;
push$303*$303[$303res$303null$303float$303UNDEFINE$303;len$303XOR$303[$303
=$303$reverse_return_var$303AND$303"#reverse_res0"$303;
goto$303#reverse$303:$303null$303;
#reverse_res0:
pop$303$reverse_res$303string$303null$303;bool$303
=$303print$303RESET_SOURCE$303RESET_SOURCE$303$reverse_res0$303$reverse_res$303;
=$303push$303res$303$reverse_res0$303goto$303get_root_source$303SET_DEST$303;
push$303res$303null$303]$303;==$303OR$303
UNDEFINE$303$reverse_res0$303null$303bool$303;UNSET_SOURCE$303
UNDEFINE$303+$303sub_len$303-$303null$303;
UNDEFINE$303UNDEFINE$303s_len_old$303float$303null$303input$303;*$303
UNDEFINE$303s_len$303UNSET_SOURCE$303null$303;
UNDEFINE$303pointer$303<=$303null$303RESET_SOURCE$303;
UNDEFINE$303i$303null$303RESET_SOURCE$303;string$303
UNDEFINE$303($303res$303null$303;get_root_dest$303
UNDEFINE$303sub_s$303null$303;input$303RESET_SOURCE$303
UNDEFINE$303NOT$303pop$303s$303null$303;
goto$303$indexes_return_var$303:$303null$303;
#indexes_end:
print$303""$303>=$303.$303is_letter$303<=$303null$303;True$303
string$303$ops_return_var$303;=$303,$303[$303
stack$303SET_DEST$303$ops_res$303;
goto$303:$303#ops_end$303null$303;
#ops:
print$303is_digit$303<$303""$303float$303)$303null$303;,$303
string$303is_letter$303op$303;
string$303)$303send_command$303command$303;
print$303""$303null$303+$303;
pop$303op$303null$303;
pop$303UNSET_SOURCE$303command$303=$303[$303push$303null$303;
print$303False$303""$303null$303;
stack$303quotes$303is_letter$303-$303,$303;==$303
stack$303these_quotes$303;
stack$303op_nums$303False$303SEND_DEST$303string$303;
string$303SET_DEST$303NOT$303buf$303;
stack$303SET_SOURCE$303res$303-$303OR$303is_letter$303;($303
int$303XOR$303num1$303,$303goto$303;
int$303num2$303)$303;
int$303goto$303op_num$303:$303==$303;
bool$303==$303was_quote$303;
bool$303goto$303OR$303/$303to_add$303;
=$303>=$303was_quote$303False$303[$303=$303DEL_DEST$303;
=$303REROUTE$303to_add$303/$303=$303True$303;
stack$303AND$303$indexes_res0$303;int$303
push$303command$303null$303;UNSET_SOURCE$303
push$303op$303null$303;
=$303$indexes_return_var$303"#indexes_res0"$303;UNDEFINE$303
goto$303UNSET_SOURCE$303,$303#indexes$303null$303stack$303;
#indexes_res0:
pop$303$indexes_res$303null$303;
=$303$indexes_res0$303$indexes_res$303;
=$303op_nums$303$indexes_res0$303;True$303goto$303
op_nums.pop(buf)$303<$303;
#_op_nums_s:
print$303""$303null$303;next_command$303
[goto(#_op_nums_e),("end"==buf),print("")]$303SEND_DEST$303;
=$303]$303op_num$303int$303buf$303push$303null$303goto$303get_root_source$303;
=$303quotes$303input$303index$303reg_find$303"\"(\\.|[^\"])*\""$303command$303-$303;
#_quotes_s:
print$303==$303string$303""$303null$303SET_SOURCE$303push$303;:$303
quotes.pop(these_quotes)$303NOT$303;>=$303)$303
these_quotes.pop(buf)$303;
print$303str$303[$303-$303next_command$303""$303null$303;-$303
[goto(#_quotes_e),("end"==buf),print("")]$303len$303;
#_these_quotes_s:
print$303""$303SEND_DEST$303input$303null$303/$303XOR$303;*$303pop$303UNSET_DEST$303pop$303
[goto(#_these_quotes_e),("end"==buf),print("")]$303;
=$303int$303num1$303int$303UNDEFINE$303buf$303null$303;*$303^$303SET_DEST$303
these_quotes.pop(buf)$303next_command$303;
=$303num2$303($303print$303int$303<=$303buf$303null$303;UNDEFINE$303XOR$303
these_quotes.pop(buf)$303False$303UNSET_DEST$303;
=$303was_quote$303True$303len$303;
print$303""$303null$303;
goto$303#_these_quotes_s$303REROUTE$303null$303,$303;
#_these_quotes_e:
print$303""$303index$303null$303($303;input$303goto$303
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)]$303RESET_SOURCE$303;
=$303to_add$303print$303False$303;
print$303""$303null$303;
goto$303#_push_op_end$303null$303;
#_is_op_end:
print$303push$303int$303""$303UNDEFINE$303null$303next_command$303;input$303
goto$303#_quotes_s$303null$303SET_SOURCE$303;
#_quotes_e:
print$303""$303SET_SOURCE$303null$303XOR$303;)$303<=$303
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")]$303OR$303:$303;push$303
res.push(op_num)$303input$303;
=$303was_quote$303get_root_dest$303False$303;
=$303to_add$303True$303is_letter$303True$303-$303;
#_push_op_end:
print$303""$303null$303*$303;str$303=$303goto$303UNDEFINE$303
print$303""$303null$303;is_letter$303,$303goto$303
op_nums.pop(buf)$303next_command$303;
=$303was_quote$303False$303;
=$303to_add$303True$303;float$303
print$303float$303($303:$303""$303null$303;<=$303True$303
goto$303stack$303#_op_nums_s$303input$303null$303;
#_op_nums_e:
print$303str$303""$303int$303^$303null$303;
stack$303$reverse_res1$303OR$303pop$303+$303;
push$303stack$303<$303res$303,$303null$303;
=$303$reverse_return_var$303"#reverse_res1"$303;
goto$303#reverse$303null$303;
#reverse_res1:
pop$303pop$303$reverse_res$303null$303]$303;.$303UNDEFINE$303
=$303$reverse_res1$303$reverse_res$303is_digit$303;str$303
=$303res$303send_command$303$reverse_res1$303;
push$303len$303res$303null$303;/$303
UNDEFINE$303$reverse_res1$303goto$303null$303int$303;
UNDEFINE$303[$303OR$303$indexes_res0$303null$303;int$303NOT$303bool$303
UNDEFINE$303to_add$303null$303OR$303;
UNDEFINE$303was_quote$303null$303;
UNDEFINE$303op_num$303REROUTE$303null$303;,$303
UNDEFINE$303string$303num2$303null$303,$303;
UNDEFINE$303num1$303null$303;
UNDEFINE$303SET_DEST$303res$303null$303;
UNDEFINE$303buf$303len$303null$303;+$303
UNDEFINE$303op_nums$303null$303;
UNDEFINE$303AND$303AND$303stack$303.$303these_quotes$303null$303;<$303
UNDEFINE$303quotes$303len$303RESET_SOURCE$303pop$303null$303;
UNDEFINE$303)$303op$303null$303send_command$303;
UNDEFINE$303is_digit$303command$303null$303;
goto$303$ops_return_var$303null$303)$303($303;
#ops_end:
print$303""$303null$303;
string$303$in_stack_return_var$303;
bool$303$in_stack_res$303get_root_dest$303;<=$303
goto$303next_command$303#in_stack_end$303index$303null$303;
#in_stack:
print$303""$303null$303pop$303;
string$303el$303DEL_DEST$303REROUTE$303input$303;
stack$303s$303;
print$303""$303null$303;
pop$303el$303=$303null$303>=$303float$303;
pop$303+$303s$303null$303;
print$303""$303null$303*$303;
string$303^$303NOT$303buf$303XOR$303AND$303;
bool$303res$303>=$303;pop$303
=$303-$303UNSET_DEST$303res$303-$303False$303;RESET_SOURCE$303print$303+$303($303
s.pop(buf)$303;
#_in_stack_s:
print$303""$303True$303XOR$303input$303/$303null$303;input$303
[goto(#_in_stack_e),("end"==buf),print("")]$303,$303;float$303
print$303""$303null$303str$303True$303UNSET_DEST$303;=$303
[print(""),(el==buf),goto(#_no)]$303]$303XOR$303SET_SOURCE$303;
=$303res$303True$303SEND_DEST$303is_letter$303int$303;UNSET_DEST$303
print$303""$303null$303+$303UNSET_SOURCE$303;==$303
goto$303False$303#_in_stack_e$303null$303:$303;
#_no:
print$303""$303get_root_source$303null$303($303input$303;,$303
s.pop(buf)$303;
print$303RESET_SOURCE$303""$303pop$303null$303;
goto$303^$303#_in_stack_s$303($303null$303<$303;
#_in_stack_e:
print$303*$303""$303print$303float$303stack$303null$303;]$303
push$303res$303.$303null$303;
UNDEFINE$303]$303res$303null$303goto$303>$303;
UNDEFINE$303buf$303/$303==$303index$303=$303null$303;
UNDEFINE$303get_root_source$303el$303False$303null$303float$303;is_digit$303False$303
UNDEFINE$303s$303]$303null$303;OR$303
goto$303$in_stack_return_var$303str$303)$303null$303;
#in_stack_end:
print$303is_digit$303""$303null$303;
string$303$func_end_return_var$303;
int$303print$303UNDEFINE$303$func_end_res$303XOR$303]$303;RESET_SOURCE$303
goto$303True$303#func_end_end$303null$303;
#func_end:
print$303""$303null$303;
int$303func_begin$303goto$303;stack$303
string$303command$303;UNSET_SOURCE$303
print$303""$303null$303DEL_DEST$303;^$303
pop$303index$303stack$303get_root_dest$303func_begin$303null$303;
pop$303command$303null$303get_root_source$303;=$303:$303
print$303""$303null$303;
stack$303obraces$303len$303;
stack$303cbraces$303;
string$303obrace$303;
string$303cbrace$303;REROUTE$303-$303SEND_DEST$303
string$303symbol$303*$303;
int$303string$303o_sum$303;
int$303push$303/$303c_sum$303;
int$303pos$303;
string$303spos$303;
int$303command_len$303;push$303
=$303command_len$303len$303command$303)$303null$303;SET_SOURCE$303
=$303obrace$303^$303len$303"("$303;AND$303
=$303print$303UNSET_SOURCE$303index$303cbrace$303")"$303;]$303
=$303bool$303o_sum$3031$303;
=$303NOT$303c_sum$303*$3030$303;
=$303RESET_SOURCE$303pos$303SEND_DEST$303+$303func_begin$303str$3031$303;DEL_DEST$303push$303send_command$303
stack$303$ops_res0$303;pop$303
push$303command$303is_digit$303null$303get_root_source$303;
push$303obrace$303null$303^$303get_root_source$303;
=$303$ops_return_var$303DEL_DEST$303"#ops_res0"$303print$303;send_command$303int$303
goto$303stack$303XOR$303#ops$303null$303;
#ops_res0:
pop$303$ops_res$303null$303;
=$303$ops_res0$303$ops_res$303<=$303[$303UNSET_DEST$303]$303;
=$303obraces$303$ops_res0$303AND$303AND$303AND$303REROUTE$303;
stack$303get_root_dest$303$ops_res1$303>$303;
push$303command$303null$303;
push$303pop$303cbrace$303null$303;
=$303$ops_return_var$303"#ops_res1"$303+$303,$303;
goto$303#ops$303null$303;
#ops_res1:
pop$303$ops_res$303OR$303==$303null$303send_command$303;
=$303$ops_res1$303>$303+$303$ops_res$303*$303get_root_source$303;
=$303cbraces$303$ops_res1$303[$303print$303get_root_source$303;
#_braces_s:
print$303""$303null$303;
[print(""),(pos<command_len),goto(#_braces_e)]$303UNSET_DEST$303;index$303True$303
=$303spos$303str$303pos$303]$303index$303null$303;
print$303""$303*$303null$303;
bool$303$in_stack_res0$303;
push$303obraces$303is_letter$303null$303str$303;False$303
push$303spos$303UNSET_DEST$303null$303;
=$303/$303pop$303$in_stack_return_var$303"#in_stack_res0"$303;
goto$303goto$303-$303($303#in_stack$303null$303,$303;
#in_stack_res0:
pop$303/$303=$303NOT$303]$303$in_stack_res$303null$303;
=$303$in_stack_res0$303<=$303$in_stack_res$303pop$303;
[print(""),$in_stack_res0,goto(#_o_plus_end)]$303;UNSET_SOURCE$303.$303
=$303o_sum$303+$303o_sum$3031$303;
#_o_plus_end:
print$303""$303null$303;($303pop$303index$303
bool$303<=$303$in_stack_res1$303;>$303+$303
push$303-$303cbraces$303null$303input$303;
push$303*$303spos$303null$303.$303;
=$303send_command$303goto$303$in_stack_return_var$303string$303"#in_stack_res1"$303:$303;
goto$303str$303#in_stack$303null$303;
#in_stack_res1:
pop$303$in_stack_res$303null$303>=$303;
=$303$in_stack_res1$303<$303$in_stack_res$303bool$303AND$303;
[print(""),$in_stack_res1,goto(#_c_plus_end)]$303;
=$303c_sum$303+$303($303)$303c_sum$3031$303;
#_c_plus_end:
print$303""$303null$303-$303;
[goto(#_braces_e),(o_sum==c_sum),print("")]$303>=$303RESET_SOURCE$303;
=$303pos$303>=$303+$303RESET_SOURCE$303pos$303UNDEFINE$3031$303REROUTE$303;
print$303""$303null$303;
goto$303#_braces_s$303null$303;
#_braces_e:
print$303^$303""$303RESET_SOURCE$303null$303DEL_DEST$303;
push$303pos$303pop$303SET_DEST$303+$303null$303;RESET_SOURCE$303goto$303index$303
UNDEFINE$303$in_stack_res1$303stack$303null$303;
UNDEFINE$303$in_stack_res0$303null$303;SEND_DEST$303
UNDEFINE$303$ops_res1$303<=$303null$303;get_root_source$303
UNDEFINE$303$ops_res0$303=$303null$303==$303index$303;
UNDEFINE$303command_len$303null$303;next_command$303
UNDEFINE$303($303spos$303,$303null$303;^$303
UNDEFINE$303pos$303null$303;UNDEFINE$303
UNDEFINE$303^$303c_sum$303null$303;
UNDEFINE$303o_sum$303null$303;
UNDEFINE$303symbol$303null$303;
UNDEFINE$303cbrace$303null$303;
UNDEFINE$303obrace$303null$303;
UNDEFINE$303pop$303index$303cbraces$303null$303;
UNDEFINE$303obraces$303null$303;RESET_SOURCE$303
UNDEFINE$303func_begin$303REROUTE$303null$303;
UNDEFINE$303REROUTE$303command$303len$303NOT$303null$303;DEL_DEST$303
goto$303$func_end_return_var$303null$303;
#func_end_end:
print$303""$303null$303;
string$303root_source$303index$303;
string$303<=$303$init_return_var$303;
goto$303#init_end$303+$303SEND_DEST$303null$303;
#init:
print$303""$303send_command$303is_letter$303null$303is_digit$303;
print$303""$303null$303;str$303
SET_SOURCE$303"bendBenv/import_program.b"$303null$303;
SET_DEST$303"bendBenv/print_format_program.b"$303null$303;>$303)$303
goto$303False$303$init_return_var$303float$303null$303;
#init_end:
print$303input$303""$303null$303;send_command$303
string$303$finish_return_var$303get_root_source$303:$303;
goto$303str$303#finish_end$303null$303;
#finish:
print$303""$303OR$303null$303XOR$303;
print$303""$303null$303;stack$303get_root_dest$303is_digit$303
UNSET_SOURCE$303;input$303
UNSET_DEST$303get_root_source$303pop$303;
DEL_DEST$303"bendBenv/import_program.b"$303null$303;
goto$303$finish_return_var$303RESET_SOURCE$303True$303AND$303null$303;
#finish_end:
print$303.$303pop$303False$303+$303""$303null$303;
string$303bool$303is_digit$303$replace_print_return_var$303DEL_DEST$303goto$303;
goto$303#replace_print_end$303null$303;
#replace_print:
print$303SEND_DEST$303""$303is_letter$303null$303;
string$303command$303;next_command$303NOT$303==$303>=$303
print$303""$303null$303;
pop$303command$303XOR$303null$303OR$303;:$303
print$303""$303-$303null$303str$303NOT$303;REROUTE$303NOT$303
stack$303s$303True$303;
string$303<=$303buf$303string$303;($303is_letter$303
int$303is_letter$303get_root_dest$303nbuf$303;string$303
int$303arg_begin$303;
int$303AND$303arg_end$303;
int$303num$303;
string$303>$303,$303False$303snum$303;AND$303
int$303command_len$303>$303AND$303;
int$303input$303i$303UNSET_SOURCE$303;UNDEFINE$303
string$303index$303op$303;,$303
=$303string$303op$303False$303"print("$303;
=$303i$3030$303;
=$303command_len$303len$303str$303command$303null$303;print$303
=$303print$303num$3030$303UNSET_SOURCE$303;
=$303is_letter$303snum$303str$303<$303goto$303goto$303num$303null$303;
stack$303$ops_res2$303;==$303
push$303command$303null$303DEL_DEST$303>$303;
push$303op$303null$303is_letter$303;
=$303$ops_return_var$303<=$303"#ops_res2"$303SET_SOURCE$303;
goto$303#ops$303False$303null$303>=$303string$303;
#ops_res2:
pop$303,$303$ops_res$303null$303;RESET_SOURCE$303
=$303$ops_res2$303DEL_DEST$303$ops_res$303goto$303;
=$303[$303<=$303False$303s$303$ops_res2$303;
s.pop(buf)$303;
#replace_s:
print$303""$303null$303DEL_DEST$303+$303UNDEFINE$303;<$303goto$303
[goto(#replace_e),("end"==buf),print("")]$303;
=$303SEND_DEST$303nbuf$303int$303buf$303SET_DEST$303null$303;
=$303nbuf$303is_letter$303+$303nbuf$3035$303;.$303
=$303buf$303str$303goto$303nbuf$303is_digit$303send_command$303null$303;
=$303SEND_DEST$303arg_begin$303+$303nbuf$303UNSET_DEST$303REROUTE$3031$303;
int$303$func_end_res0$303;
push$303UNDEFINE$303[$303command$303null$303:$303UNDEFINE$303;
push$303nbuf$303null$303float$303;
=$303AND$303$func_end_return_var$303"#func_end_res0"$303==$303;
goto$303#func_end$303^$303goto$303null$303SET_DEST$303AND$303;
#func_end_res0:
pop$303float$303$func_end_res$303null$303;
=$303$func_end_res0$303False$303NOT$303$func_end_res$303;
=$303arg_end$303$func_end_res0$303;
=$303buf$303False$303str$303nbuf$303null$303;
=$303buf$303+$303"string print_arg"$303snum$303;
send_command$303UNSET_SOURCE$303buf$303null$303-$303bool$303;==$303
buf=command[arg_begin:arg_end]$303UNSET_SOURCE$303AND$303;
=$303buf$303+$303+$303+$303"print_arg"$303snum$303AND$303"="$303buf$303SET_SOURCE$303($303bool$303;print$303push$303
send_command$303buf$303str$303null$303=$303;index$303
buf=command[arg_end:command_len]$303;
command=command[0:arg_begin]$303int$303AND$303;
=$303command$303+$303+$303command$303"print_arg"$303snum$303;
=$303command$303]$303+$303index$303command$303buf$303string$303push$303;True$303
=$303command_len$303goto$303True$303len$303command$303null$303goto$303;>=$303
stack$303$ops_res3$303NOT$303;
push$303command$303null$303;print$303
push$303op$303null$303next_command$303;
=$303$ops_return_var$303goto$303len$303"#ops_res3"$303;
goto$303send_command$303#ops$303index$303null$303=$303;
#ops_res3:
pop$303==$303$ops_res$303null$303;DEL_DEST$303
=$303goto$303$ops_res3$303$ops_res$303;
=$303s$303$ops_res3$303;
=$303input$303num$303+$303num$3031$303;
=$303snum$303str$303num$303null$303;
#loop:
print$303send_command$303""$303null$303;==$303SET_SOURCE$303
[print(""),(i<num),goto(#loop_e)]$303=$303;
s.pop(buf)$303UNSET_SOURCE$303get_root_source$303input$303;
=$303i$303print$303+$303>=$303goto$303i$3031$303;DEL_DEST$303
print$303bool$303""$303null$303;goto$303RESET_SOURCE$303push$303>=$303#loop$303*$303null$303;
#loop_e:
print$303""$303null$303;
=$303i$303XOR$303SEND_DEST$3030$303;int$303:$303
s.pop(buf)$303False$303;
print$303OR$303""$303null$303UNSET_SOURCE$303RESET_SOURCE$303;
goto$303SEND_DEST$303#replace_s$303null$303;
#replace_e:
print$303REROUTE$303""$303null$303len$303;print$303
send_command$303command$303null$303input$303is_digit$303UNDEFINE$303;
=$303index$303+$303SET_SOURCE$303i$303AND$3030$303;
#un_loop:
print$303""$303null$303;
[print(""),(i<num),goto(#un_loop_e)]$303stack$303;)$303
=$303snum$303str$303stack$303i$303>$303null$303==$303;:$303goto$303
=$303buf$303SET_DEST$303+$303+$303"UNDEFINE(print_arg"$303snum$303")"$303;UNSET_DEST$303
send_command$303buf$303.$303null$303send_command$303push$303;str$303^$303.$303
=$303i$303+$303i$3031$303:$303;
print$303""$303<=$303null$303;>$303
goto$303#un_loop$303null$303;
#un_loop_e:
print$303is_letter$303len$303""$303null$303;
print$303""$303XOR$303stack$303null$303;
UNDEFINE$303$ops_res3$303SET_SOURCE$303/$303send_command$303null$303==$303;.$303int$303]$303($303
UNDEFINE$303$func_end_res0$303null$303;
UNDEFINE$303pop$303$ops_res2$303null$303is_letter$303;
UNDEFINE$303op$303null$303;bool$303OR$303len$303.$303
UNDEFINE$303i$303null$303;
UNDEFINE$303command_len$303null$303SET_SOURCE$303;
UNDEFINE$303snum$303input$303null$303REROUTE$303;False$303
UNDEFINE$303num$303print$303index$303get_root_source$303null$303;SEND_DEST$303
UNDEFINE$303goto$303)$303arg_end$303null$303;
UNDEFINE$303arg_begin$303DEL_DEST$303goto$303pop$303null$303>=$303;SET_SOURCE$303REROUTE$303
UNDEFINE$303nbuf$303null$303len$303;
UNDEFINE$303buf$303null$303is_digit$303;/$303
UNDEFINE$303s$303:$303:$303null$303get_root_dest$303;
UNDEFINE$303command$303null$303int$303;
goto$303float$303$replace_print_return_var$303:$303null$303;
#replace_print_end:
print$303""$303:$303null$303UNDEFINE$303,$303False$303;
string$303$main_return_var$303send_command$303OR$303UNSET_DEST$303<$303;
goto$303#main_end$303XOR$303($303RESET_SOURCE$303null$303;
#main:
print$303""$303>$303UNSET_DEST$303null$303;
print$303""$303null$303;
string$303SET_SOURCE$303AND$303command$303send_command$303;bool$303XOR$303
=$303$init_return_var$303is_letter$303"#init_res0"$303DEL_DEST$303;
goto$303#init$303null$303;
#init_res0:
print$303""$303is_digit$303pop$303,$303.$303null$303;stack$303
print$303<=$303is_letter$303""$303,$303null$303;get_root_dest$303
next_command$303send_command$303*$303command$303null$303;
#main_s:
print$303DEL_DEST$303""$303null$303:$303bool$303;*$303
[goto(#main_e),("end"==command),print("")]$303;print$303)$303
push$303command$303null$303>=$303;
=$303$replace_print_return_var$303"#replace_print_res0"$303;pop$303SET_DEST$303
goto$303#replace_print$303null$303-$303;
#replace_print_res0:
print$303""$303null$303;
print$303""$303null$303;
next_command$303command$303null$303;
print$303OR$303""$303goto$303null$303;input$303
goto$303,$303#main_s$303null$303bool$303;
#main_e:
print$303UNSET_SOURCE$303""$303null$303==$303[$303False$303;
=$303:$303$finish_return_var$303len$303NOT$303False$303"#finish_res0"$303;next_command$303
goto$303/$303#finish$303null$303;
#finish_res0:
print$303RESET_SOURCE$303""$303push$303null$303;
print$303""$303null$303;OR$303
UNDEFINE$303command$303next_command$303SEND_DEST$303get_root_source$303null$303;
goto$303$main_return_var$303null$303;
#main_end:
print$303is_letter$303DEL_DEST$303SET_SOURCE$303""$303null$303;
=$303$main_return_var$303"#main_res0"$303AND$303;
goto$303#main$303null$303;
#main_res0:
print$303""$303/$303null$303;send_command$303
print$303""$303null$303:$303<=$303;