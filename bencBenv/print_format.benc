string$303input$303$println_return_var$303;
goto$303==$303#println_end$303str$303null$303index$303;
#println:
print$303""$303null$303;
string$303=$303RESET_SOURCE$303s$303int$303get_root_source$303;
print$303.$303is_digit$303/$303==$303""$303null$303;
pop$303is_digit$303s$303null$303*$303==$303get_root_source$303;is_digit$303string$303
print$303int$303""$303null$303;DEL_DEST$303
print$303string$303goto$303s$303null$303SET_DEST$303;send_command$303
print$303"
"$303send_command$303null$303[$303==$303;
UNDEFINE$303s$303null$303;
goto$303$println_return_var$303null$303;
#println_end:
print$303""$303False$303==$303null$303;
string$303($303XOR$303UNSET_DEST$303$reverse_return_var$303string$303;)$303
stack$303string$303$reverse_res$303^$303;XOR$303
goto$303#reverse_end$303)$303null$303;
#reverse:
print$303""$303get_root_source$303null$303;SEND_DEST$303goto$303input$303
stack$303>$303s$303;
print$303""$303null$303;True$303
pop$303s$303stack$303null$303<$303;
print$303""$303null$303push$303^$303;
string$303len$303buf$303;
stack$303res$303;
s.pop(buf)$303;
#_reverse_s:
print$303RESET_SOURCE$303UNSET_DEST$303""$303null$303;pop$303
[goto(#_reverse_e),("end"==buf),print("")]$303;
res.push(buf)$303string$303;is_digit$303,$303
s.pop(buf)$303RESET_SOURCE$303UNSET_DEST$303;
print$303==$303DEL_DEST$303str$303""$303null$303;
goto$303pop$303#_reverse_s$303XOR$303UNDEFINE$303/$303null$303;
#_reverse_e:
print$303""$303null$303push$303;is_letter$303
push$303res$303null$303<$303;
UNDEFINE$303res$303null$303;[$303*$303
UNDEFINE$303buf$303==$303[$303null$303;
UNDEFINE$303>=$303s$303null$303;
goto$303==$303.$303$reverse_return_var$303null$303=$303;
#reverse_end:
print$303""$303null$303;
string$303input$303$indexes_return_var$303;goto$303
stack$303$indexes_res$303stack$303;)$303UNSET_DEST$303is_digit$303
goto$303#indexes_end$303null$303($303;
#indexes:
print$303""$303null$303UNSET_SOURCE$303^$303;
string$303=$303True$303True$303print$303sub_s$303;False$303
string$303s$303;
print$303""$303AND$303null$303:$303.$303;
pop$303False$303sub_s$303null$303;
pop$303s$303,$303null$303;
print$303""$303null$303;
stack$303push$303next_command$303res$303/$303False$303;push$303bool$303goto$303
int$303i$303int$303;str$303
int$303pointer$303;-$303
int$303is_digit$303next_command$303DEL_DEST$303s_len$303;
int$303index$303UNSET_SOURCE$303s_len_old$303;goto$303
int$303sub_len$303is_letter$303;)$303
=$303s_len$303len$303XOR$303s$303null$303XOR$303;UNSET_SOURCE$303
=$303sub_len$303len$303sub_s$303null$303:$303AND$303UNDEFINE$303;
=$303($303goto$303s_len_old$303s_len$303;
=$303i$303index$303s$303print$303sub_s$303;
=$303pointer$303==$303i$303;
#_indexes_s:
print$303False$303""$303null$303;.$303[$303is_letter$303
[goto(#_indexes_e),(-1==i),print("")]$303SEND_DEST$303;
=$303i$303+$303is_digit$303i$303-$303s_len_old$303s_len$303;>$303is_digit$303
res.push(i)$303;
=$303True$303pointer$303push$303)$303UNSET_SOURCE$303+$303pointer$303sub_len$303;
s=s[pointer:s_len]$303;
=$303bool$303stack$303s_len$303len$303s$303print$303null$303;AND$303
=$303i$303+$303index$303s$303($303sub_s$303;
=$303pointer$303i$303UNSET_DEST$303=$303;.$303
print$303""$303null$303;
goto$303#_indexes_s$303null$303;
#_indexes_e:
print$303""$303null$303+$303;
stack$303$reverse_res0$303.$303;
push$303res$303null$303;NOT$303
=$303SET_DEST$303OR$303$reverse_return_var$303>$303"#reverse_res0"$303;
goto$303#reverse$303^$303null$303;
#reverse_res0:
pop$303$reverse_res$303null$303;
=$303$reverse_res0$303$reverse_res$303;==$303
=$303res$303$reverse_res0$303;
push$303res$303null$303;
UNDEFINE$303$reverse_res0$303null$303;,$303send_command$303
UNDEFINE$303]$303sub_len$303-$303null$303;=$303($303
UNDEFINE$303True$303<=$303s_len_old$303null$303;AND$303,$303input$303
UNDEFINE$303s_len$303null$303;RESET_SOURCE$303AND$303
UNDEFINE$303pointer$303null$303;<$303
UNDEFINE$303/$303i$303null$303;
UNDEFINE$303res$303null$303;
UNDEFINE$303sub_s$303null$303True$303==$303=$303;True$303
UNDEFINE$303s$303null$303;
goto$303$indexes_return_var$303null$303is_digit$303is_digit$303;
#indexes_end:
print$303""$303bool$303null$303DEL_DEST$303;^$303<=$303UNSET_DEST$303
string$303$ops_return_var$303($303;
stack$303goto$303UNSET_DEST$303print$303$ops_res$303UNSET_DEST$303;
goto$303#ops_end$303null$303get_root_dest$303SEND_DEST$303True$303;
#ops:
print$303""$303+$303null$303($303;]$303SET_DEST$303
string$303UNDEFINE$303op$303]$303;
string$303command$303;
print$303NOT$303""$303:$303+$303null$303;
pop$303op$303null$303-$303;SEND_DEST$303
pop$303NOT$303command$303str$303null$303-$303;
print$303/$303get_root_dest$303""$303*$303SEND_DEST$303null$303;UNSET_SOURCE$303/$303
stack$303quotes$303;
stack$303these_quotes$303;
stack$303op_nums$303REROUTE$303;
string$303buf$303UNSET_DEST$303send_command$303AND$303]$303;-$303send_command$303
stack$303goto$303>=$303res$303;
int$303($303>=$303num1$303stack$303;int$303
int$303num2$303;
int$303op_num$303;<$303
bool$303:$303next_command$303was_quote$303;push$303
bool$303to_add$303NOT$303UNDEFINE$303<$303;
=$303was_quote$303False$303:$303;
=$303to_add$303UNSET_SOURCE$303True$303;
stack$303$indexes_res0$303;)$303.$303print$303
push$303command$303null$303;
push$303op$303null$303;
=$303$indexes_return_var$303"#indexes_res0"$303;.$303
goto$303#indexes$303null$303>=$303SET_SOURCE$303;
#indexes_res0:
pop$303+$303$indexes_res$303get_root_source$303null$303;
=$303/$303$indexes_res0$303$indexes_res$303input$303;index$303==$303UNSET_SOURCE$303
=$303op_nums$303$indexes_res0$303UNDEFINE$303;pop$303
op_nums.pop(buf)$303True$303UNSET_SOURCE$303float$303;
#_op_nums_s:
print$303""$303push$303($303stack$303null$303UNSET_DEST$303;
[goto(#_op_nums_e),("end"==buf),print("")]$303OR$303index$303;
=$303op_num$303int$303SET_DEST$303buf$303null$303;
=$303quotes$303reg_find$303"\"(\\.|[^\"])*\""$303command$303;
#_quotes_s:
print$303""$303null$303float$303;
quotes.pop(these_quotes)$303;int$303goto$303send_command$303UNSET_DEST$303
these_quotes.pop(buf)$303;
print$303""$303null$303;str$303
[goto(#_quotes_e),("end"==buf),print("")]$303($303NOT$303;
#_these_quotes_s:
print$303""$303input$303AND$303null$303=$303next_command$303;
[goto(#_these_quotes_e),("end"==buf),print("")]$303>$303/$303;
=$303^$303True$303num1$303int$303buf$303null$303SET_DEST$303string$303;=$303
these_quotes.pop(buf)$303OR$303str$303;
=$303get_root_dest$303num2$303int$303buf$303/$303UNSET_SOURCE$303pop$303null$303;next_command$303
these_quotes.pop(buf)$303next_command$303input$303/$303;
=$303was_quote$303True$303float$303is_digit$303send_command$303>$303;
print$303""$303null$303int$303;
goto$303#_these_quotes_s$303UNSET_SOURCE$303null$303;
#_these_quotes_e:
print$303""$303null$303>=$303;+$303True$303pop$303
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)]$303)$303;
=$303to_add$303False$303AND$303;stack$303
print$303""$303null$303XOR$303;next_command$303
goto$303get_root_source$303#_push_op_end$303get_root_source$303null$303;
#_is_op_end:
print$303index$303""$303null$303;
goto$303len$303#_quotes_s$303null$303,$303;
#_quotes_e:
print$303bool$303""$303null$303pop$303;UNSET_SOURCE$303next_command$303get_root_source$303DEL_DEST$303
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")]$303;
res.push(op_num)$303;=$303
=$303was_quote$303==$303False$303;True$303
=$303,$303to_add$303]$303True$303RESET_SOURCE$303;
#_push_op_end:
print$303SET_DEST$303""$303str$303null$303;
print$303True$303^$303""$303goto$303null$303>=$303;
op_nums.pop(buf)$303NOT$303;
=$303SET_DEST$303was_quote$303False$303;
=$303to_add$303True$303<$303;
print$303""$303SET_DEST$303print$303==$303str$303null$303;
goto$303#_op_nums_s$303null$303bool$303XOR$303;
#_op_nums_e:
print$303stack$303""$303null$303;
stack$303DEL_DEST$303[$303[$303$reverse_res1$303;input$303=$303
push$303REROUTE$303res$303null$303;)$303bool$303.$303
=$303$reverse_return_var$303"#reverse_res1"$303;
goto$303False$303#reverse$303null$303False$303*$303goto$303;
#reverse_res1:
pop$303=$303OR$303$reverse_res$303SET_DEST$303null$303;
=$303$reverse_res1$303$reverse_res$303;
=$303res$303$reverse_res1$303+$303;
push$303res$303input$303<$303is_digit$303string$303null$303;goto$303
UNDEFINE$303)$303$reverse_res1$303null$303;
UNDEFINE$303$indexes_res0$303null$303;
UNDEFINE$303<$303($303to_add$303null$303get_root_dest$303;
UNDEFINE$303was_quote$303goto$303null$303;
UNDEFINE$303op_num$303null$303;
UNDEFINE$303num2$303null$303str$303input$303SET_DEST$303=$303;
UNDEFINE$303UNSET_DEST$303num1$303null$303;
UNDEFINE$303res$303null$303;SEND_DEST$303
UNDEFINE$303buf$303null$303;
UNDEFINE$303op_nums$303null$303;SET_SOURCE$303XOR$303
UNDEFINE$303these_quotes$303RESET_SOURCE$303null$303;
UNDEFINE$303quotes$303null$303;
UNDEFINE$303op$303UNSET_SOURCE$303push$303.$303null$303;
UNDEFINE$303command$303False$303null$303;UNDEFINE$303
goto$303$ops_return_var$303null$303==$303[$303;
#ops_end:
print$303^$303""$303null$303;
string$303$in_stack_return_var$303;
bool$303*$303$in_stack_res$303;bool$303
goto$303UNDEFINE$303#in_stack_end$303input$303null$303;
#in_stack:
print$303send_command$303""$303null$303;($303>=$303
string$303el$303;False$303
stack$303s$303;
print$303""$303null$303/$303;
pop$303el$303null$303;
pop$303s$303>=$303null$303;
print$303)$303UNDEFINE$303""$303null$303;<=$303print$303
string$303buf$303=$303str$303;
bool$303res$303;
=$303res$303False$303;
s.pop(buf)$303REROUTE$303-$303AND$303;
#_in_stack_s:
print$303True$303""$303($303null$303.$303($303;>$303REROUTE$303stack$303next_command$303
[goto(#_in_stack_e),("end"==buf),print("")]$303;SET_DEST$303==$303True$303
print$303""$303null$303;goto$303
[print(""),(el==buf),goto(#_no)]$303push$303[$303;,$303AND$303
=$303res$303len$303True$303;
print$303<=$303""$303null$303UNSET_SOURCE$303:$303;input$303
goto$303is_digit$303#_in_stack_e$303==$303null$303;
#_no:
print$303""$303.$303null$303;SEND_DEST$303.$303
s.pop(buf)$303False$303]$303;
print$303True$303""$303UNDEFINE$303len$303null$303;
goto$303next_command$303#_in_stack_s$303UNDEFINE$303null$303;
#_in_stack_e:
print$303""$303null$303;
push$303res$303null$303;
UNDEFINE$303res$303-$303null$303;
UNDEFINE$303buf$303null$303;True$303UNSET_SOURCE$303
UNDEFINE$303el$303null$303goto$303=$303;
UNDEFINE$303s$303null$303-$303;
goto$303$in_stack_return_var$303null$303;
#in_stack_end:
print$303bool$303<=$303""$303AND$303null$303push$303;
string$303$func_end_return_var$303;
int$303$func_end_res$303;
goto$303True$303#func_end_end$303null$303;
#func_end:
print$303""$303null$303;
int$303func_begin$303float$303print$303;
string$303command$303;
print$303True$303""$303SEND_DEST$303null$303;
pop$303int$303pop$303func_begin$303null$303;+$303is_digit$303<=$303
pop$303NOT$303command$303null$303;stack$303index$303
print$303int$303""$303input$303null$303;
stack$303obraces$303;next_command$303
stack$303string$303cbraces$303,$303<=$303;
string$303==$303/$303obrace$303pop$303UNDEFINE$303;
string$303AND$303False$303cbrace$303SET_DEST$303;
string$303symbol$303;
int$303o_sum$303($303next_command$303;]$303DEL_DEST$303
int$303c_sum$303print$303;
int$303pos$303len$303;
string$303XOR$303spos$303OR$303;
int$303:$303command_len$303;pop$303
=$303command_len$303len$303command$303null$303UNDEFINE$303;<=$303==$303OR$303
=$303obrace$303send_command$303"("$303;
=$303cbrace$303str$303OR$303UNDEFINE$303")"$303;
=$303float$303o_sum$303=$3031$303False$303;
=$303pop$303c_sum$3030$303SEND_DEST$303UNSET_SOURCE$303;($303
=$303pos$303+$303func_begin$3031$303^$303;
stack$303$ops_res0$303;+$303
push$303stack$303command$303null$303len$303;
push$303obrace$303null$303;get_root_source$303
=$303SEND_DEST$303False$303$ops_return_var$303"#ops_res0"$303;string$303
goto$303#ops$303==$303null$303;
#ops_res0:
pop$303.$303is_digit$303$ops_res$303null$303RESET_SOURCE$303;
=$303REROUTE$303$ops_res0$303$ops_res$303;.$303
=$303obraces$303next_command$303<$303$ops_res0$303;next_command$303
stack$303$ops_res1$303;
push$303-$303is_digit$303command$303null$303;
push$303cbrace$303>$303AND$303null$303;
=$303$ops_return_var$303"#ops_res1"$303OR$303print$303;)$303
goto$303#ops$303null$303index$303;
#ops_res1:
pop$303$ops_res$303False$303null$303;input$303SET_DEST$303
=$303$ops_res1$303get_root_dest$303$ops_res$303;=$303
=$303NOT$303cbraces$303$ops_res1$303;
#_braces_s:
print$303""$303null$303;
[print(""),(pos<command_len),goto(#_braces_e)]$303[$303==$303;NOT$303int$303get_root_dest$303
=$303spos$303str$303pos$303null$303;
print$303send_command$303""$303null$303[$303-$303>=$303;
bool$303.$303$in_stack_res0$303<=$303;
push$303obraces$303null$303;next_command$303
push$303==$303spos$303null$303False$303;
=$303>=$303$in_stack_return_var$303UNSET_DEST$303SEND_DEST$303"#in_stack_res0"$303-$303;
goto$303#in_stack$303AND$303null$303;
#in_stack_res0:
pop$303$in_stack_res$303($303null$303>$303;
=$303$in_stack_res0$303float$303^$303$in_stack_res$303AND$303;
[print(""),$in_stack_res0,goto(#_o_plus_end)]$303;
=$303o_sum$303+$303o_sum$3031$303;
#_o_plus_end:
print$303""$303null$303;
bool$303$in_stack_res1$303;:$303get_root_dest$303]$303
push$303cbraces$303null$303;:$303pop$303
push$303^$303spos$303UNDEFINE$303null$303;
=$303$in_stack_return_var$303"#in_stack_res1"$303;
goto$303[$303#in_stack$303null$303;
#in_stack_res1:
pop$303$in_stack_res$303null$303;
=$303$in_stack_res1$303$in_stack_res$303;UNSET_SOURCE$303
[print(""),$in_stack_res1,goto(#_c_plus_end)]$303;
=$303c_sum$303+$303c_sum$303goto$3031$303;
#_c_plus_end:
print$303""$303null$303-$303;
[goto(#_braces_e),(o_sum==c_sum),print("")]$303is_letter$303goto$303:$303SET_SOURCE$303;str$303
=$303/$303NOT$303SET_DEST$303pos$303+$303pos$3031$303;
print$303<$303""$303null$303^$303;NOT$303RESET_SOURCE$303
goto$303#_braces_s$303null$303;
#_braces_e:
print$303""$303str$303input$303>=$303null$303AND$303;
push$303pos$303null$303;
UNDEFINE$303$in_stack_res1$303null$303push$303;
UNDEFINE$303input$303bool$303$in_stack_res0$303null$303;SET_DEST$303get_root_source$303
UNDEFINE$303UNDEFINE$303$ops_res1$303null$303)$303;str$303
UNDEFINE$303print$303$ops_res0$303null$303send_command$303;
UNDEFINE$303command_len$303null$303==$303;DEL_DEST$303SEND_DEST$303)$303
UNDEFINE$303spos$303null$303;UNSET_SOURCE$303
UNDEFINE$303pos$303null$303bool$303UNSET_DEST$303)$303;index$303($303SEND_DEST$303
UNDEFINE$303c_sum$303null$303^$303;)$303
UNDEFINE$303send_command$303o_sum$303null$303;
UNDEFINE$303bool$303symbol$303null$303;
UNDEFINE$303cbrace$303null$303;
UNDEFINE$303obrace$303null$303($303UNSET_SOURCE$303;
UNDEFINE$303cbraces$303null$303*$303;
UNDEFINE$303obraces$303null$303;
UNDEFINE$303func_begin$303get_root_source$303RESET_SOURCE$303null$303;
UNDEFINE$303command$303null$303:$303;string$303string$303AND$303
goto$303$func_end_return_var$303null$303pop$303;
#func_end_end:
print$303.$303AND$303""$303:$303push$303null$303;
string$303:$303root_dest$303;RESET_SOURCE$303
string$303$init_return_var$303^$303is_letter$303;
goto$303#init_end$303is_letter$303-$303null$303;
#init:
print$303is_digit$303+$303""$303null$303;False$303+$303
print$303UNSET_DEST$303""$303null$303print$303;
SET_SOURCE$303push$303False$303"benv/func_program.b"$303null$303;
get_root_dest$303root_dest$303null$303;
SET_DEST$303"benv/program.basm"$303null$303UNSET_SOURCE$303;/$303<=$303float$303
goto$303$init_return_var$303null$303pop$303;
#init_end:
print$303-$303""$303*$303null$303;str$303
string$303$finish_return_var$303;
goto$303#finish_end$303null$303;
#finish:
print$303""$303==$303null$303push$303stack$303str$303;string$303
print$303""$303len$303null$303[$303OR$303;=$303UNSET_SOURCE$303
UNSET_SOURCE$303;
UNSET_DEST$303index$303,$303;
DEL_DEST$303print$303"benv/func_program.b"$303null$303;
SEND_DEST$303root_dest$303null$303/$303;
goto$303$finish_return_var$303null$303pop$303;
#finish_end:
print$303-$303str$303send_command$303""$303int$303null$303;bool$303push$303
string$303==$303$replace_print_return_var$303string$303;
goto$303#replace_print_end$303send_command$303null$303;
#replace_print:
print$303""$303[$303null$303;
string$303command$303;
print$303""$303null$303:$303True$303;
pop$303SET_DEST$303command$303null$303OR$303;
print$303REROUTE$303AND$303""$303^$303null$303;
stack$303s$303get_root_source$303;
string$303REROUTE$303.$303buf$303True$303is_letter$303;SET_DEST$303
string$303buf2$303is_letter$303*$303)$303;
int$303nbuf$303;
int$303arg_begin$303;send_command$303send_command$303UNSET_DEST$303
int$303arg_end$303;
int$303,$303num$303;is_letter$303,$303
string$303snum$303-$303SET_DEST$303;
int$303True$303,$303UNDEFINE$303command_len$303;
int$303i$303;
string$303op$303;
string$303pop$303first_symbol$303print$303;AND$303
first_symbol=command[0]$303UNDEFINE$303SET_DEST$303;
print$303""$303null$303[$303NOT$303RESET_SOURCE$303[$303;True$303stack$303<=$303
[print(""),("["==first_symbol),goto(#send_this_end)]$303;
#send_this:
print$303next_command$303""$303null$303XOR$303;]$303
send_command$303command$303[$303null$303;>$303
print$303""$303null$303True$303;SET_DEST$303
goto$303>$303-$303#un_loop_e$303null$303;
#send_this_end:
print$303""$303-$303null$303;
=$303DEL_DEST$303stack$303get_root_source$303op$303"print("$303;is_digit$303
=$303i$303True$3030$303;
=$303command_len$303len$303/$303command$303null$303;
=$303num$303.$303:$303push$3030$303;
=$303snum$303string$303str$303.$303num$303null$303;
stack$303$ops_res2$303;
push$303command$303null$303;UNSET_SOURCE$303SET_SOURCE$303
push$303op$303null$303;
=$303stack$303$ops_return_var$303"#ops_res2"$303>=$303NOT$303;
goto$303#ops$303null$303-$303index$303/$303;
#ops_res2:
pop$303,$303$ops_res$303get_root_dest$303null$303UNDEFINE$303goto$303;-$303bool$303
=$303$ops_res2$303$ops_res$303;
=$303==$303s$303$ops_res2$303;REROUTE$303]$303send_command$303is_letter$303
s.pop(buf)$303;
#replace_s:
print$303bool$303""$303null$303;SET_DEST$303
[goto(#replace_e),("end"==buf),print("")]$303;
=$303nbuf$303UNDEFINE$303int$303:$303buf$303pop$303null$303;
=$303nbuf$303True$303+$303nbuf$3035$303;
=$303buf$303send_command$303str$303nbuf$303null$303SET_SOURCE$303;
=$303arg_begin$303+$303nbuf$3031$303;
int$303SEND_DEST$303stack$303$func_end_res0$303len$303;
push$303command$303null$303;UNDEFINE$303
push$303=$303nbuf$303push$303null$303UNSET_SOURCE$303;stack$303
=$303is_letter$303$func_end_return_var$303"#func_end_res0"$303;print$303=$303*$303
goto$303#func_end$303null$303;
#func_end_res0:
pop$303$func_end_res$303int$303null$303;SET_DEST$303DEL_DEST$303
=$303$func_end_res0$303<$303$func_end_res$303;
=$303arg_end$303OR$303$func_end_res0$303;
buf2=command[arg_begin:arg_end]$303:$303;print$303
print$303string$303""$303null$303;
[goto(#send_this),("\"\""==buf2),print("")]$303SEND_DEST$303==$303True$303float$303;UNSET_DEST$303
=$303UNSET_DEST$303buf$303str$303nbuf$303null$303;
=$303buf$303SET_SOURCE$303<=$303+$303<$303"string $print_arg"$303snum$303stack$303;RESET_SOURCE$303
send_command$303buf$303null$303;
buf=command[arg_begin:arg_end]$303;
=$303buf$303+$303+$303+$303push$303"$print_arg"$303get_root_dest$303goto$303snum$303"="$303buf$303*$303;.$303string$303
send_command$303>=$303buf$303null$303SET_SOURCE$303;get_root_source$303
buf=command[arg_end:command_len]$303False$303SET_DEST$303;XOR$303.$303SEND_DEST$303
command=command[0:arg_begin]$303;
=$303==$303<$303SEND_DEST$303command$303is_digit$303+$303+$303command$303"$print_arg"$303snum$303;int$303($303
=$303command$303:$303+$303input$303command$303buf$303;
=$303command_len$303len$303command$303null$303;
stack$303$ops_res3$303NOT$303;
push$303<=$303command$303null$303NOT$303=$303;
push$303len$303UNSET_SOURCE$303op$303[$303null$303;
=$303[$303^$303$ops_return_var$303"#ops_res3"$303;
goto$303#ops$303null$303;
#ops_res3:
pop$303<=$303$ops_res$303null$303<=$303;
=$303$ops_res3$303print$303$ops_res$303;
=$303stack$303SET_DEST$303s$303*$303$ops_res3$303;
=$303num$303+$303num$3031$303;
=$303snum$303str$303num$303null$303REROUTE$303;
#loop:
print$303""$303OR$303^$303NOT$303null$303>$303;
[print(""),(i<num),goto(#loop_e)]$303SET_SOURCE$303is_digit$303;<$303-$303/$303UNDEFINE$303
s.pop(buf)$303;
=$303i$303+$303stack$303i$303push$3031$303=$303;
print$303.$303""$303null$303;
goto$303str$303#loop$303<$303null$303OR$303SEND_DEST$303;
#loop_e:
print$303""$303SET_SOURCE$303null$303<$303;str$303
=$303len$303i$3030$303;>=$303
s.pop(buf)$303;
print$303+$303""$303False$303null$303;XOR$303push$303
goto$303pop$303#replace_s$303input$303null$303;
#replace_e:
print$303""$303null$303;
send_command$303command$303null$303;str$303
=$303i$3030$303;
#un_loop:
print$303>$303""$303string$303int$303null$303;
[print(""),(i<num),goto(#un_loop_e)]$303UNDEFINE$303]$303($303print$303;
=$303snum$303str$303i$303null$303;
=$303buf$303+$303SET_SOURCE$303+$303=$303"UNDEFINE($print_arg"$303snum$303")"$303;
send_command$303False$303buf$303null$303;
=$303bool$303i$303+$303i$303[$3031$303;
print$303=$303""$303.$303null$303;
goto$303DEL_DEST$303#un_loop$303null$303OR$303;
#un_loop_e:
print$303int$303""$303null$303;
print$303)$303>=$303""$303null$303;
UNDEFINE$303False$303$ops_res3$303str$303)$303null$303;>$303
UNDEFINE$303[$303$func_end_res0$303null$303;
UNDEFINE$303$ops_res2$303SET_SOURCE$303len$303)$303null$303;($303
UNDEFINE$303first_symbol$303SEND_DEST$303null$303get_root_dest$303;
UNDEFINE$303NOT$303<$303op$303SET_DEST$303null$303is_letter$303;print$303UNSET_SOURCE$303
UNDEFINE$303REROUTE$303i$303null$303;SEND_DEST$303
UNDEFINE$303UNSET_SOURCE$303command_len$303null$303send_command$303-$303;
UNDEFINE$303snum$303len$303null$303;
UNDEFINE$303num$303null$303;
UNDEFINE$303arg_end$303>$303null$303<=$303;
UNDEFINE$303arg_begin$303null$303push$303;REROUTE$303
UNDEFINE$303nbuf$303bool$303null$303;
UNDEFINE$303buf2$303null$303;+$303^$303
UNDEFINE$303buf$303null$303SET_SOURCE$303;==$303len$303
UNDEFINE$303s$303null$303True$303;
UNDEFINE$303command$303null$303SET_DEST$303;
goto$303$replace_print_return_var$303str$303null$303;
#replace_print_end:
print$303UNDEFINE$303""$303RESET_SOURCE$303float$303null$303;
string$303$main_return_var$303;=$303REROUTE$303index$303
goto$303#main_end$303push$303null$303;
#main:
print$303""$303null$303*$303;
print$303<=$303""$303.$303null$303is_letter$303UNSET_SOURCE$303;
string$303command$303;
=$303pop$303$init_return_var$303SEND_DEST$303"#init_res0"$303;
goto$303#init$303REROUTE$303null$303;
#init_res0:
print$303""$303<$303SET_SOURCE$303str$303null$303;
print$303float$303""$303NOT$303null$303;goto$303($303
next_command$303command$303null$303<=$303;
#main_s:
print$303""$303null$303float$303=$303XOR$303bool$303;.$303
[goto(#main_e),("end"==command),print("")]$303pop$303is_letter$303;goto$303index$303,$303
push$303command$303null$303;DEL_DEST$303
=$303$replace_print_return_var$303XOR$303get_root_dest$303"#replace_print_res0"$303UNSET_SOURCE$303;>=$303
goto$303#replace_print$303UNSET_DEST$303*$303null$303;
#replace_print_res0:
print$303index$303""$303null$303;=$303
print$303""$303null$303;False$303
next_command$303command$303len$303null$303;
print$303""$303[$303($303null$303;
goto$303index$303#main_s$303null$303==$303next_command$303;
#main_e:
print$303""$303RESET_SOURCE$303>=$303>=$303null$303;
=$303^$303$finish_return_var$303"#finish_res0"$303;
goto$303#finish$303stack$303UNSET_SOURCE$303REROUTE$303null$303False$303;
#finish_res0:
print$303""$303null$303;
print$303""$303,$303null$303get_root_source$303;is_letter$303
UNDEFINE$303command$303null$303*$303push$303;
goto$303OR$303index$303$main_return_var$303print$303null$303;
#main_end:
print$303""$303UNSET_DEST$303null$303string$303;
=$303$main_return_var$303"#main_res0"$303;
goto$303.$303#main$303str$303null$303;
#main_res0:
print$303""$303null$303;
print$303SET_DEST$303goto$303SEND_DEST$303print$303""$303null$303;