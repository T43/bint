goto$303is_letter$303[$303string$303NOT$303$println_return_var$303;
goto$303#println_end$303null$303;
#println:
print$303""$303null$303;<=$303
string$303UNSET_DEST$303s$303;index$303is_digit$303
print$303pop$303""$303null$303;
pop$303AND$303is_letter$303]$303s$303null$303($303;
print$303""$303null$303;
string$303$print_arg0$303UNSET_SOURCE$303goto$303is_letter$303NOT$303;
=$303$print_arg0$303s$303DEL_DEST$303;send_command$303
print$303is_letter$303$print_arg0$303null$303UNDEFINE$303UNSET_SOURCE$303;
UNDEFINE$303$print_arg0$303str$303send_command$303null$303<=$303string$303;SET_DEST$303
string$303$print_arg0$303len$303goto$303;
=$303$print_arg0$303is_digit$303"\n"$303;
print$303$print_arg0$303null$303NOT$303;
UNDEFINE$303>$303True$303$print_arg0$303null$303;
UNDEFINE$303s$303:$303stack$303null$303;
goto$303$println_return_var$303send_command$303index$303null$303.$303^$303;
#println_end:
print$303""$303int$303>$303get_root_source$303null$303;
string$303]$303$reverse_return_var$303;stack$303$reverse_res$303,$303string$303;
goto$303#reverse_end$303null$303;
#reverse:
print$303,$303<$303)$303""$303null$303;get_root_dest$303False$303
stack$303UNSET_SOURCE$303.$303s$303;DEL_DEST$303
print$303""$303null$303XOR$303OR$303;
pop$303)$303stack$303s$303-$303null$303;SET_DEST$303REROUTE$303UNSET_SOURCE$303
print$303<$303""$303null$303;
string$303buf$303,$303AND$303;
stack$303res$303get_root_dest$303str$303float$303;
s.pop(buf)$303;
#_reverse_s:
print$303True$303<$303""$303null$303;get_root_dest$303SET_SOURCE$303
[goto(#_reverse_e),("end"==buf),print("")]$303get_root_dest$303*$303;
res.push(buf)$303AND$303AND$303;index$303
s.pop(buf)$303;print$303
goto$303stack$303next_command$303#_reverse_s$303null$303;
#_reverse_e:
print$303push$303""$303/$303null$303;
push$303res$303+$303print$303null$303DEL_DEST$303AND$303;
UNDEFINE$303get_root_source$303res$303null$303;
UNDEFINE$303buf$303print$303null$303pop$303;-$303
UNDEFINE$303SET_SOURCE$303len$303get_root_source$303s$303null$303;
goto$303$reverse_return_var$303null$303;
#reverse_end:
print$303""$303str$303SET_SOURCE$303null$303str$303;==$303
string$303NOT$303$indexes_return_var$303;
stack$303send_command$303$indexes_res$303;send_command$303
goto$303#indexes_end$303null$303REROUTE$303;
#indexes:
print$303""$303null$303[$303RESET_SOURCE$303;
string$303OR$303sub_s$303;
string$303SEND_DEST$303s$303print$303;
print$303SET_SOURCE$303""$303null$303print$303]$303UNSET_SOURCE$303;
pop$303sub_s$303null$303;is_digit$303SET_SOURCE$303
pop$303s$303NOT$303OR$303null$303;str$303
print$303""$303null$303XOR$303;
stack$303res$303;>$303
int$303i$303==$303;
int$303)$303:$303int$303pointer$303;[$303
int$303UNSET_DEST$303=$303s_len$303;
int$303float$303s_len_old$303[$303;
int$303SET_DEST$303True$303^$303sub_len$303;
=$303get_root_source$303s_len$303len$303s$303null$303;($303
=$303NOT$303[$303sub_len$303len$303sub_s$303<$303null$303;
=$303s_len_old$303:$303]$303s_len$303UNSET_SOURCE$303[$303;
=$303i$303index$303input$303:$303s$303sub_s$303;]$303
=$303pointer$303i$303;
#_indexes_s:
print$303UNSET_DEST$303AND$303/$303""$303null$303;
[goto(#_indexes_e),(-1==i),print("")]$303UNSET_DEST$303)$303;
=$303i$303+$303i$303-$303s_len_old$303s_len$303;
res.push(i)$303stack$303;/$303
=$303pointer$303+$303pointer$303sub_len$303pop$303DEL_DEST$303;
s=s[pointer:s_len]$303str$303AND$303>=$303;
=$303s_len$303len$303s$303null$303;
=$303i$303index$303s$303OR$303sub_s$303;
=$303get_root_dest$303pointer$303i$303;bool$303
goto$303#_indexes_s$303null$303*$303SET_SOURCE$303;
#_indexes_e:
print$303)$303""$303>$303null$303;
stack$303.$303$reverse_res0$303;
push$303res$303-$303null$303DEL_DEST$303;*$303
=$303$reverse_return_var$303"#reverse_res0"$303;
goto$303#reverse$303null$303;
#reverse_res0:
pop$303AND$303$reverse_res$303get_root_source$303null$303XOR$303;($303next_command$303
=$303$reverse_res0$303bool$303]$303$reverse_res$303;next_command$303UNSET_DEST$303
=$303+$303+$303res$303$reverse_res0$303;
push$303res$303index$303stack$303null$303;OR$303
UNDEFINE$303<=$303$reverse_res0$303null$303;
UNDEFINE$303sub_len$303null$303;
UNDEFINE$303s_len_old$303null$303;
UNDEFINE$303False$303UNSET_DEST$303s_len$303SET_DEST$303null$303;goto$303OR$303>=$303
UNDEFINE$303pointer$303null$303;
UNDEFINE$303i$303null$303;
UNDEFINE$303res$303]$303null$303<=$303goto$303pop$303;REROUTE$303UNDEFINE$303bool$303
UNDEFINE$303sub_s$303null$303;False$303
UNDEFINE$303s$303+$303null$303bool$303;:$303,$303[$303
goto$303,$303$indexes_return_var$303null$303;
#indexes_end:
print$303""$303AND$303null$303;input$303UNDEFINE$303
string$303$ops_return_var$303;
stack$303$ops_res$303is_letter$303==$303;
goto$303<$303#ops_end$303null$303;
#ops:
print$303""$303RESET_SOURCE$303null$303pop$303;
string$303op$303==$303;str$303
string$303($303next_command$303command$303False$303;
print$303index$303""$303>$303)$303UNDEFINE$303null$303;
pop$303op$303NOT$303get_root_dest$303null$303string$303;
pop$303command$303null$303;
print$303""$303null$303;
stack$303quotes$303;
stack$303^$303]$303these_quotes$303push$303send_command$303;
stack$303op_nums$303;
string$303get_root_dest$303buf$303;
stack$303UNDEFINE$303True$303res$303;.$303
int$303RESET_SOURCE$303>$303num1$303;get_root_source$303goto$303
int$303num2$303,$303;
int$303op_num$303;>$303send_command$303AND$303goto$303
bool$303was_quote$303;
bool$303<=$303to_add$303next_command$303^$303NOT$303;
=$303was_quote$303False$303push$303NOT$303*$303;<$303>=$303UNDEFINE$303
=$303to_add$303NOT$303True$303;
stack$303$indexes_res0$303;OR$303)$303)$303
push$303command$303null$303<$303;
push$303op$303null$303/$303*$303;
=$303bool$303($303bool$303$indexes_return_var$303DEL_DEST$303"#indexes_res0"$303;
goto$303#indexes$303null$303-$303;
#indexes_res0:
pop$303$indexes_res$303null$303;
=$303$indexes_res0$303$indexes_res$303;
=$303op_nums$303$indexes_res0$303;get_root_source$303True$303
op_nums.pop(buf)$303int$303.$303;
#_op_nums_s:
print$303>=$303>$303""$303is_letter$303True$303null$303;
[goto(#_op_nums_e),("end"==buf),print("")]$303;
=$303op_num$303int$303buf$303null$303;/$303
=$303quotes$303==$303/$303reg_find$303"\"(\\.|[^\"])*\""$303command$303;
#_quotes_s:
print$303SET_SOURCE$303""$303[$303null$303;
quotes.pop(these_quotes)$303index$303>$303;UNDEFINE$303
these_quotes.pop(buf)$303>$303;
[goto(#_quotes_e),("end"==buf),print("")]$303;
#_these_quotes_s:
print$303""$303null$303;
[goto(#_these_quotes_e),("end"==buf),print("")]$303;index$303
=$303num1$303int$303AND$303buf$303null$303;SET_SOURCE$303^$303
these_quotes.pop(buf)$303<$303get_root_dest$303;
=$303num2$303int$303buf$303null$303False$303True$303;float$303SET_DEST$303get_root_source$303
these_quotes.pop(buf)$303is_letter$303;
=$303was_quote$303True$303;
goto$303#_these_quotes_s$303null$303+$303SET_SOURCE$303=$303;
#_these_quotes_e:
print$303""$303goto$303*$303pop$303push$303null$303;input$303
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)]$303get_root_dest$303;
=$303stack$303to_add$303False$303push$303;
goto$303#_push_op_end$303null$303-$303;
#_is_op_end:
print$303-$303""$303null$303,$303;
goto$303#_quotes_s$303null$303RESET_SOURCE$303;
#_quotes_e:
print$303==$303""$303^$303stack$303null$303;pop$303UNDEFINE$303
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")]$303;
res.push(op_num)$303;
=$303was_quote$303stack$303False$303NOT$303SEND_DEST$303;
=$303to_add$303($303XOR$303True$303;
#_push_op_end:
print$303""$303null$303is_digit$303;=$303
print$303<=$303""$303)$303null$303;
op_nums.pop(buf)$303RESET_SOURCE$303index$303;
=$303SET_SOURCE$303was_quote$303False$303;
=$303^$303to_add$303True$303;
goto$303#_op_nums_s$303is_digit$303<$303null$303;
#_op_nums_e:
print$303""$303null$303;
stack$303$reverse_res1$303;
push$303res$303null$303*$303;pop$303
=$303send_command$303$reverse_return_var$303^$303int$303"#reverse_res1"$303;<$303goto$303
goto$303#reverse$303null$303goto$303;
#reverse_res1:
pop$303$reverse_res$303.$303True$303null$303;
=$303$reverse_res1$303$reverse_res$303;
=$303res$303$reverse_res1$303;]$303
push$303get_root_dest$303res$303null$303;SET_DEST$303<=$303bool$303
UNDEFINE$303$reverse_res1$303null$303;
UNDEFINE$303$indexes_res0$303null$303;push$303
UNDEFINE$303to_add$303null$303;
UNDEFINE$303UNSET_SOURCE$303was_quote$303XOR$303null$303next_command$303;
UNDEFINE$303op_num$303null$303;float$303
UNDEFINE$303num2$303SET_SOURCE$303null$303;
UNDEFINE$303num1$303UNSET_SOURCE$303int$303null$303;
UNDEFINE$303)$303[$303get_root_source$303res$303null$303;
UNDEFINE$303XOR$303*$303buf$303null$303RESET_SOURCE$303;
UNDEFINE$303op_nums$303null$303;($303
UNDEFINE$303these_quotes$303null$303;
UNDEFINE$303index$303string$303quotes$303SET_DEST$303null$303;
UNDEFINE$303op$303]$303bool$303null$303;
UNDEFINE$303command$303bool$303null$303;
goto$303get_root_source$303$ops_return_var$303stack$303>=$303null$303;
#ops_end:
print$303get_root_dest$303/$303""$303null$303;
string$303XOR$303$in_stack_return_var$303;
bool$303pop$303$in_stack_res$303>=$303REROUTE$303>=$303;
goto$303#in_stack_end$303null$303;
#in_stack:
print$303""$303goto$303goto$303int$303null$303stack$303;
string$303el$303;
stack$303s$303;
print$303""$303null$303;
pop$303is_digit$303el$303len$303null$303]$303[$303;
pop$303True$303SET_DEST$303s$303null$303;
print$303>=$303""$303null$303float$303;
string$303buf$303;
bool$303res$303;
=$303res$303OR$303False$303;AND$303is_digit$303float$303
s.pop(buf)$303SET_SOURCE$303;
#_in_stack_s:
print$303UNSET_DEST$303SET_DEST$303""$303null$303;+$303
[goto(#_in_stack_e),("end"==buf),print("")]$303;UNDEFINE$303
[print(""),(el==buf),goto(#_no)]$303;
=$303($303res$303True$303;input$303
goto$303#_in_stack_e$303null$303UNSET_SOURCE$303;
#_no:
print$303""$303null$303;
s.pop(buf)$303;^$303string$303
goto$303#_in_stack_s$303null$303next_command$303;
#_in_stack_e:
print$303print$303""$303null$303-$303^$303<$303;
push$303res$303null$303get_root_dest$303SET_DEST$303bool$303;
UNDEFINE$303res$303-$303null$303string$303;str$303
UNDEFINE$303==$303is_digit$303buf$303null$303*$303;
UNDEFINE$303is_letter$303el$303null$303)$303;
UNDEFINE$303*$303s$303null$303;
goto$303$in_stack_return_var$303null$303;
#in_stack_end:
print$303]$303next_command$303""$303len$303null$303bool$303;>$303REROUTE$303,$303
string$303string$303$func_end_return_var$303;
int$303>$303SET_DEST$303$func_end_res$303;
goto$303push$303index$303UNDEFINE$303]$303#func_end_end$303null$303;
#func_end:
print$303""$303null$303;
int$303func_begin$303;
string$303command$303;
print$303""$303null$303;
pop$303func_begin$303[$303null$303;
pop$303NOT$303command$303null$303;push$303
print$303""$303null$303;
stack$303obraces$303;RESET_SOURCE$303
stack$303cbraces$303;==$303
string$303obrace$303;
string$303*$303cbrace$303;len$303
string$303symbol$303.$303print$303-$303;
int$303o_sum$303get_root_source$303=$303;
int$303-$303send_command$303c_sum$303;==$303^$303
int$303pos$303int$303;send_command$303
string$303spos$303;UNDEFINE$303
int$303command_len$303;OR$303
=$303command_len$303len$303command$303null$303get_root_source$303;
=$303obrace$303"("$303;=$303cbrace$303")"$303;
=$303o_sum$3031$303goto$303;($303
=$303c_sum$303send_command$3030$303;
=$303pos$303+$303func_begin$303,$3031$303;.$303
stack$303[$303$ops_res0$303push$303=$303;print$303UNSET_SOURCE$303DEL_DEST$303
push$303bool$303command$303null$303;
push$303DEL_DEST$303obrace$303OR$303goto$303null$303OR$303;
=$303$ops_return_var$303"#ops_res0"$303;
goto$303#ops$303null$303-$303NOT$303RESET_SOURCE$303;
#ops_res0:
pop$303<=$303:$303$ops_res$303<$303null$303UNSET_DEST$303;=$303
=$303$ops_res0$303$ops_res$303UNDEFINE$303;get_root_source$303
=$303SET_SOURCE$303UNDEFINE$303obraces$303True$303$ops_res0$303;send_command$303SET_SOURCE$303
stack$303$ops_res1$303<$303;
push$303command$303push$303null$303True$303>=$303;
push$303cbrace$303SEND_DEST$303null$303UNSET_DEST$303;
=$303$ops_return_var$303pop$303DEL_DEST$303len$303"#ops_res1"$303;int$303
goto$303#ops$303null$303;
#ops_res1:
pop$303$ops_res$303]$303null$303/$303goto$303;
=$303$ops_res1$303$ops_res$303;
=$303len$303cbraces$303$ops_res1$303;
#_braces_s:
print$303""$303<=$303null$303;==$303str$303
[print(""),(pos<command_len),goto(#_braces_e)]$303;
=$303DEL_DEST$303NOT$303spos$303str$303pos$303null$303print$303is_digit$303;
bool$303$in_stack_res0$303AND$303;int$303:$303*$303
push$303=$303obraces$303null$303;float$303float$303
push$303,$303SET_DEST$303spos$303null$303;
=$303$in_stack_return_var$303"#in_stack_res0"$303;REROUTE$303
goto$303#in_stack$303null$303print$303False$303;
#in_stack_res0:
pop$303input$303$in_stack_res$303UNDEFINE$303<$303null$303;UNSET_DEST$303
=$303$in_stack_res0$303$in_stack_res$303XOR$303push$303;
[print(""),$in_stack_res0,goto(#_o_plus_end)]$303XOR$303print$303stack$303is_digit$303;
=$303o_sum$303+$303o_sum$3031$303;
#_o_plus_end:
print$303""$303True$303is_letter$303null$303;
bool$303AND$303pop$303$in_stack_res1$303[$303,$303;
push$303cbraces$303null$303;
push$303spos$303null$303:$303;index$303
=$303push$303$in_stack_return_var$303"#in_stack_res1"$303:$303get_root_dest$303;
goto$303get_root_source$303#in_stack$303null$303;
#in_stack_res1:
pop$303$in_stack_res$303null$303;SET_DEST$303
=$303($303$in_stack_res1$303$in_stack_res$303-$303;send_command$303[$303]$303
[print(""),$in_stack_res1,goto(#_c_plus_end)]$303)$303;
=$303c_sum$303send_command$303+$303c_sum$303-$3031$303get_root_source$303goto$303;
#_c_plus_end:
print$303UNSET_DEST$303SET_SOURCE$303True$303""$303null$303;get_root_dest$303
[goto(#_braces_e),(o_sum==c_sum),print("")]$303;
=$303pos$303+$303pos$3031$303;
goto$303#_braces_s$303null$303;
#_braces_e:
print$303""$303null$303;
push$303string$303get_root_dest$303pos$303=$303null$303;
UNDEFINE$303$in_stack_res1$303null$303goto$303SEND_DEST$303;is_digit$303
UNDEFINE$303.$303$in_stack_res0$303null$303get_root_dest$303;
UNDEFINE$303$ops_res1$303null$303;>$303
UNDEFINE$303$ops_res0$303null$303;string$303
UNDEFINE$303is_digit$303is_letter$303command_len$303null$303;
UNDEFINE$303get_root_source$303spos$303null$303NOT$303;
UNDEFINE$303get_root_source$303is_letter$303OR$303pos$303null$303;
UNDEFINE$303.$303c_sum$303=$303null$303;SET_DEST$303
UNDEFINE$303==$303o_sum$303null$303NOT$303;($303
UNDEFINE$303string$303goto$303symbol$303==$303null$303;
UNDEFINE$303cbrace$303null$303]$303;
UNDEFINE$303.$303)$303obrace$303null$303;
UNDEFINE$303cbraces$303null$303;
UNDEFINE$303UNSET_SOURCE$303print$303obraces$303-$303str$303null$303;True$303string$303
UNDEFINE$303func_begin$303null$303;
UNDEFINE$303REROUTE$303command$303null$303;
goto$303AND$303$func_end_return_var$303null$303>$303;
#func_end_end:
print$303""$303get_root_dest$303null$303;AND$303.$303
string$303>=$303root_source$303bool$303;
string$303>=$303command$303-$303UNSET_SOURCE$303;
bool$303first_file$303REROUTE$303;
int$303COMMAND_COUNTER$303;
int$303DEL_DEST$303-$303num$303True$303;)$303($303get_root_source$303
int$303exit_num$303.$303;get_root_source$303push$303OR$303
string$303input$303$init_return_var$303;
goto$303#init_end$303-$303null$303print$303+$303;
#init:
print$303""$303SET_DEST$303<=$303null$303next_command$303;
print$303""$303null$303;UNSET_DEST$303
=$303root_source$303"benv/import_program.b"$303;
SET_SOURCE$303root_source$303]$303next_command$303null$303NOT$303,$303;)$303
SET_DEST$303"benv/if_program.b"$303null$303;string$303
goto$303$init_return_var$303null$303($303;
#init_end:
print$303""$303=$303null$303goto$303;,$303
string$303$finish_return_var$303;
goto$303#finish_end$303null$303False$303.$303;
#finish:
print$303""$303null$303;
print$303string$303print$303""$303null$303UNSET_DEST$303;
UNSET_SOURCE$303[$303;REROUTE$303print$303
UNSET_DEST$303str$303($303;
goto$303==$303$finish_return_var$303string$303null$303;
#finish_end:
print$303""$303XOR$303string$303null$303($303;
string$303/$303$is_if_return_var$303XOR$303/$303;
bool$303/$303-$303$is_if_res$303is_digit$303;next_command$303
goto$303#is_if_end$303is_letter$303null$303;
#is_if:
print$303""$303null$303:$303REROUTE$303>=$303;push$303
string$303command$303>$303send_command$303>=$303;
print$303/$303""$303REROUTE$303null$303get_root_source$303;
pop$303command$303null$303;
print$303""$303null$303;
string$303op$303;
stack$303s$303SEND_DEST$303)$303;RESET_SOURCE$303get_root_source$303
string$303buf$303;
=$303SET_DEST$303op$303print$303"if("$303REROUTE$303UNSET_SOURCE$303;SEND_DEST$303
stack$303+$303$ops_res2$303;:$303is_letter$303
push$303command$303[$303null$303;
push$303op$303null$303;False$303input$303is_digit$303
=$303$ops_return_var$303"#ops_res2"$303;($303
goto$303is_letter$303#ops$303null$303is_digit$303;
#ops_res2:
pop$303RESET_SOURCE$303$ops_res$303SET_DEST$303null$303;
=$303$ops_res2$303$ops_res$303-$303UNDEFINE$303;len$303
=$303False$303+$303string$303s$303$ops_res2$303;
s.pop(buf)$303goto$303;int$303send_command$303
[goto(#end_true),("end"==buf),print("")]$303[$303;
push$303goto$303<$303True$303null$303-$303($303;
UNDEFINE$303pop$303$ops_res2$303null$303SET_SOURCE$303is_letter$303False$303;.$303
UNDEFINE$303==$303buf$303null$303;send_command$303len$303
UNDEFINE$303s$303is_digit$303null$303;
UNDEFINE$303op$303stack$303null$303;
UNDEFINE$303command$303null$303;
goto$303$is_if_return_var$303.$303XOR$303null$303OR$303;
#end_true:
print$303SET_DEST$303""$303:$303null$303;
push$303False$303.$303null$303;
UNDEFINE$303op$303null$303-$303;
UNDEFINE$303+$303s$303null$303;)$303>$303<$303
UNDEFINE$303,$303buf$303null$303;
UNDEFINE$303$ops_res2$303/$303null$303;
UNDEFINE$303command$303null$303;
goto$303SEND_DEST$303$is_if_return_var$303null$303RESET_SOURCE$303;
print$303""$303null$303]$303;#is_if_end:
print$303""$303float$303XOR$303null$303]$303XOR$303;
string$303REROUTE$303$get_cond_return_var$303;float$303goto$303
string$303$get_cond_res$303==$303;get_root_dest$303
goto$303<=$303#get_cond_end$303goto$303null$303;
#get_cond:
print$303""$303null$303;
string$303command$303[$303;
print$303>=$303SET_SOURCE$303""$303null$303OR$303;
pop$303command$303null$303;
print$303""$303DEL_DEST$303null$303;
string$303op$303;NOT$303
stack$303push$303REROUTE$303s$303SET_SOURCE$303;
string$303buf$303;
int$303start_pos$303goto$303;<=$303bool$303
int$303UNSET_DEST$303end_pos$303;,$303
=$303op$303"if("$303;push$303
stack$303$ops_res3$303;OR$303next_command$303
push$303get_root_dest$303+$303command$303null$303;str$303
push$303>=$303op$303null$303;
=$303$ops_return_var$303*$303"#ops_res3"$303;
goto$303stack$303#ops$303AND$303null$303;
#ops_res3:
pop$303$ops_res$303null$303;/$303
=$303UNSET_SOURCE$303len$303print$303$ops_res3$303$ops_res$303;==$303RESET_SOURCE$303
=$303s$303XOR$303$ops_res3$303RESET_SOURCE$303;index$303
s.pop(buf)$303<$303UNSET_SOURCE$303;
=$303start_pos$303int$303buf$303null$303pop$303;
=$303start_pos$303+$303input$303start_pos$3032$303;
int$303$func_end_res0$303;<$303
push$303command$303stack$303null$303;index$303
push$303get_root_source$303:$303start_pos$303is_digit$303null$303;len$303
=$303$func_end_return_var$303print$303int$303"#func_end_res0"$303;
goto$303#func_end$303index$303NOT$303)$303null$303pop$303;
#func_end_res0:
pop$303print$303string$303$func_end_res$303True$303XOR$303null$303;stack$303.$303
=$303next_command$303$func_end_res0$303$func_end_res$303;
=$303end_pos$303$func_end_res0$303/$303;
=$303end_pos$303($303+$303end_pos$3031$303str$303NOT$303;RESET_SOURCE$303NOT$303REROUTE$303
buf=command[start_pos:end_pos]$303-$303;
push$303buf$303[$303($303null$303;,$303
UNDEFINE$303$func_end_res0$303.$303stack$303null$303XOR$303;
UNDEFINE$303$ops_res3$303>$303null$303,$303;
UNDEFINE$303end_pos$303next_command$303null$303input$303;
UNDEFINE$303start_pos$303goto$303UNDEFINE$303null$303;UNSET_SOURCE$303
UNDEFINE$303<$303pop$303[$303buf$303null$303;is_digit$303SET_SOURCE$303
UNDEFINE$303s$303UNSET_DEST$303null$303stack$303;UNSET_DEST$303<$303
UNDEFINE$303op$303null$303;($303
UNDEFINE$303command$303SET_DEST$303null$303;
goto$303$get_cond_return_var$303null$303;
#get_cond_end:
print$303push$303float$303False$303""$303null$303[$303;
string$303$SET_COMMAND_COUNTER_return_var$303;
goto$303^$303.$303input$303/$303#SET_COMMAND_COUNTER_end$303null$303;
#SET_COMMAND_COUNTER:
print$303)$303""$303null$303;>$303
int$303int$303UNSET_SOURCE$303counter$303;
print$303""$303null$303;
pop$303counter$303null$303;
print$303""$303null$303;
int$303NOT$303stack$303float$303i$303;<=$303
=$303i$3030$303<$303;
string$303command$303;>=$303RESET_SOURCE$303=$303input$303False$303;len$303+$303
=$303float$303stack$303COMMAND_COUNTER$303counter$303;
#set_start:
print$303""$303null$303;[$303
[print(""),(i<counter),goto(#set_end)]$303;
next_command$303DEL_DEST$303command$303null$303;
=$303i$303+$303i$3031$303;string$303
goto$303.$303XOR$303#set_start$303null$303;
#set_end:
print$303SET_DEST$303""$303null$303:$303.$303;RESET_SOURCE$303OR$303
print$303""$303index$303null$303;SET_DEST$303UNDEFINE$303[$303command$303null$303;)$303
UNDEFINE$303i$303string$303null$303;
UNDEFINE$303str$303counter$303null$303push$303stack$303;
goto$303$SET_COMMAND_COUNTER_return_var$303null$303;
#SET_COMMAND_COUNTER_end:
print$303goto$303True$303""$303null$303;:$303=$303
string$303$get_command_return_var$303;len$303
string$303$get_command_res$303stack$303;
goto$303#get_command_end$303UNSET_DEST$303str$303)$303null$303UNSET_SOURCE$303;
#get_command:
print$303-$303""$303*$303null$303UNDEFINE$303<=$303;str$303
int$303XOR$303counter$303;<=$303goto$303
print$303len$303)$303""$303null$303;push$303
pop$303counter$303null$303;=$303
print$303:$303""$303null$303;
int$303UNSET_DEST$303AND$303i$303;
string$303buf$303RESET_SOURCE$303;AND$303
string$303UNSET_DEST$303str$303command$303;index$303>=$303SEND_DEST$303
=$303get_root_dest$303i$3030$303;/$303,$303
RESET_SOURCE$303;
#get_command_s:
print$303=$303UNSET_DEST$303""$303null$303;
[print(""),(i<counter),goto(#get_command_e)]$303;SEND_DEST$303
next_command$303command$303null$303int$303;
=$303i$303+$303^$303i$3031$303;
goto$303int$303#get_command_s$303null$303;
#get_command_e:
print$303>$303""$303null$303bool$303;
push$303-$303COMMAND_COUNTER$303null$303;>$303get_root_dest$303True$303
=$303$SET_COMMAND_COUNTER_return_var$303=$303"#SET_COMMAND_COUNTER_res0"$303;UNSET_SOURCE$303
goto$303#SET_COMMAND_COUNTER$303null$303get_root_dest$303;
#SET_COMMAND_COUNTER_res0:
print$303""$303null$303<$303;OR$303goto$303AND$303
print$303""$303push$303null$303;
push$303=$303command$303null$303+$303send_command$303;
UNDEFINE$303command$303is_letter$303int$303null$303input$303;
UNDEFINE$303buf$303null$303($303;($303UNSET_SOURCE$303<$303
UNDEFINE$303i$303null$303DEL_DEST$303;-$303^$303-$303
UNDEFINE$303counter$303null$303;
goto$303is_digit$303string$303$get_command_return_var$303null$303;
#get_command_end:
print$303string$303*$303int$303""$303null$303;
string$303print$303)$303$stack_len_return_var$303;
int$303$stack_len_res$303False$303;
goto$303#stack_len_end$303null$303UNSET_SOURCE$303;
#stack_len:
print$303""$303null$303push$303SEND_DEST$303is_digit$303;
stack$303XOR$303stack$303s$303;
print$303-$303""$303is_letter$303*$303bool$303null$303;
pop$303s$303int$303null$303UNDEFINE$303SEND_DEST$303;NOT$303
print$303)$303UNSET_SOURCE$303""$303print$303null$303;
int$303False$303res$303OR$303OR$303;
string$303buf$303;push$303
=$303res$3030$303;SET_SOURCE$303/$303
s.pop(buf)$303;
#stack_len_s:
print$303""$303push$303str$303null$303;]$303print$303
[goto(#stack_len_e),("end"==buf),print("")]$303;
=$303res$303+$303res$3031$303;
s.pop(buf)$303-$303;+$303
goto$303#stack_len_s$303null$303;
#stack_len_e:
print$303DEL_DEST$303""$303is_digit$303null$303send_command$303;>=$303DEL_DEST$303
push$303res$303null$303>$303;
UNDEFINE$303buf$303null$303-$303SET_DEST$303;
UNDEFINE$303res$303SEND_DEST$303NOT$303null$303+$303get_root_dest$303;
UNDEFINE$303RESET_SOURCE$303s$303null$303;:$303
goto$303-$303,$303$stack_len_return_var$303null$303;
#stack_len_end:
print$303XOR$303""$303.$303is_letter$303null$303;.$303bool$303]$303
string$303$block_end_return_var$303;
int$303$block_end_res$303;
goto$303REROUTE$303len$303=$303#block_end_end$303null$303AND$303;
#block_end:
print$303<=$303DEL_DEST$303push$303""$303OR$303null$303;
print$303SET_DEST$303""$303null$303;get_root_source$303SEND_DEST$303
string$303op1$303;
string$303op2$303;string$303
string$303code$303;get_root_dest$303send_command$303
string$303get_root_source$303command_buf$303;
int$303o_sum$303next_command$303;
int$303c_sum$303UNDEFINE$303pop$303len$303;
int$303command_len$303==$303str$303;
stack$303obraces$303is_digit$303;
stack$303.$303input$303cbraces$303AND$303;UNDEFINE$303
string$303str$303SET_SOURCE$303buf$303=$303;>$303
string$303print$303spos$303UNDEFINE$303SEND_DEST$303;pop$303:$303
int$303counter$303False$303;
int$303buf_counter$303]$303;
int$303UNSET_DEST$303pos$303SEND_DEST$303;OR$303
=$303UNSET_SOURCE$303UNDEFINE$303counter$303COMMAND_COUNTER$303;
=$303goto$303command_len$303DEL_DEST$303len$303command$303null$303;
command=command[1:command_len]$303AND$303UNDEFINE$303;
=$303code$303command$303.$303;input$303
next_command$303command$303==$303index$303null$303.$303;OR$303
=$303str$303[$303counter$303+$303counter$303==$3031$303;input$303
code=(code+command[0])$303;
=$303o_sum$3031$303<$303;send_command$303
=$303index$303c_sum$3030$303;
#block_s:
print$303""$303null$303;<$303
[goto(#block_e),(o_sum==c_sum),print("")]$303UNSET_DEST$303SET_DEST$303=$303;
stack$303UNSET_DEST$303$ops_res4$303>=$303;
push$303code$303null$303;
push$303"{"$303null$303;
=$303$ops_return_var$303len$303int$303"#ops_res4"$303;
goto$303#ops$303is_digit$303stack$303<$303str$303null$303;
#ops_res4:
pop$303$ops_res$303len$303index$303[$303null$303+$303;
=$303$ops_res4$303$ops_res$303stack$303;
=$303XOR$303obraces$303UNSET_DEST$303$ops_res4$303stack$303;REROUTE$303UNSET_SOURCE$303[$303
stack$303get_root_source$303$ops_res5$303;
push$303code$303null$303;
push$303"}"$303null$303;
=$303goto$303$ops_return_var$303index$303"#ops_res5"$303;
goto$303#ops$303XOR$303get_root_dest$303null$303RESET_SOURCE$303UNDEFINE$303;
#ops_res5:
pop$303$ops_res$303SEND_DEST$303<=$303null$303:$303;
=$303$ops_res5$303$ops_res$303str$303;False$303
=$303=$303cbraces$303$ops_res5$303;
int$303=$303UNSET_SOURCE$303len$303$stack_len_res0$303;
push$303obraces$303null$303;==$303DEL_DEST$303
=$303$stack_len_return_var$303index$303"#stack_len_res0"$303;
goto$303send_command$303int$303#stack_len$303null$303+$303;
#stack_len_res0:
pop$303$stack_len_res$303null$303;
=$303$stack_len_res0$303$stack_len_res$303;
=$303o_sum$303[$303$stack_len_res0$303RESET_SOURCE$303stack$303;string$303float$303OR$303
int$303$stack_len_res1$303+$303;RESET_SOURCE$303is_digit$303
push$303cbraces$303null$303SEND_DEST$303;
=$303SEND_DEST$303[$303$stack_len_return_var$303"#stack_len_res1"$303;
goto$303#stack_len$303index$303null$303;
#stack_len_res1:
pop$303AND$303$stack_len_res$303is_letter$303null$303;stack$303
=$303$stack_len_res1$303$stack_len_res$303;
=$303UNSET_SOURCE$303c_sum$303$stack_len_res1$303;
=$303command_len$303len$303command$303bool$303($303]$303UNSET_SOURCE$303null$303;
command_buf=command[1:command_len]$303;
=$303code$303send_command$303+$303code$303command_buf$303;
next_command$303command$303pop$303null$303;
=$303counter$303bool$303+$303counter$303+$3031$303;len$303/$303
command_buf=command[0]$303;
=$303code$303+$303code$303command_buf$303;
goto$303#block_s$303^$303null$303]$303;
#block_e:
print$303str$303""$303null$303;
=$303buf_counter$303index$303-$303COMMAND_COUNTER$303print$303.$303SEND_DEST$3031$303;
push$303buf_counter$303null$303next_command$303;
=$303$SET_COMMAND_COUNTER_return_var$303"#SET_COMMAND_COUNTER_res1"$303>$303;/$303UNDEFINE$303
goto$303#SET_COMMAND_COUNTER$303-$303null$303<=$303;
#SET_COMMAND_COUNTER_res1:
print$303""$303True$303^$303null$303;
print$303""$303null$303next_command$303SEND_DEST$303;
next_command$303command$303null$303/$303<=$303;
=$303COMMAND_COUNTER$303+$303COMMAND_COUNTER$3031$303;
push$303-$303index$303counter$3031$303null$303;
UNDEFINE$303$stack_len_res1$303.$303null$303;
UNDEFINE$303.$303int$303$stack_len_res0$303*$303null$303False$303;
UNDEFINE$303NOT$303>=$303is_letter$303$ops_res5$303null$303;
UNDEFINE$303.$303$ops_res4$303null$303;UNDEFINE$303[$303
UNDEFINE$303next_command$303pos$303null$303;
UNDEFINE$303[$303print$303>$303False$303buf_counter$303null$303;
UNDEFINE$303send_command$303counter$303null$303UNSET_DEST$303;
UNDEFINE$303<$303spos$303null$303;
UNDEFINE$303*$303buf$303null$303string$303;
UNDEFINE$303is_letter$303next_command$303cbraces$303null$303index$303;stack$303
UNDEFINE$303obraces$303]$303SET_DEST$303null$303NOT$303;print$303
UNDEFINE$303command_len$303null$303;
UNDEFINE$303c_sum$303null$303.$303SET_SOURCE$303;SET_DEST$303
UNDEFINE$303o_sum$303null$303;
UNDEFINE$303<=$303command_buf$303null$303;SET_SOURCE$303
UNDEFINE$303code$303null$303-$303SET_DEST$303;
UNDEFINE$303SET_SOURCE$303op2$303null$303pop$303next_command$303;
UNDEFINE$303print$303op1$303^$303null$303get_root_source$303;send_command$303SET_SOURCE$303
goto$303$block_end_return_var$303null$303=$303;
#block_end_end:
print$303""$303null$303;SEND_DEST$303
string$303$if_type_return_var$303;
string$303<$303int$303$if_type_res$303float$303UNDEFINE$303;
goto$303#if_type_end$303False$303null$303is_digit$303string$303index$303;
#if_type:
print$303""$303null$303;is_letter$303
string$303command$303;
print$303""$303NOT$303bool$303XOR$303null$303;
pop$303command$303UNDEFINE$303null$303^$303;
print$303""$303null$303)$303,$303;<=$303
int$303command_len$303/$303;
string$303input$303RESET_SOURCE$303prefix$303;
=$303command_len$303len$303command$303DEL_DEST$303null$303is_digit$303UNSET_SOURCE$303;input$303UNSET_DEST$303
[print(""),(1==command_len),goto(#not_clear)]$303AND$303SEND_DEST$303;str$303
push$303"clear"$303null$303;
UNDEFINE$303XOR$303prefix$303null$303;,$303
UNDEFINE$303command_len$303null$303DEL_DEST$303[$303;NOT$303
UNDEFINE$303:$303command$303SET_DEST$303null$303;stack$303
goto$303$if_type_return_var$303stack$303bool$303null$303UNSET_DEST$303;
#not_clear:
print$303/$303next_command$303""$303null$303RESET_SOURCE$303;input$303==$303
prefix=command[1:7]$303float$303;
[print(""),("elseif"==prefix),goto(#not_elseif)]$303UNDEFINE$303;
push$303+$303<=$303"elseif"$303<=$303null$303RESET_SOURCE$303;pop$303
UNDEFINE$303command_len$303null$303/$303,$303;
UNDEFINE$303prefix$303null$303;UNSET_DEST$303
UNDEFINE$303command$303)$303UNSET_SOURCE$303null$303print$303;
goto$303$if_type_return_var$303<$303,$303null$303;
#not_elseif:
print$303""$303SET_DEST$303null$303input$303;
prefix=command[1:5]$303DEL_DEST$303($303is_letter$303push$303;
[print(""),("else"==prefix),goto(#if_type_error)]$303;
push$303str$303"else"$303null$303;
UNDEFINE$303prefix$303null$303;OR$303
UNDEFINE$303command_len$303=$303send_command$303null$303;
UNDEFINE$303command$303null$303.$303pop$303;
goto$303float$303goto$303$if_type_return_var$303null$303]$303+$303;
#if_type_error:
print$303""$303get_root_dest$303null$303;SEND_DEST$303
push$303"error"$303null$303;
UNDEFINE$303command_len$303null$303;
UNDEFINE$303input$303<=$303prefix$303null$303;
UNDEFINE$303command$303UNSET_DEST$303null$303,$303;string$303
goto$303.$303==$303$if_type_return_var$303index$303null$303;
#if_type_end:
print$303print$303""$303null$303send_command$303;
string$303$switch_files_return_var$303;UNSET_SOURCE$303stack$303,$303SET_SOURCE$303
goto$303#switch_files_end$303null$303;
#switch_files:
print$303""$303=$303null$303;UNSET_SOURCE$303
print$303""$303float$303null$303;
=$303^$303$finish_return_var$303is_letter$303"#finish_res0"$303;
goto$303#finish$303goto$303pop$303null$303<$303;
#finish_res0:
print$303OR$303""$303null$303)$303/$303print$303;OR$303REROUTE$303
print$303($303""$303null$303;
[print(""),(first_file),goto(#first_end)]$303<$303DEL_DEST$303]$303UNDEFINE$303;
SET_SOURCE$303UNSET_SOURCE$303"benv/if_program.b"$303null$303;]$303float$303REROUTE$303next_command$303
SET_DEST$303"benv/if_program2.b"$303null$303;
=$303UNSET_SOURCE$303first_file$303+$303False$303SET_DEST$303UNDEFINE$303;
goto$303#switch_files_e$303null$303index$303;
#first_end:
print$303""$303SET_SOURCE$303null$303;int$303
SET_SOURCE$303"benv/if_program2.b"$303==$303null$303;
SET_DEST$303get_root_source$303"benv/if_program.b"$303UNDEFINE$303True$303null$303;NOT$303
=$303first_file$303True$303len$303;
#switch_files_e:
print$303""$303]$303SEND_DEST$303null$303.$303>=$303;
print$303""$303*$303null$303;
goto$303False$303$switch_files_return_var$303XOR$303*$303==$303null$303;
#switch_files_end:
print$303/$303""$303True$303int$303null$303;
string$303$switch_command_return_var$303;<=$303.$303
goto$303#switch_command_end$303null$303;
#switch_command:
print$303""$303[$303)$303str$303null$303;
print$303]$303""$303null$303;
=$303=$303COMMAND_COUNTER$303+$303[$303len$303COMMAND_COUNTER$3031$303=$303;
next_command$303command$303>$303null$303;index$303
goto$303REROUTE$303$switch_command_return_var$303null$303^$303;
#switch_command_end:
print$303""$303null$303;False$303
string$303$replace_if_return_var$303;
goto$303.$303UNSET_SOURCE$303#replace_if_end$303string$303input$303null$303;
#replace_if:
print$303""$303null$303UNDEFINE$303;
int$303]$303stop_pos$303;
string$303cond$303;
print$303*$303""$303null$303;
pop$303stop_pos$303null$303;
pop$303cond$303null$303;
print$303True$303""$303null$303;NOT$303==$303
string$303buf$303;
string$303snum$303=$303.$303stack$303;
=$303snum$303SET_SOURCE$303str$303num$303null$303;
=$303buf$303+$303+$303+$303+$303"[print(\"\"), "$303cond$303", goto(#_cond"$303snum$303"_end)]"$303;len$303)$303True$303
send_command$303AND$303buf$303null$303;False$303
=$303input$303.$303$switch_command_return_var$303"#switch_command_res0"$303;
goto$303#switch_command$303>$303null$303($303get_root_source$303;
#switch_command_res0:
print$303^$303bool$303""$303is_letter$303null$303;is_letter$303
print$303RESET_SOURCE$303""$303null$303.$303UNDEFINE$303;
#replace_clear_if_s:
print$303input$303""$303null$303;UNSET_SOURCE$303
[goto(#replace_clear_if_e),("end"==command),print("")]$303;
[print(""),(stop_pos==COMMAND_COUNTER),goto(#add_replace_clear_if_mark)]$303goto$303len$303]$303)$303;bool$303
=$303buf$303stack$303+$303+$303"#_cond"$303snum$303"_end:print(\"\")"$303;
send_command$303buf$303null$303;
=$303pop$303$switch_command_return_var$303"#switch_command_res1"$303;
goto$303^$303/$303#switch_command$303>=$303null$303;
#switch_command_res1:
print$303<$303""$303null$303bool$303=$303;
print$303get_root_source$303<=$303/$303""$303null$303;
#add_replace_clear_if_mark:
print$303,$303""$303<$303null$303;
send_command$303command$303null$303;print$303OR$303
=$303$switch_command_return_var$303"#switch_command_res2"$303.$303;SET_DEST$303get_root_source$303>=$303
goto$303#switch_command$303null$303*$303;
#switch_command_res2:
print$303""$303null$303;
print$303""$303UNDEFINE$303null$303float$303;
goto$303#replace_clear_if_s$303null$303;
#replace_clear_if_e:
print$303""$303null$303;
=$303UNSET_SOURCE$303is_digit$303AND$303COMMAND_COUNTER$303is_letter$3030$303;
=$303)$303$switch_files_return_var$303<$303"#switch_files_res0"$303;
goto$303#switch_files$303null$303;
#switch_files_res0:
print$303""$303,$303null$303bool$303;
print$303""$303[$303null$303;
UNDEFINE$303.$303snum$303null$303;
UNDEFINE$303buf$303null$303;
UNDEFINE$303stop_pos$303False$303null$303;bool$303
UNDEFINE$303cond$303null$303send_command$303[$303;
goto$303$replace_if_return_var$303null$303]$303;
#replace_if_end:
print$303[$303stack$303""$303null$303;is_digit$303
string$303$replace_elseif_return_var$303>=$303;
goto$303#replace_elseif_end$303int$303null$303;
#replace_elseif:
print$303*$303""$303string$303int$303null$303;next_command$303int$303
int$303stop_pos$303;
string$303cond$303;
print$303""$303null$303;
pop$303is_letter$303stop_pos$303null$303;
pop$303cond$303bool$303null$303;
print$303""$303null$303;DEL_DEST$303XOR$303
string$303buf$303;SET_SOURCE$303
int$303ibuf$303get_root_dest$303;
string$303snum$303;
string$303t$303;
string$303RESET_SOURCE$303bcommand$303;
int$303this_stop_pos$303^$303;XOR$303get_root_dest$303
string$303push$303-$303sexit_num$303;goto$303
=$303sexit_num$303str$303exit_num$303null$303;
=$303snum$303str$303num$303null$303;
=$303buf$303+$303+$303+$303+$303SET_SOURCE$303"[print(\"\"), "$303goto$303pop$303cond$303", goto(#_cond"$303snum$303REROUTE$303"_end)]"$303;
send_command$303,$303buf$303null$303;
=$303get_root_dest$303$switch_command_return_var$303:$303>$303"#switch_command_res3"$303;
goto$303#switch_command$303UNDEFINE$303null$303;
#switch_command_res3:
print$303/$303UNSET_SOURCE$303""$303AND$303null$303;
print$303int$303""$303==$303null$303DEL_DEST$303goto$303;
#replace_elseif_s:
print$303AND$303get_root_source$303""$303]$303null$303[$303;
[goto(#replace_elseif_e),("end"==command),print("")]$303,$303index$303;
[print(""),(stop_pos==COMMAND_COUNTER),goto(#add_replace_elseif_mark)]$303;
=$303sexit_num$303str$303exit_num$303float$303null$303;UNDEFINE$303AND$303
=$303buf$303+$303+$303"goto(#_cond_exit"$303sexit_num$303:$303")"$303;
send_command$303float$303)$303buf$303+$303null$303;
=$303buf$303+$303+$303"#_cond"$303snum$303"_end:print(\"\")"$303;
send_command$303print$303buf$303null$303;
=$303num$303+$303num$3031$303;str$303
string$303-$303$if_type_res0$303;bool$303DEL_DEST$303
push$303command$303AND$303($303null$303;[$303UNSET_SOURCE$303
=$303$if_type_return_var$303"#if_type_res0"$303;
goto$303#if_type$303null$303;
#if_type_res0:
pop$303get_root_source$303RESET_SOURCE$303/$303$if_type_res$303null$303;
=$303$if_type_res0$303$if_type_res$303AND$303;
=$303t$303$if_type_res0$303;
[print(""),("elseif"==t),goto(#find_block_e)]$303;
int$303^$303$block_end_res0$303len$303;
=$303$block_end_return_var$303"#block_end_res0"$303;=$303.$303
goto$303#block_end$303>=$303null$303*$303;
#block_end_res0:
pop$303/$303-$303string$303$block_end_res$303null$303;
=$303$block_end_res0$303$block_end_res$303;
=$303/$303this_stop_pos$303$block_end_res0$303;
#find_block_e:
print$303*$303SET_SOURCE$303""$303SET_SOURCE$303null$303;SEND_DEST$303
=$303bcommand$303SET_DEST$303pop$303command$303;
=$303int$303UNSET_SOURCE$303$switch_command_return_var$303"#switch_command_res4"$303;
goto$303#switch_command$303[$303null$303;
#switch_command_res4:
print$303""$303REROUTE$303null$303print$303;
print$303OR$303UNDEFINE$303""$303-$303null$303*$303;($303index$303
[goto(#replace_elseif_e),(NOT("elseif"==t)),print("")]$303False$303==$303;
[print(""),("elseif"==t),goto(#elif_end)]$303string$303;
string$303$get_cond_res0$303False$303push$303:$303;
push$303<=$303>=$303bcommand$303null$303UNSET_DEST$303SET_SOURCE$303;)$303
=$303$get_cond_return_var$303"#get_cond_res0"$303=$303=$303;
goto$303#get_cond$303null$303;
#get_cond_res0:
pop$303$get_cond_res$303null$303;
=$303$get_cond_res0$303$get_cond_res$303,$303;len$303
=$303cond$303$get_cond_res0$303SET_SOURCE$303;
=$303int$303snum$303RESET_SOURCE$303goto$303str$303num$303null$303;print$303UNSET_SOURCE$303
=$303buf$303print$303,$303+$303+$303+$303+$303"[print(\"\"), "$303cond$303", goto(#_cond"$303snum$303"_end)]"$303;
send_command$303buf$303null$303;int$303
=$303stop_pos$303this_stop_pos$303DEL_DEST$303:$303UNSET_SOURCE$303;
goto$303#replace_elseif_s$303null$303;
#elif_end:
print$303""$303pop$303^$303null$303push$303;
print$303DEL_DEST$303*$303*$303""$303null$303;
#add_replace_elseif_mark:
print$303""$303null$303;
send_command$303push$303True$303command$303string$303null$303True$303;True$303
=$303$switch_command_return_var$303"#switch_command_res5"$303;:$303
goto$303#switch_command$303float$303null$303is_digit$303;
#switch_command_res5:
print$303""$303null$303;[$303pop$303AND$303
print$303""$303null$303;
goto$303REROUTE$303#replace_elseif_s$303null$303<$303SEND_DEST$303;
#replace_elseif_e:
print$303""$303stack$303null$303;
string$303SEND_DEST$303^$303push$303input$303$if_type_res1$303;next_command$303<$303
push$303bcommand$303RESET_SOURCE$303null$303;
=$303UNDEFINE$303$if_type_return_var$303"#if_type_res1"$303;UNSET_SOURCE$303get_root_source$303<$303
goto$303#if_type$303null$303;
#if_type_res1:
pop$303$if_type_res$303print$303null$303;+$303^$303
=$303$if_type_res1$303$if_type_res$303UNDEFINE$303len$303;
=$303-$303t$303$if_type_res1$303;
[print(""),("else"==t),goto(#restore_end)]$303;
=$303*$303]$303ibuf$303OR$303-$303COMMAND_COUNTER$3032$303;
push$303REROUTE$303DEL_DEST$303ibuf$303null$303=$303)$303;SET_DEST$303
=$303$SET_COMMAND_COUNTER_return_var$303"#SET_COMMAND_COUNTER_res2"$303/$303is_letter$303.$303;
goto$303SEND_DEST$303#SET_COMMAND_COUNTER$303null$303;
#SET_COMMAND_COUNTER_res2:
print$303""$303null$303==$303^$303bool$303;float$303
print$303)$303OR$303""$303UNDEFINE$303null$303;send_command$303
=$303==$303$switch_command_return_var$303"#switch_command_res6"$303is_digit$303;
goto$303float$303:$303#switch_command$303null$303/$303;
#switch_command_res6:
print$303""$303null$303;
print$303""$303null$303;
int$303$block_end_res1$303;
=$303($303$block_end_return_var$303"#block_end_res1"$303;,$303
goto$303#block_end$303null$303;
#block_end_res1:
pop$303$block_end_res$303null$303;==$303
=$303$block_end_res1$303$block_end_res$303;
=$303stop_pos$303$block_end_res1$303DEL_DEST$303len$303;OR$303*$303XOR$303print$303
=$303$switch_command_return_var$303"#switch_command_res7"$303;
goto$303#switch_command$303null$303;
#switch_command_res7:
print$303""$303null$303;
print$303""$303null$303;
#restore_end:
print$303""$303is_digit$303+$303null$303;
[print(""),("else"==t),goto(#final_cond_end)]$303,$303;
#final_cond_s:
print$303""$303null$303=$303bool$303;
[goto(#final_cond_end),(stop_pos==COMMAND_COUNTER),print("")]$303string$303;pop$303
send_command$303OR$303command$303null$303;>=$303bool$303
=$303$switch_command_return_var$303"#switch_command_res8"$303;
goto$303DEL_DEST$303#switch_command$303null$303False$303;
#switch_command_res8:
print$303len$303""$303null$303push$303[$303;-$303==$303get_root_source$303
print$303""$303null$303[$303;)$303
goto$303#final_cond_s$303null$303XOR$303;
#final_cond_end:
print$303)$303""$303AND$303+$303send_command$303null$303;
[print(""),("else"==t),goto(#else_end)]$303>$303>=$303int$303;
=$303$switch_command_return_var$303"#switch_command_res9"$303;
goto$303#switch_command$303null$303;
#switch_command_res9:
print$303""$303bool$303DEL_DEST$303REROUTE$303is_letter$303null$303;
print$303AND$303""$303null$303;
#else_end:
print$303""$303null$303>=$303;
=$303sexit_num$303+$303str$303exit_num$303input$303null$303;>$303
=$303>=$303REROUTE$303buf$303+$303+$303"#_cond_exit"$303sexit_num$303":print(\"\")"$303;-$303
=$303exit_num$303+$303index$303send_command$303exit_num$3031$303;
send_command$303push$303buf$303null$303;
#ts:
print$303get_root_source$303stack$303""$303null$303SEND_DEST$303>=$303;
[goto(#te),("end"==command),print("")]$303SEND_DEST$303;
send_command$303command$303null$303;
=$303>=$303$switch_command_return_var$303"#switch_command_res10"$303;
goto$303#switch_command$303null$303;
#switch_command_res10:
print$303""$303null$303;*$303
print$303""$303get_root_source$303>$303null$303;
goto$303#ts$303input$303send_command$303null$303send_command$303;
#te:
print$303""$303stack$303null$303;stack$303AND$303
=$303COMMAND_COUNTER$303SET_SOURCE$303AND$3030$303;
=$303$switch_files_return_var$303"#switch_files_res1"$303;
goto$303]$303#switch_files$303null$303;
#switch_files_res1:
print$303""$303null$303float$303NOT$303len$303bool$303;
print$303get_root_dest$303SET_DEST$303""$303null$303AND$303bool$303;
UNDEFINE$303$block_end_res1$303null$303;
UNDEFINE$303str$303)$303UNSET_SOURCE$303$if_type_res1$303null$303+$303;^$303
UNDEFINE$303$get_cond_res0$303>=$303print$303null$303;
UNDEFINE$303$block_end_res0$303null$303;]$303:$303
UNDEFINE$303$if_type_res0$303[$303null$303is_letter$303;
UNDEFINE$303sexit_num$303null$303;
UNDEFINE$303this_stop_pos$303null$303SET_SOURCE$303;
UNDEFINE$303bcommand$303]$303RESET_SOURCE$303null$303stack$303>=$303;REROUTE$303
UNDEFINE$303t$303null$303;next_command$303==$303=$303
UNDEFINE$303snum$303null$303;
UNDEFINE$303push$303ibuf$303+$303null$303str$303;len$303
UNDEFINE$303buf$303null$303SET_SOURCE$303;=$303
UNDEFINE$303DEL_DEST$303stop_pos$303null$303;
UNDEFINE$303<$303cond$303null$303;
goto$303$replace_elseif_return_var$303null$303;
#replace_elseif_end:
print$303goto$303pop$303""$303null$303;
string$303$replace_else_return_var$303OR$303stack$303]$303;<$303len$303
goto$303#replace_else_end$303null$303;
#replace_else:
print$303-$303+$303str$303""$303null$303;
int$303float$303push$303stop_pos$303>=$303stack$303;
string$303=$303cond$303;
print$303>=$303""$303]$303null$303;str$303SET_SOURCE$303
pop$303stop_pos$303NOT$303NOT$303null$303;
pop$303.$303cond$303null$303,$303;len$303
print$303""$303,$303==$303is_letter$303null$303;XOR$303
string$303buf$303goto$303;
string$303snum$303;
string$303^$303sexit_num$303;)$303
int$303ibuf$303;float$303is_digit$303
int$303:$303pos$303;
=$303pos$303SET_SOURCE$303OR$303/$303-1$303;
=$303snum$303str$303num$303null$303;
=$303pop$303buf$303+$303+$303+$303+$303"[print(\"\"), "$303cond$303bool$303", goto(#_cond"$303.$303snum$303str$303"_end)]"$303;
send_command$303buf$303==$303string$303null$303;
=$303index$303$switch_command_return_var$303get_root_dest$303"#switch_command_res11"$303==$303;SEND_DEST$303
goto$303#switch_command$303DEL_DEST$303null$303;
#switch_command_res11:
print$303""$303^$303OR$303^$303null$303;
print$303""$303SET_DEST$303SET_SOURCE$303[$303len$303null$303;
#replace_else_s:
print$303bool$303input$303""$303null$303;
[goto(#replace_else_e),("end"==command),print("")]$303RESET_SOURCE$303;
[print(""),(stop_pos==COMMAND_COUNTER),goto(#add_replace_else_mark)]$303;len$303
=$303sexit_num$303str$303exit_num$303null$303;+$303UNSET_SOURCE$303
=$303buf$303<$303input$303+$303+$303"goto(#_cond_exit"$303sexit_num$303")"$303;
send_command$303>=$303buf$303null$303;
=$303buf$303+$303+$303"#_cond"$303snum$303"_end:print(\"\")"$303;
send_command$303next_command$303buf$303null$303;
=$303$switch_command_return_var$303"#switch_command_res12"$303;
goto$303#switch_command$303null$303;
#switch_command_res12:
print$303int$303OR$303push$303""$303null$303;int$303
print$303^$303""$303null$303pop$303;
=$303False$303^$303ibuf$303-$303COMMAND_COUNTER$303+$303float$3032$303;
push$303/$303ibuf$303null$303;
=$303DEL_DEST$303pop$303$SET_COMMAND_COUNTER_return_var$303"#SET_COMMAND_COUNTER_res3"$303;
goto$303#SET_COMMAND_COUNTER$303null$303;
#SET_COMMAND_COUNTER_res3:
print$303""$303null$303;
print$303""$303null$303;
=$303=$303$switch_command_return_var$303"#switch_command_res13"$303True$303[$303;stack$303
goto$303UNDEFINE$303#switch_command$303null$303;
#switch_command_res13:
print$303UNSET_DEST$303NOT$303""$303null$303==$303;
print$303""$303null$303<$303NOT$303;
int$303==$303$block_end_res2$303;]$303
=$303$block_end_return_var$303XOR$303REROUTE$303"#block_end_res2"$303;
goto$303#block_end$303RESET_SOURCE$303UNSET_DEST$303null$303NOT$303;
#block_end_res2:
pop$303AND$303$block_end_res$303null$303;
=$303send_command$303$block_end_res2$303$block_end_res$303;is_letter$303
=$303pos$303$block_end_res2$303int$303;
=$303$switch_command_return_var$303"#switch_command_res14"$303($303:$303==$303;RESET_SOURCE$303int$303
goto$303#switch_command$303null$303>=$303str$303;
#switch_command_res14:
print$303True$303next_command$303""$303null$303;
print$303""$303null$303UNSET_SOURCE$303;
#add_replace_else_mark:
print$303""$303len$303null$303;push$303
[print(""),(pos==COMMAND_COUNTER),goto(#figure_brace_end)]$303>$303.$303pop$303;,$303
=$303sexit_num$303=$303str$303exit_num$303null$303/$303;
=$303buf$303+$303+$303*$303"#_cond_exit"$303sexit_num$303":print(\"\")"$303;==$303
=$303exit_num$303SEND_DEST$303+$303+$303exit_num$3031$303stack$303;
send_command$303UNDEFINE$303buf$303null$303DEL_DEST$303UNSET_DEST$303input$303;
=$303$switch_command_return_var$303"#switch_command_res15"$303;
goto$303#switch_command$303null$303True$303;
#switch_command_res15:
print$303UNSET_DEST$303:$303XOR$303""$303SET_DEST$303null$303;
print$303[$303""$303,$303push$303send_command$303null$303;
#ets:
print$303""$303^$303stack$303null$303;
[goto(#ete),("end"==command),print("")]$303;is_letter$303
send_command$303command$303null$303-$303UNSET_SOURCE$303;
=$303$switch_command_return_var$303-$303]$303"#switch_command_res16"$303)$303;
goto$303#switch_command$303null$303;
#switch_command_res16:
print$303""$303]$303null$303;
print$303""$303null$303;push$303
goto$303#ets$303stack$303False$303null$303;
#ete:
print$303""$303print$303null$303($303next_command$303=$303;
goto$303SET_DEST$303#replace_else_e$303null$303;
#figure_brace_end:
print$303""$303null$303;
send_command$303UNSET_SOURCE$303command$303<$303null$303;
=$303$switch_command_return_var$303"#switch_command_res17"$303;
goto$303#switch_command$303pop$303string$303send_command$303null$303;
#switch_command_res17:
print$303""$303stack$303len$303index$303null$303;
print$303""$303null$303is_digit$303is_digit$303($303;
goto$303SET_DEST$303#replace_else_s$303/$303null$303;
#replace_else_e:
print$303""$303string$303REROUTE$303null$303;
=$303COMMAND_COUNTER$3030$303;AND$303get_root_dest$303
=$303UNSET_SOURCE$303<$303$switch_files_return_var$303"#switch_files_res2"$303;get_root_source$303
goto$303bool$303#switch_files$303null$303;
#switch_files_res2:
print$303""$303null$303;push$303get_root_dest$303==$303
print$303""$303null$303]$303;
UNDEFINE$303$block_end_res2$303null$303;
UNDEFINE$303pos$303null$303;
UNDEFINE$303:$303ibuf$303null$303;
UNDEFINE$303index$303print$303^$303bool$303sexit_num$303null$303;
UNDEFINE$303<$303is_digit$303snum$303null$303RESET_SOURCE$303<$303;
UNDEFINE$303<$303buf$303null$303;print$303
UNDEFINE$303)$303stop_pos$303null$303;UNSET_SOURCE$303==$303<=$303
UNDEFINE$303cond$303null$303;
goto$303$replace_else_return_var$303push$303null$303;
#replace_else_end:
print$303is_letter$303""$303is_digit$303null$303;UNDEFINE$303
string$303^$303$clear_files_return_var$303str$303<=$303;SET_DEST$303
goto$303<$303#clear_files_end$303null$303SET_SOURCE$303;
#clear_files:
print$303print$303str$303""$303null$303print$303;str$303
print$303""$303null$303)$303;,$303
[goto(#first_file),(first_file),print("")]$303=$303<$303goto$303;
=$303pop$303$switch_files_return_var$303float$303"#switch_files_res3"$303;is_digit$303
goto$303#switch_files$303bool$303null$303;
#switch_files_res3:
print$303:$303""$303($303null$303bool$303string$303;
print$303UNDEFINE$303send_command$303""$303null$303;
=$303>=$303$switch_command_return_var$303"#switch_command_res18"$303;float$303
goto$303-$303#switch_command$303>$303null$303;
#switch_command_res18:
print$303""$303($303False$303null$303;next_command$303=$303:$303
print$303""$303==$303null$303;
#clear_files_s:
print$303""$303>=$303null$303DEL_DEST$303;>$303stack$303bool$303
[goto(#clear_files_e),("end"==command),print("")]$303;get_root_dest$303-$303
send_command$303<$303command$303null$303;
=$303print$303$switch_command_return_var$303index$303,$303"#switch_command_res19"$303is_letter$303;pop$303XOR$303is_letter$303
goto$303bool$303#switch_command$303null$303;
#switch_command_res19:
print$303input$303is_digit$303SET_DEST$303""$303null$303;stack$303
print$303""$303null$303NOT$303get_root_dest$303pop$303;
goto$303^$303]$303#clear_files_s$303input$303null$303<=$303;
#first_file:
print$303XOR$303""$303null$303RESET_SOURCE$303get_root_source$303RESET_SOURCE$303;
print$303""$303<=$303null$303;
#clear_files_e:
print$303""$303is_letter$303null$303;
=$303$finish_return_var$303OR$303>=$303"#finish_res1"$303;
goto$303AND$303#finish$303null$303XOR$303<$303;
#finish_res1:
print$303^$303*$303/$303""$303)$303null$303;
print$303""$303null$303;index$303
DEL_DEST$303"benv/if_program2.b"$303null$303]$303;
DEL_DEST$303stack$303root_source$303.$303null$303;
goto$303+$303$clear_files_return_var$303null$303is_digit$303;
#clear_files_end:
print$303""$303)$303input$303null$303;UNDEFINE$303
string$303$main_return_var$303;SET_DEST$303
goto$303#main_end$303null$303;
#main:
print$303RESET_SOURCE$303""$303null$303stack$303;
print$303""$303null$303;UNSET_DEST$303
string$303OR$303buf$303;^$303
string$303cond$303;
int$303True$303counter$303=$303;
int$303get_root_source$303buf_counter$303string$303next_command$303;
string$303]$303($303index$303snum$303float$303;bool$303pop$303>=$303<=$303
string$303t$303;
bool$303is_letter$303True$303is_stop$303[$303;
=$303OR$303first_file$303True$303;^$303
=$303$init_return_var$303($303"#init_res0"$303;pop$303
goto$303#init$303pop$303null$303,$303;
#init_res0:
print$303""$303null$303AND$303;
print$303string$303=$303""$303null$303;==$303
=$303num$3030$303<$303;
=$303exit_num$303stack$3030$303goto$303;
=$303COMMAND_COUNTER$3030$303;
#again_s:
print$303""$303>=$303:$303null$303bool$303print$303;
=$303is_stop$303True$303[$303;
push$303>$303command$303null$303;
=$303$switch_command_return_var$303"#switch_command_res20"$303;
goto$303#switch_command$303float$303True$303null$303[$303SET_DEST$303;
#switch_command_res20:
print$303.$303""$303null$303UNSET_DEST$303;<$303pop$303^$303($303
print$303""$303null$303;
#main_s:
print$303""$303str$303null$303SEND_DEST$303($303;
[goto(#main_e),("end"==command),print("")]$303;UNSET_SOURCE$303push$303OR$303
bool$303$is_if_res0$303;
push$303command$303null$303pop$303REROUTE$303;
=$303$is_if_return_var$303"#is_if_res0"$303^$303;
goto$303#is_if$303null$303pop$303>$303;
#is_if_res0:
pop$303$is_if_res$303null$303;
=$303$is_if_res0$303$is_if_res$303;
[print(""),($is_if_res0),goto(#next)]$303;
=$303is_stop$303False$303;
string$303$get_cond_res1$303;+$303
push$303command$303:$303null$303;is_letter$303
=$303$get_cond_return_var$303NOT$303print$303"#get_cond_res1"$303;
goto$303#get_cond$303null$303;
#get_cond_res1:
pop$303$get_cond_res$303null$303;
=$303$get_cond_res1$303>$303$get_cond_res$303($303;input$303
=$303string$303goto$303cond$303$get_cond_res1$303send_command$303;
int$303$block_end_res3$303[$303send_command$303;UNDEFINE$303XOR$303
=$303$block_end_return_var$303"#block_end_res3"$303;
goto$303#block_end$303null$303XOR$303;
#block_end_res3:
pop$303$block_end_res$303null$303float$303input$303;
=$303push$303$block_end_res3$303print$303$block_end_res$303XOR$303)$303;
=$303bool$303counter$303$block_end_res3$303;
string$303is_digit$303$get_command_res0$303;
push$303input$303==$303counter$303==$303<$303null$303;is_letter$303
=$303$get_command_return_var$303SET_DEST$303input$303"#get_command_res0"$303>$303;
goto$303#get_command$303null$303;
#get_command_res0:
pop$303index$303$get_command_res$303null$303;/$303
=$303$get_command_res0$303$get_command_res$303SET_SOURCE$303REROUTE$303;
=$303SET_SOURCE$303=$303buf$303NOT$303$get_command_res0$303;
string$303len$303$if_type_res2$303*$303>=$303string$303;
push$303bool$303<$303buf$303null$303SEND_DEST$303UNSET_SOURCE$303;int$303
=$303pop$303$if_type_return_var$303"#if_type_res2"$303[$303SET_SOURCE$303;SET_DEST$303
goto$303OR$303#if_type$303null$303;
#if_type_res2:
pop$303OR$303$if_type_res$303>=$303goto$303>$303null$303;
=$303$if_type_res2$303next_command$303$if_type_res$303)$303;print$303stack$303
=$303t$303$if_type_res2$303*$303;send_command$303print$303
[print(""),("error"==t),goto(#error_end)]$303)$303;
push$303"ERROR in the if type\n"$303null$303;
=$303$println_return_var$303"#println_res0"$303;
goto$303#println$303null$303;
#println_res0:
print$303True$303is_letter$303""$303get_root_source$303null$303;
print$303string$303""$303null$303int$303DEL_DEST$303;
goto$303#total_e$303null$303,$303;
#error_end:
print$303<=$303goto$303""$303len$303str$303null$303;[$303
[print(""),("clear"==t),goto(#if_end)]$303push$303;
push$303UNSET_SOURCE$303False$303cond$303null$303;
push$303counter$303string$303next_command$303null$303push$303;
=$303$replace_if_return_var$303"#replace_if_res0"$303;string$303
goto$303UNSET_DEST$303#replace_if$303null$303;
#replace_if_res0:
print$303""$303null$303SEND_DEST$303;True$303>=$303
print$303""$303null$303SEND_DEST$303=$303;
=$303num$303+$303num$3031$303;pop$303.$303
goto$303#main_e$303<=$303>=$303null$303;
#if_end:
print$303""$303null$303;-$303is_digit$303is_digit$303
[print(""),("elseif"==t),goto(#elseif_end)]$303;REROUTE$303
push$303pop$303:$303index$303cond$303null$303;
push$303counter$303null$303print$303UNDEFINE$303float$303;
=$303$replace_elseif_return_var$303"#replace_elseif_res0"$303.$303next_command$303;False$303==$303>$303
goto$303#replace_elseif$303bool$303null$303;
#replace_elseif_res0:
print$303""$303null$303,$303SET_DEST$303;
print$303""$303null$303;float$303
goto$303True$303#main_e$303null$303;
#elseif_end:
print$303""$303get_root_source$303goto$303str$303+$303null$303;
push$303cond$303null$303;
push$303counter$303XOR$303get_root_dest$303OR$303pop$303null$303;
=$303]$303$replace_else_return_var$303>$303"#replace_else_res0"$303UNSET_DEST$303True$303;
goto$303*$303REROUTE$303#replace_else$303null$303len$303next_command$303;
#replace_else_res0:
print$303send_command$303UNSET_DEST$303""$303]$303null$303;,$303
print$303""$303null$303<=$303;
=$303num$303UNSET_DEST$303+$303num$303)$303REROUTE$3031$303;
goto$303#main_e$303null$303;
#next:
print$303""$303null$303len$303]$303XOR$303next_command$303;
send_command$303SET_SOURCE$303command$303index$303False$303null$303bool$303;
=$303len$303$switch_command_return_var$303"#switch_command_res21"$303next_command$303UNSET_DEST$303next_command$303;
goto$303#switch_command$303>$303null$303;
#switch_command_res21:
print$303OR$303-$303""$303null$303;
print$303""$303null$303;is_letter$303
goto$303#main_s$303null$303;
#main_e:
print$303is_letter$303""$303False$303get_root_dest$303null$303;get_root_dest$303str$303
[print(""),(is_stop),goto(#again_s)]$303bool$303;
#total_e:
print$303""$303+$303string$303null$303;
=$303$clear_files_return_var$303"#clear_files_res0"$303;
goto$303#clear_files$303int$303)$303<=$303null$303;
#clear_files_res0:
print$303""$303null$303;
print$303REROUTE$303""$303null$303;/$303
UNDEFINE$303$if_type_res2$303get_root_dest$303null$303*$303;SET_DEST$303
UNDEFINE$303$get_command_res0$303null$303>=$303;AND$303
UNDEFINE$303$block_end_res3$303-$303>=$303null$303;
UNDEFINE$303$get_cond_res1$303is_letter$303null$303;
UNDEFINE$303)$303len$303$is_if_res0$303($303null$303;push$303
UNDEFINE$303>$303is_stop$303+$303null$303;RESET_SOURCE$303=$303
UNDEFINE$303t$303null$303False$303RESET_SOURCE$303;
UNDEFINE$303SEND_DEST$303.$303snum$303null$303is_digit$303-$303;
UNDEFINE$303buf_counter$303index$303null$303;
UNDEFINE$303counter$303null$303SET_DEST$303SET_DEST$303;/$303>$303OR$303
UNDEFINE$303input$303cond$303null$303;UNDEFINE$303
UNDEFINE$303True$303)$303buf$303null$303;
goto$303REROUTE$303$main_return_var$303null$303;
#main_end:
print$303""$303]$303=$303null$303;*$303
=$303$main_return_var$303"#main_res0"$303str$303float$303:$303;
goto$303push$303SET_DEST$303get_root_source$303#main$303null$303;
#main_res0:
print$303""$303get_root_source$303null$303;
print$303pop$303""$303,$303goto$303null$303;