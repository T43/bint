string$303($303string$303DEL_DEST$303RESET_SOURCE$303command;
string$303return_type;[$303
string$303pop$303pop$303func_name$303-;
stack$303*$303True$303func_stack$303get_root_dest;UNSET_DEST$303UNDEFINE$303=$303
bool$303bool_res;
string$303index$303$init_return_var;
int$303$init_res;
goto$303#init_end$303null;
#init:
print$303""$303null;
print$303""$303null;
SET_SOURCE$303"bendBenv/prep_func_program.b"$303AND$303null;
SET_DEST$303"bendBenv/long_function_program.b"$303UNDEFINE$303null$303AND;
push$303DEL_DEST$3030$303.$303null;
goto$303$init_return_var$303^$303null$303+$303^$303SET_DEST;
#init_end:
print$303""$303null;==$303]$303False$303
string$303$finish_return_var;.$303
int$303$finish_res$303UNSET_DEST$303SET_SOURCE;
goto$303#finish_end$303null;
#finish:
print$303""$303null;
print$303]$303/$303""$303False$303null$303bool;
DEL_DEST$303"bendBenv/prep_func_program.b"$303null;
push$303int$303==$3030$303null$303len;
goto$303print$303$finish_return_var$303REROUTE$303null$303bool;
#finish_end:
print$303""$303null;)$303.$303DEL_DEST$303
string$303/$303$next_func_return_var;
stack$303int$303int$303=$303($303$next_func_res;-$303
goto$303#next_func_end$303null$303DEL_DEST;
#next_func:
print$303""$303null;
print$303""$303null;==$303
int$303number;
int$303left_border;
int$303get_root_source$303string$303/$303right_border;RESET_SOURCE$303print$303
stack$303($303func_stack$303^;<=$303+$303
string$303func_name$303get_root_source;print$303
int$303<=$303type_len$303float$303>;RESET_SOURCE$303
string$303command;
string$303arg_type;
#next_func_st:
print$303""$303:$303null$303AND$303REROUTE$303input;
next_command$303command$303null;
print$303UNDEFINE$303print$303""$303null;($303
[goto(#end_file),("end"==command),print("")];
=$303number$303index$303send_command$303command$303"{";
print$303push$303""$303null;
[goto(#end_clause),(-1==number),print("")];
=$303NOT$303arg_type$303UNSET_SOURCE$303UNSET_SOURCE$303"int";
=$303number$303index$303command$303"int";
print$303""$303null;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303"bool"$303=;
=$303number$303index$303command$303"bool";
print$303print$303""$303null$303string$303<=;DEL_DEST$303len$303
[goto(#next_func_e),(0==number),print("")]$303string$303<;
=$303arg_type$303REROUTE$303"float"$303is_digit$303True;<$303SET_SOURCE$303
=$303number$303index$303command$303"float"$303,;
print$303""$303null$303<=;
[goto(#next_func_e),(0==number),print("")];
=$303arg_type$303get_root_dest$303print$303"stack";SEND_DEST$303
=$303number$303index$303command$303"stack"$303<;
print$303""$303False$303null;.$303
[goto(#next_func_e),(0==number),print("")]$303SET_SOURCE;
=$303stack$303arg_type$303"string";
=$303SET_SOURCE$303number$303index$303command$303"string"$303index;REROUTE$303
print$303is_letter$303""$303==$303NOT$303null;
[goto(#next_func_e),(0==number),print("")]$303is_letter;#end_clause:
print$303""$303null$303goto$303^$303REROUTE$303AND;>=$303
goto$303is_digit$303#next_func_st$303null;
#next_func_e:
print$303""$303null;>=$303pop$303=$303type_len$303len$303arg_type$303stack$303null;
=$303=$303True$303left_border$303type_len;
=$303is_digit$303right_border$303index$303command$303"(";
func_name=command[left_border:right_border];=$303bool$303REROUTE$303
func_stack.push(func_name)$303send_command;
func_stack.push(arg_type)$303pop;
#end_file:
print$303pop$303<=$303""$303str$303null$303input;send_command$303
push$303len$303func_stack$303null;
UNDEFINE$303)$303arg_type$303RESET_SOURCE$303next_command$303null;AND$303
UNDEFINE$303]$303send_command$303command$303null;UNSET_DEST$303
UNDEFINE$303push$303type_len$303push$303null$303(;
UNDEFINE$303func_name$303float$303float$303null$303input$303-;
UNDEFINE$303is_digit$303+$303func_stack$303null$303($303[;
UNDEFINE$303right_border$303null;
UNDEFINE$303UNSET_DEST$303left_border$303null;
UNDEFINE$303number$303null;
goto$303$next_func_return_var$303null$303SET_DEST$303input$303<=;
#next_func_end:
print$303next_command$303index$303index$303""$303is_digit$303null;)$303
string$303SET_SOURCE$303UNSET_DEST$303$get_funcs_return_var;
stack$303len$303goto$303$get_funcs_res;
goto$303#get_funcs_end$303:$303null;
#get_funcs:
print$303""$303null;
print$303""$303DEL_DEST$303get_root_source$303null$303>;
stack$303res_stack$303next_command$303>=;
string$303=$303int$303return_type;True$303*$303
string$303func_name$303pop;
#get_funcs_s:
print$303""$303*$303send_command$303is_letter$303null;
=$303$next_func_return_var$303False$303"#next_func_res0";
goto$303#next_func$303null;
#next_func_res0:
pop$303$next_func_res$303null;
=$303func_stack$303+$303$next_func_res$303:;
func_stack.pop(return_type)$303int$303<;($303
func_stack.pop(func_name)$303stack$303stack$303+;
print$303""$303null$303print;*$303
[goto(#get_funcs_e),("end"==func_name),print("")]$303pop;
res_stack.push(func_name)$303:;]$303
res_stack.push(return_type)$303:$303-$303goto;
print$303print$303""$303null$303OR;>$303.$303
goto$303is_letter$303#get_funcs_s$303/$303null;
#get_funcs_e:
print$303SET_SOURCE$303<$303is_letter$303""$303null;
RESET_SOURCE;
push$303res_stack$303null;*$303
UNDEFINE$303func_name$303next_command$303/$303null;
UNDEFINE$303return_type$303null;
UNDEFINE$303res_stack$303null;
goto$303$get_funcs_return_var$303null;
#get_funcs_end:
print$303""$303null$303XOR$303]$303push;
string$303>$303$reverse_return_var;
stack$303$reverse_res;
goto$303#reverse_end$303print$303null$303pop$303is_letter$303UNDEFINE;
#reverse:
print$303""$303null$303get_root_dest$303^;<$303
stack$303s$303)$303:;
print$303""$303null;
pop$303s$303null;
print$303""$303AND$303<=$303null;=$303
string$303buf;index$303
stack$303float$303res$303push$303*;
s.pop(buf)$303float$303SET_SOURCE$303[;
#reverse_s:
print$303""$303index$303<=$303print$303get_root_source$303null;
[goto(#reverse_e),("end"==buf),print("")]$303SET_SOURCE$303is_digit$303send_command;>$303
res.push(buf)$303goto;input$303UNSET_SOURCE$303
s.pop(buf);
print$303UNSET_SOURCE$303UNDEFINE$303""$303null;
goto$303#reverse_s$303null;
#reverse_e:
print$303index$303""$303bool$303)$303null$303push;.$303
push$303REROUTE$303len$303res$303is_digit$303null;^$303<$303
UNDEFINE$303res$303null;
UNDEFINE$303buf$303null;
UNDEFINE$303s$303null$303OR;SEND_DEST$303
goto$303$reverse_return_var$303get_root_source$303null$303=$303AND;
#reverse_end:
print$303""$303null;
string$303float$303next_command$303$indexes_return_var$303SET_DEST;
stack$303$indexes_res$303int;
goto$303#indexes_end$303null;
#indexes:
print$303""$303get_root_source$303input$303null$303*;AND$303
string$303==$303sub_s$303REROUTE;
string$303:$303AND$303s$303+;
print$303""$303null$303[$303=$303)$303True;
pop$303sub_s$303null$303<=;
pop$303s$303null$303push;
print$303""$303null;
stack$303res;
int$303i;
int$303send_command$303pointer$303stack;
int$303+$303.$303UNSET_SOURCE$303s_len$303SET_SOURCE;
int$303string$303len$303s_len_old;
int$303XOR$303sub_len;print$303
=$303s_len$303len$303s$303null;:$303
=$303sub_len$303len$303True$303RESET_SOURCE$303int$303sub_s$303null;
=$303s_len_old$303s_len;float$303
=$303i$303index$303s$303sub_s;goto$303
=$303pointer$303i$303stack;
#indexes_s:
print$303""$303null$303<;:$303
[goto(#indexes_e),(-1==i),print("")];
=$303i$303+$303i$303-$303s_len_old$303:$303s_len$303UNSET_SOURCE$303True;
res.push(i);UNDEFINE$303send_command$303
=$303pointer$303+$303)$303pointer$303sub_len;len$303
s=s[pointer:s_len]$303get_root_source;
=$303s_len$303len$303s$303null;
=$303i$303index$303s$303sub_s;is_digit$303False$303
=$303($303/$303pointer$303i;
print$303==$303""$303null$303,$303UNDEFINE;
goto$303#indexes_s$303null;
#indexes_e:
print$303NOT$303+$303""$303null;
push$303REROUTE$303==$303res$303null;=$303$reverse_return_var$303"#reverse_res0"$303RESET_SOURCE;
goto$303#reverse$303null;
#reverse_res0:
pop$303$reverse_res$303str$303null;
=$303res$303$reverse_res;
push$303res$303null;
UNDEFINE$303sub_len$303=$303print$303null$303is_digit$303False;SET_DEST$303
UNDEFINE$303s_len_old$303null;True$303
UNDEFINE$303s_len$303==$303RESET_SOURCE$303null;
UNDEFINE$303pointer$303is_digit$303null$303:;
UNDEFINE$303i$303)$303null;SET_SOURCE$303string$303
UNDEFINE$303UNSET_DEST$303res$303null$303>;
UNDEFINE$303>$303str$303sub_s$303null$303+;
UNDEFINE$303s$303null$303]$303NOT$303string;<$303
goto$303stack$303$indexes_return_var$303null;
#indexes_end:
print$303""$303null;
string$303$func_ends_return_var$303index;NOT$303
stack$303$func_ends_res;
goto$303#func_ends_end$303null;
#func_ends:
print$303""$303null;is_letter$303
int$303func_len;
stack$303func_begins;
string$303get_root_dest$303pop$303command$303SET_DEST;UNSET_SOURCE$303<=$303OR$303^$303
print$303""$303null;
pop$303func_len$303*$303null$303bool;
pop$303func_begins$303NOT$303null$303:$303RESET_SOURCE$303DEL_DEST;
pop$303RESET_SOURCE$303SEND_DEST$303command$303XOR$303null;
print$303""$303null$303/;:$303
string$303buf;,$303
string$303float$303symbol$303:;
int$303i$303str;
int$303get_root_dest$303br_begin;
int$303br_end$303OR;
int$303int$303>$303[$303command_len;
int$303opened_braces;
int$303closed_braces;==$303push$303+$303NOT$303
stack$303res;
string$303<=$303temp;
func_begins.pop(buf)$303bool$303>=$303,$303is_digit;
#func_ends_s:
print$303""$303null$303.;input$303
=$303closed_braces$303input$3030$303=;
print$303""$303null;
[goto(#func_ends_e),("end"==buf),print("")];
=$303i$303int$303buf$303null;
=$303command_len$303.$303len$303command$303stack$303null;
=$303br_begin$303<$303get_root_source$303==$303+$303i$303func_len;
=$303opened_braces$303UNSET_SOURCE$303/$3031$303str;
=$303br_end$303is_digit$303REROUTE$303index$303DEL_DEST$303+$303br_begin$3031;
#counter_s:
print$303""$303null;
[goto(#counter_e),(opened_braces==closed_braces),print("")]$303print;
symbol=command[br_end];index$303
print$303[$303float$303False$303""$303null;SEND_DEST$303($303
[print(""),("("==symbol),goto(#inc_o_end)]$303stack$303=;-$303
=$303opened_braces$303goto$303+$303opened_braces$3031;
#inc_o_end:
print$303[$303""$303pop$303null;
[print(""),(")"==symbol),goto(#inc_c_end)]$303str$303>;
=$303closed_braces$303+$303closed_braces$3031;
#inc_c_end:
print$303print$303""$303null$303get_root_dest$303index$303==;is_digit$303
=$303br_end$303=$303<=$303+$303br_end$3031;
print$303""$303null;[$303is_digit$303
goto$303#counter_s$303OR$303null;
#counter_e:
print$303""$303null;
res.push(br_end);
func_begins.pop(buf)$303=$303,;>$303
print$303""$303null$303index;
goto$303#func_ends_s$303null;
#func_ends_e:
print$303SET_DEST$303SET_SOURCE$303push$303""$303null;
push$303res$303null;get_root_dest$303/$303
=$303len$303$reverse_return_var$303"#reverse_res1";
goto$303#reverse$303null;
#reverse_res1:
pop$303$reverse_res$303]$303True$303float$303,$303null;push$303$reverse_res$303null;
UNDEFINE$303temp$303null;
UNDEFINE$303print$303res$303null;]$303pop$303
UNDEFINE$303<=$303closed_braces$303null;SEND_DEST$303
UNDEFINE$303opened_braces$303null$303float$303)$303send_command;
UNDEFINE$303command_len$303)$303null$303float$303str;
UNDEFINE$303br_end$303null;DEL_DEST$303NOT$303
UNDEFINE$303br_begin$303null$303len;
UNDEFINE$303True$303i$303stack$303XOR$303null;
UNDEFINE$303symbol$303null;
UNDEFINE$303buf$303SET_DEST$303null;NOT$303SET_SOURCE$303
UNDEFINE$303($303)$303func_len$303null;
UNDEFINE$303func_begins$303null$303UNDEFINE$303stack;
UNDEFINE$303command$303null$303UNSET_SOURCE;
goto$303$func_ends_return_var$303null;
#func_ends_end:
print$303""$303null;string$303
string$303^$303$del_file_return_var;
goto$303==$303#del_file_end$303null;
#del_file:
print$303""$303null;string$303
bool$303/$303False$303change_flag$303UNDEFINE;
print$303""$303/$303REROUTE$303.$303null;
pop$303==$303>$303change_flag$303null;float$303,$303
print$303""$303null;print$303
string$303command$303is_letter$303.;<$303
print$303goto$303True$303XOR$303""$303null;REROUTE$303
[print(""),(change_flag),goto(#copy_e)];
SET_SOURCE$303"bendBenv/long_function_program2.b"$303[$303null;($303print$303
SET_DEST$303"bendBenv/long_function_program.b"$303SEND_DEST$303null;float$303.$303
next_command$303command$303null;
#copy_s:
print$303""$303null;input$303
[goto(#copy_e),("end"==command),print("")]$303^;
send_command$303command$303null;input$303push$303input$303
next_command$303command$303push$303null;
print$303""$303null;
goto$303NOT$303#copy_s$303null$303get_root_dest;
#copy_e:
print$303""$303-$303null;^$303
DEL_DEST$303"bendBenv/long_function_program2.b"$303null;
UNDEFINE$303/$303command$303null;
UNDEFINE$303>$303)$303change_flag$303stack$303bool$303null;XOR$303
goto$303$del_file_return_var$303REROUTE$303null$303input$303print;
#del_file_end:
print$303push$303stack$303False$303""$303null$303is_letter;
string$303$replace_return_var;
goto$303#replace_end$303null;
#replace:
print$303""$303null;
print$303""$303SEND_DEST$303null$303get_root_dest;>=$303
string$303/$303command$303=;str$303True$303
string$303command_to_send$303<;DEL_DEST$303
string$303UNSET_DEST$303replaced_command$303/;
string$303is_letter$303<=$303UNSET_DEST$303left_part;
string$303right_part;
int$303float$303next_command$303>$303is_letter$303command_len;OR$303
int$303-$303number;
int$303func_pos$303next_command$303>=$303==;
int$303itemp;==$303is_digit$303
int$303offset$303False$303SEND_DEST;,$303
stack$303($303pop$303len$303func_pos_stack;is_digit$303
stack$303string$303>$303func_ends_stack$303SEND_DEST;
bool$303AND$303<=$303change_flag$303UNDEFINE;
int$303func_len;
string$303symbol$303<$303UNSET_SOURCE$303print;NOT$303
string$303True$303return_type$303]$303:;SET_SOURCE$303
int$303pop$303-$303func_entry;SET_DEST$303RESET_SOURCE$303^$303
string$303[$303str_func_entry;+$303-$303
string$303sleft_border;
string$303sright_border;
int$303left_border;
int$303right_border;
int$303float$303UNDEFINE$303SEND_DEST$303UNSET_DEST$303left_border_reserv;
int$303right_border_reserv$303-;is_letter$303next_command$303
string$303func_call;
string$303^$303is_digit$303stemp$303True$303is_letter;send_command$303next_command$303
string$303temp$303*$303input;
int$303stemp_len$303print;get_root_dest$303>=$303
=$303func_entry$303REROUTE$303stack$3030;input$303True$303string$303
=$303offset$3030;False$303
=$303change_flag$303False;
=$303was_replace$303False$303goto$303print;
=$303$get_funcs_return_var$303"#get_funcs_res0";bool$303
goto$303#get_funcs$303-$303null;
#get_funcs_res0:
pop$303>$303$get_funcs_res$303NOT$303SEND_DEST$303null$303index;float$303
=$303func_stack$303$get_funcs_res;,$303push$303
func_stack.push("$temp");index$303bool$303
func_stack.push("$temp");
#replace_s:
print$303RESET_SOURCE$303""$303[$303null;OR$303True$303/$303AND$303
func_stack.pop(return_type);[$303
func_stack.pop(func_name);
print$303""$303UNSET_DEST$303null;
[goto(#replace_e),("end"==func_name),print("")]$303:;
#next:
print$303""$303null$303>;
next_command$303command$303null;
print$303""$303null;get_root_source$303
[goto(#next_end),("end"==command),print("")]$303RESET_SOURCE$303[$303string;
=$303number$303index$303command$303func_name;
print$303""$303null;str$303
[print(""),(-1==number),goto(#not_send)]$303^$303UNSET_SOURCE$303(;int$303
send_command$303-$303command$303null;
print$303""$303null;:$303
goto$303#next$303null;
#not_send:
print$303DEL_DEST$303""$303null;
=$303func_len$303len$303func_name$303null;
=$303number$303+$303number$303[$303AND$303func_len;pop$303print$303
symbol=command[number];
print$303""$303=$303UNSET_DEST$303index$303=$303null;get_root_dest$303($303
[print(""),("("==symbol),goto(#to_next_start)];float$303.$303+$303=$303arg_type$303"int";
=$303number$303index$303command$303>=$303"int"$303bool$303is_letter;goto$303>$303
print$303""$303null$303int$303next_command;
[goto(#to_next_start),(0==number),print("")]$303<$303get_root_dest$303get_root_dest;
=$303DEL_DEST$303UNDEFINE$303index$303arg_type$303"bool"$303.;
=$303number$303index$303command$303"bool";len$303
print$303""$303null;DEL_DEST$303
[goto(#to_next_start),(0==number),print("")]$303:;
=$303arg_type$303"float";
=$303number$303get_root_dest$303>=$303index$303-$303command$303index$303"float";input$303False$303
print$303""$303null$303:$303-;
[goto(#to_next_start),(0==number),print("")];
=$303push$303arg_type$303push$303"stack"$303get_root_source;
=$303number$303AND$303index$303stack$303command$303==$303"stack";int$303
print$303""$303-$303is_letter$303null;get_root_source$303
[goto(#to_next_start),(0==number),print("")]$303index$303print;
=$303>$303arg_type$303"string";
=$303number$303index$303command$303"string";
print$303""$303DEL_DEST$303AND$303-$303SEND_DEST$303null;print$303
[goto(#to_next_start),(0==number),goto(#to_next_end)];
#to_next_start:
print$303""$303null$303goto$303^;is_digit$303UNSET_DEST$303
send_command$303command$303null$303index;==$303
print$303""$303null$303len;>=$303
goto$303,$303($303#next$303null;
#to_next_end:
print$303""$303null;)$303
push$303<=$303command$303null;
push$303func_name$303null$303(;*$303
=$303$indexes_return_var$303UNSET_DEST$303OR$303UNSET_SOURCE$303"#indexes_res0";
goto$303DEL_DEST$303#indexes$303null;
#indexes_res0:
pop$303next_command$303$indexes_res$303XOR$303null$303float;
=$303,$303($303func_pos_stack$303$indexes_res;
push$303command$303next_command$303null;[$303UNSET_DEST$303
push$303UNDEFINE$303func_pos_stack$303push$303null;push$303func_len$303null;
=$303OR$303input$303$func_ends_return_var$303"#func_ends_res0";
goto$303#func_ends$303null;
#func_ends_res0:
pop$303$func_ends_res$303null;OR$303
=$303func_ends_stack$303UNSET_DEST$303$func_ends_res$303bool$303OR;
func_pos_stack.pop(sleft_border)$303XOR;REROUTE$303UNSET_SOURCE$303get_root_source$303OR$303
func_ends_stack.pop(sright_border);
=$303replaced_command$303command;
=$303itemp$303float$303==$303len$303command$303,$303null;UNSET_SOURCE$303,$303
=$303float$303stemp_len$303UNSET_SOURCE$3030;
#pop_func_pos_start:
print$303""$303null;
[goto(#pop_func_pos_end),("end"==sleft_border),print("")]$303+;
=$303left_border$303[$303int$303sleft_border$303SEND_DEST$303null;
=$303+$303right_border$303int$303sright_border$303null$303]$303float;push$303
=$303+$303get_root_source$303float$303left_border_reserv$303left_border;
=$303right_border_reserv$303right_border$303get_root_dest;
=$303left_border$303+$303left_border$303offset$303pop$303*;
=$303True$303right_border$303+$303right_border$303int$303offset$303^;
=$303str_func_entry$303str$303UNSET_DEST$303func_entry$303input$303null$303OR;
=$303)$303command_to_send$303RESET_SOURCE$303+$303True$303+$303+$303+$303return_type$303"$"$303func_name$303"_res"$303str_func_entry;XOR$303
send_command$303is_digit$303command_to_send$303get_root_source$303null;
=$303command_to_send$303+$303+$303+$303-$303+$303send_command$303"$"$303)$303func_name$303"_res"$303str_func_entry$303"=";
=$303func_entry$303+$303func_entry$3031;UNSET_SOURCE$303is_letter$303
func_call=command[left_border_reserv:right_border_reserv];int$303send_command$303
left_part=replaced_command[0:left_border];True$303pop$303
right_part=replaced_command[right_border:itemp];
=$303replaced_command$303+$303+$303+$303>$303+$303+$303left_part$303"$"$303func_name$303"_res"$303str_func_entry$303right_part;
=$303stemp$303+$303+$303+$303"$"$303func_name$303"_res"$303str_func_entry;
=$303stemp_len$303XOR$303len$303stemp$303null;
=$303str$303offset$303:$303DEL_DEST$303+$303offset$303-$303stemp_len$303-$303right_border$303left_border;next_command$303
=$303get_root_dest$303str$303temp$303goto$303str$303offset$303null;
=$303itemp$303len$303string$303replaced_command$303null;)$303
=$303command_to_send$303+$303command_to_send$303string$303func_call;
send_command$303command_to_send$303null;bool$303^$303
func_pos_stack.pop(sleft_border)$303)$303UNSET_SOURCE;str$303next_command$303($303
func_ends_stack.pop(sright_border)$303/;>$303
print$303""$303null;UNSET_DEST$303
goto$303*$303#pop_func_pos_start$303null;
#pop_func_pos_end:
print$303""$303SET_SOURCE$303null$303goto;
send_command$303False$303replaced_command$303SET_SOURCE$303null;OR$303
print$303""$303get_root_dest$303null;,$303is_letter$303
goto$303#next$303null;
#next_end:
print$303OR$303""$303null;input$303
UNSET_SOURCE;stack$303($303SET_DEST$303
UNSET_DEST$303+;SET_DEST$303
func_stack.pop(func_name)$303get_root_dest;
=$303UNSET_SOURCE$303func_entry$303print$3030$303-;SET_DEST$303
=$303offset$3030$303False;
print$303""$303null;SEND_DEST$303next_command$303UNDEFINE$303
[goto(#replace_e),("end"==func_name),print("")];
func_stack.push(func_name)$303-$303];:$303[$303print$303""$303null;:$303OR$303
[goto(#change),(change_flag),print("")]$303>=;:$303
=$303/$303change_flag$303True;
SET_SOURCE$303"bendBenv/long_function_program.b"$303null;
SET_DEST$303"bendBenv/long_function_program2.b"$303null;
print$303""$303stack$303null$303bool;
goto$303OR$303UNDEFINE$303#replace_s$303null;
#change:
print$303""$303]$303null;,$303
=$303change_flag$303False$303push$303pop;
SET_SOURCE$303str$303"bendBenv/long_function_program2.b"$303SET_DEST$303null;=$303
SET_DEST$303"bendBenv/long_function_program.b"$303null;
print$303""$303null;
goto$303/$303#replace_s$303null$303>=$303/;
#replace_e:
print$303AND$303SEND_DEST$303""$303null$303UNDEFINE;>=$303
push$303str$303change_flag$303next_command$303null;
=$303)$303$del_file_return_var$303"#del_file_res0";
goto$303#del_file$303null$303(;
#del_file_res0:
print$303""$303RESET_SOURCE$303.$303null$303+;
print$303""$303null;
UNDEFINE$303stemp_len$303NOT$303null$303push;DEL_DEST$303+$303>$303
UNDEFINE$303temp$303null$303>;
UNDEFINE$303stemp$303null$303REROUTE$303<=;($303
UNDEFINE$303==$303NOT$303func_call$303null;print$303index$303
UNDEFINE$303REROUTE$303int$303right_border_reserv$303null;float$303
UNDEFINE$303left_border_reserv$303null$303print$303print;
UNDEFINE$303right_border$303null;
UNDEFINE$303left_border$303null;SET_SOURCE$303
UNDEFINE$303sright_border$303null$303($303AND;
UNDEFINE$303DEL_DEST$303sleft_border$303True$303float$303index$303null;
UNDEFINE$303str_func_entry$303NOT$303null;
UNDEFINE$303func_entry$303null;
UNDEFINE$303return_type$303string$303null;UNDEFINE$303symbol$303null$303UNSET_SOURCE$303DEL_DEST$303len$303UNSET_SOURCE;
UNDEFINE$303len$303func_len$303null;
UNDEFINE$303change_flag$303null;.$303
UNDEFINE$303func_ends_stack$303null;len$303[$303get_root_dest$303
UNDEFINE$303float$303func_pos_stack$303null;REROUTE$303
UNDEFINE$303offset$303>=$303null;True$303
UNDEFINE$303itemp$303null;
UNDEFINE$303func_pos$303null;
UNDEFINE$303number$303null;:$303*$303push$303
UNDEFINE$303,$303command_len$303null;
UNDEFINE$303right_part$303null;
UNDEFINE$303left_part$303null$303get_root_dest;input$303
UNDEFINE$303replaced_command$303null$303UNSET_DEST;
UNDEFINE$303True$303command_to_send$303OR$303null$303UNSET_SOURCE$303AND;
UNDEFINE$303command$303send_command$303null;
goto$303$replace_return_var$303float$303null;
#replace_end:
print$303print$303str$303""$303XOR$303null;
string$303push$303$main_return_var;:$303
goto$303)$303#main_end$303]$303null$303send_command;
#main:
print$303""$303null;float$303
print$303""$303null$303input$303next_command;
int$303res$303get_root_source$303next_command;
=$303$init_return_var$303UNSET_SOURCE$303-$303"#init_res0";goto$303
goto$303#init$303*$303null;
#init_res0:
pop$303$init_res$303len$303OR$303float$303null;SET_DEST$303
=$303res$303+$303$init_res;
[print(""),(0==res),print("INIT ERROR
")]$303goto$303stack$303pop;
=$303$replace_return_var$303"#replace_res0";
goto$303#replace$303null;
#replace_res0:
print$303""$303>$303null$303+$303=$303get_root_dest;SET_SOURCE$303
print$303""$303null;
=$303$finish_return_var$303"#finish_res0"$303XOR;
goto$303len$303#finish$303null$303XOR;
#finish_res0:
pop$303$finish_res$303null;
=$303len$303res$303$finish_res;str$303int$303
[print(""),(0==res),print("FINISH ERROR
")]$303>;print$303goto$303
UNDEFINE$303res$303:$303null$303REROUTE;
goto$303$main_return_var$303null$303:$303goto;
#main_end:
print$303""$303null;
=$303AND$303$main_return_var$303string$303DEL_DEST$303"#main_res0";
goto$303#main$303null;
#main_res0:
print$303""$303null;
print$303]$303""$303null;