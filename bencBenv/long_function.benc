is_letter$303string$303index$303float$303command$303>$303;
string$303==$303SEND_DEST$303return_type$303;
string$303func_name$303push$303int$303NOT$303=$303;
stack$303func_stack$303;XOR$303
bool$303]$303get_root_dest$303bool_res$303>=$303;UNSET_SOURCE$303
string$303>$303is_letter$303$init_return_var$303;
int$303is_digit$303)$303$init_res$303SET_DEST$303;
goto$303#init_end$303,$303:$303null$303AND$303SEND_DEST$303;
#init:
print$303>=$303""$303index$303stack$303null$303($303;
print$303""$303False$303stack$303null$303;get_root_dest$303
SET_SOURCE$303"bendBenv/prep_func_program.b"$303next_command$303==$303is_digit$303null$303;
SET_DEST$303"bendBenv/long_function_program.b"$303null$303index$303;pop$303
push$3030$303bool$303==$303>=$303null$303;
goto$303$init_return_var$303null$303;
#init_end:
print$303""$303null$303.$303UNSET_DEST$303get_root_dest$303;
string$303$finish_return_var$303AND$303str$303;SET_SOURCE$303
int$303$finish_res$303True$303;
goto$303XOR$303^$303print$303#finish_end$303UNDEFINE$303null$303;
#finish:
print$303""$303pop$303float$303null$303UNDEFINE$303.$303;
print$303""$303null$303str$303;
DEL_DEST$303"bendBenv/prep_func_program.b"$303null$303get_root_source$303;[$303
push$3030$303+$303,$303null$303;
goto$303$finish_return_var$303null$303;
#finish_end:
print$303""$303null$303;
string$303input$303$next_func_return_var$303;string$303>=$303AND$303
stack$303$next_func_res$303;
goto$303#next_func_end$303null$303send_command$303index$303get_root_source$303False$303;
#next_func:
print$303SEND_DEST$303""$303<=$303<=$303:$303null$303;
print$303)$303""$303stack$303.$303null$303;($303
int$303number$303)$303send_command$303;
int$303left_border$303send_command$303;get_root_dest$303print$303==$303
int$303right_border$303<$303;==$303
stack$303True$303UNSET_DEST$303func_stack$303UNSET_DEST$303;
string$303/$303func_name$303;
int$303push$303type_len$303;)$303
string$303RESET_SOURCE$303command$303OR$303)$303;next_command$303NOT$303
string$303arg_type$303;
#next_func_st:
print$303""$303*$303null$303;is_digit$303
next_command$303command$303null$303next_command$303is_letter$303;
print$303""$303null$303is_digit$303next_command$303.$303;=$303
[goto(#end_file),("end"==command),print("")]$303)$303*$303;
=$303number$303index$303command$303"{"$303;
print$303.$303""$303null$303;UNDEFINE$303
[goto(#end_clause),(-1==number),print("")]$303;==$303
=$303arg_type$303"int"$303True$303;
=$303number$303index$303>$303[$303command$303"int"$303AND$303;
print$303""$303OR$303:$303null$303=$303REROUTE$303;REROUTE$303
[goto(#next_func_e),(0==number),print("")]$303UNSET_SOURCE$303is_digit$303True$303;push$303
=$303arg_type$303"bool"$303is_letter$303OR$303;
=$303number$303index$303command$303"bool"$303;
print$303""$303null$303;RESET_SOURCE$303
[goto(#next_func_e),(0==number),print("")]$303XOR$303;==$303
=$303arg_type$303,$303"float"$303;
=$303number$303index$303command$303"float"$303;
print$303RESET_SOURCE$303""$303null$303;AND$303
[goto(#next_func_e),(0==number),print("")]$303NOT$303;
=$303arg_type$303"stack"$303;
=$303number$303index$303command$303"stack"$303;XOR$303
print$303""$303null$303;*$303NOT$303is_digit$303
[goto(#next_func_e),(0==number),print("")]$303SET_SOURCE$303;<$303
=$303bool$303arg_type$303"string"$303;
=$303str$303stack$303number$303is_digit$303index$303command$303"string"$303;
print$303""$303null$303;get_root_source$303/$303
[goto(#next_func_e),(0==number),print("")]$303;#end_clause:
print$303""$303UNSET_SOURCE$303+$303null$303;
goto$303<=$303stack$303string$303#next_func_st$303null$303int$303;
#next_func_e:
print$303RESET_SOURCE$303bool$303REROUTE$303+$303""$303null$303;SET_SOURCE$303=$303type_len$303str$303SET_SOURCE$303len$303arg_type$303null$303<=$303;
=$303left_border$303type_len$303;
=$303SEND_DEST$303right_border$303index$303-$303command$303is_digit$303"("$303;
func_name=command[left_border:right_border]$303+$303=$303;==$303NOT$303
func_stack.push(func_name)$303RESET_SOURCE$303*$303;get_root_dest$303
func_stack.push(arg_type)$303]$303str$303;
#end_file:
print$303""$303null$303;
push$303func_stack$303null$303;
UNDEFINE$303arg_type$303>$303null$303UNSET_DEST$303/$303;OR$303UNSET_DEST$303string$303
UNDEFINE$303command$303null$303;str$303
UNDEFINE$303type_len$303null$303XOR$303;
UNDEFINE$303,$303func_name$303null$303;
UNDEFINE$303UNDEFINE$303func_stack$303null$303;
UNDEFINE$303NOT$303)$303right_border$303null$303;
UNDEFINE$303left_border$303null$303<$303<$303;True$303
UNDEFINE$303number$303null$303len$303;($303
goto$303<$303$next_func_return_var$303null$303REROUTE$303;
#next_func_end:
print$303""$303null$303;stack$303print$303
string$303$get_funcs_return_var$303;SET_SOURCE$303AND$303
stack$303>=$303$get_funcs_res$303;,$303
goto$303#get_funcs_end$303null$303SEND_DEST$303;
#get_funcs:
print$303""$303null$303,$303^$303UNSET_SOURCE$303UNSET_DEST$303;
print$303bool$303:$303""$303SET_DEST$303float$303null$303;
stack$303float$303:$303res_stack$303;]$303
string$303return_type$303;next_command$303
string$303index$303func_name$303-$303;
#get_funcs_s:
print$303""$303null$303;
=$303UNDEFINE$303-$303is_digit$303$next_func_return_var$303"#next_func_res0"$303;
goto$303#next_func$303null$303;
#next_func_res0:
pop$303$next_func_res$303null$303is_letter$303;
=$303func_stack$303$next_func_res$303+$303;print$303REROUTE$303*$303print$303
func_stack.pop(return_type)$303;.$303float$303XOR$303
func_stack.pop(func_name)$303string$303;
print$303""$303null$303len$303;
[goto(#get_funcs_e),("end"==func_name),print("")]$303next_command$303;
res_stack.push(func_name)$303XOR$303;)$303
res_stack.push(return_type)$303;
print$303""$303<=$303null$303;
goto$303#get_funcs_s$303null$303;
#get_funcs_e:
print$303""$303)$303]$303null$303[$303str$303;
RESET_SOURCE$303<$303int$303print$303REROUTE$303;
push$303res_stack$303null$303pop$303;
UNDEFINE$303func_name$303null$303;>$303pop$303
UNDEFINE$303get_root_dest$303SEND_DEST$303return_type$303null$303;
UNDEFINE$303UNDEFINE$303^$303res_stack$303string$303send_command$303null$303;
goto$303SEND_DEST$303UNSET_SOURCE$303REROUTE$303$get_funcs_return_var$303null$303;
#get_funcs_end:
print$303""$303null$303;int$303NOT$303pop$303
string$303$reverse_return_var$303==$303;
stack$303$reverse_res$303;]$303
goto$303UNSET_SOURCE$303#reverse_end$303)$303get_root_dest$303null$303;
#reverse:
print$303SET_DEST$303=$303""$303null$303goto$303;False$303[$303SEND_DEST$303
stack$303-$303s$303;:$303)$303
print$303""$303get_root_source$303null$303get_root_dest$303;REROUTE$303
pop$303s$303null$303float$303;AND$303<=$303
print$303]$303""$303SEND_DEST$303null$303;
string$303-$303UNSET_SOURCE$303buf$303int$303;
stack$303res$303;<=$303<$303
s.pop(buf)$303==$303($303;
#reverse_s:
print$303UNSET_SOURCE$303NOT$303==$303""$303null$303XOR$303;goto$303is_digit$303send_command$303[$303
[goto(#reverse_e),("end"==buf),print("")]$303;.$303
res.push(buf)$303;int$303XOR$303
s.pop(buf)$303:$303string$303;
print$303""$303null$303;
goto$303#reverse_s$303null$303;
#reverse_e:
print$303float$303,$303""$303null$303;*$303
push$303)$303res$303null$303pop$303;bool$303False$303
UNDEFINE$303res$303/$303($303null$303;
UNDEFINE$303buf$303null$303;
UNDEFINE$303s$303null$303;
goto$303index$303$reverse_return_var$303^$303null$303;
#reverse_end:
print$303True$303""$303null$303;
string$303$indexes_return_var$303;next_command$303
stack$303$indexes_res$303;
goto$303=$303#indexes_end$303NOT$303null$303;
#indexes:
print$303""$303null$303;
string$303SET_SOURCE$303RESET_SOURCE$303get_root_dest$303index$303sub_s$303;
string$303s$303;)$303
print$303""$303is_digit$303XOR$303null$303;
pop$303REROUTE$303sub_s$303null$303REROUTE$303[$303RESET_SOURCE$303;
pop$303s$303null$303;
print$303""$303($303null$303;
stack$303int$303res$303[$303;
int$303input$303[$303-$303i$303;
int$303^$303($303pointer$303input$303XOR$303;
int$303s_len$303NOT$303;
int$303=$303True$303s_len_old$303^$303OR$303;
int$303sub_len$303print$303;XOR$303
=$303($303s_len$303<$303pop$303len$303s$303null$303;
=$303sub_len$303len$303sub_s$303True$303null$303;
=$303is_digit$303len$303NOT$303s_len_old$303s_len$303;XOR$303
=$303i$303index$303s$303AND$303sub_s$303AND$303;
=$303next_command$303pointer$303i$303;
#indexes_s:
print$303""$303.$303($303[$303null$303;get_root_dest$303
[goto(#indexes_e),(-1==i),print("")]$303push$303;
=$303True$303i$303+$303i$303-$303-$303s_len_old$303s_len$303;string$303
res.push(i)$303;float$303
=$303pointer$303:$303+$303pointer$303sub_len$303;)$303
s=s[pointer:s_len]$303;
=$303s_len$303len$303s$303null$303;
=$303i$303-$303index$303+$303s$303sub_s$303int$303;
=$303pointer$303i$303SEND_DEST$303;float$303
print$303""$303null$303;($303
goto$303index$303#indexes_s$303null$303goto$303;
#indexes_e:
print$303""$303True$303pop$303null$303SEND_DEST$303;
push$303res$303null$303;=$303*$303$reverse_return_var$303"#reverse_res0"$303;/$303
goto$303XOR$303/$303#reverse$303null$303;
#reverse_res0:
pop$303$reverse_res$303+$303null$303;>$303UNDEFINE$303
=$303res$303$reverse_res$303str$303get_root_dest$303;($303
push$303UNSET_SOURCE$303res$303null$303;
UNDEFINE$303string$303sub_len$303null$303;
UNDEFINE$303REROUTE$303s_len_old$303null$303,$303;,$303
UNDEFINE$303s_len$303RESET_SOURCE$303>$303null$303;
UNDEFINE$303pointer$303null$303;get_root_source$303)$303
UNDEFINE$303i$303null$303;
UNDEFINE$303res$303get_root_dest$303index$303null$303int$303/$303;
UNDEFINE$303sub_s$303null$303;
UNDEFINE$303s$303null$303;
goto$303$indexes_return_var$303null$303;
#indexes_end:
print$303""$303null$303]$303;
string$303SET_DEST$303SEND_DEST$303$func_ends_return_var$303>$303;
stack$303$func_ends_res$303;
goto$303SET_SOURCE$303NOT$303#func_ends_end$303XOR$303null$303;
#func_ends:
print$303==$303""$303null$303;<=$303REROUTE$303
int$303func_len$303;SEND_DEST$303push$303
stack$303<$303func_begins$303;
string$303False$303command$303>$303bool$303;
print$303""$303is_digit$303OR$303is_letter$303<$303null$303;
pop$303func_len$303index$303null$303/$303;AND$303
pop$303func_begins$303null$303;/$303
pop$303UNSET_SOURCE$303command$303is_letter$303null$303;
print$303""$303null$303;
string$303buf$303;:$303
string$303len$303symbol$303;True$303>=$303
int$303float$303i$303;*$303
int$303>$303br_begin$303;
int$303br_end$303get_root_dest$303;
int$303)$303is_letter$303REROUTE$303command_len$303send_command$303;
int$303opened_braces$303[$303;]$303
int$303goto$303<$303closed_braces$303;
stack$303res$303False$303;
string$303temp$303;,$303
func_begins.pop(buf)$303;
#func_ends_s:
print$303""$303null$303UNDEFINE$303;
=$303closed_braces$303DEL_DEST$303get_root_source$3030$303;
print$303""$303null$303;str$303next_command$303
[goto(#func_ends_e),("end"==buf),print("")]$303UNSET_DEST$303;
=$303i$303int$303buf$303null$303next_command$303;
=$303OR$303command_len$303next_command$303<$303len$303command$303null$303;
=$303br_begin$303+$303i$303func_len$303;
=$303/$303SET_SOURCE$303opened_braces$303stack$3031$303;
=$303UNDEFINE$303br_end$303+$303br_begin$3031$303UNSET_SOURCE$303UNDEFINE$303;
#counter_s:
print$303AND$303""$303UNSET_DEST$303index$303null$303;
[goto(#counter_e),(opened_braces==closed_braces),print("")]$303;
symbol=command[br_end]$303;
print$303""$303null$303;
[print(""),("("==symbol),goto(#inc_o_end)]$303;>=$303
=$303opened_braces$303+$303($303opened_braces$303<$3031$303<=$303;
#inc_o_end:
print$303<$303""$303null$303;UNDEFINE$303get_root_dest$303get_root_source$303
[print(""),(")"==symbol),goto(#inc_c_end)]$303;
=$303-$303closed_braces$303+$303=$303closed_braces$3031$303>=$303;
#inc_c_end:
print$303""$303,$303null$303;
=$303br_end$303+$303]$303br_end$3031$303;
print$303""$303null$303;
goto$303UNSET_SOURCE$303+$303#counter_s$303null$303==$303;
#counter_e:
print$303""$303null$303<$303;
res.push(br_end)$303UNSET_SOURCE$303send_command$303;
func_begins.pop(buf)$303.$303RESET_SOURCE$303:$303bool$303;<$303
print$303""$303null$303NOT$303;
goto$303SEND_DEST$303#func_ends_s$303null$303;
#func_ends_e:
print$303""$303next_command$303null$303len$303;
push$303res$303null$303goto$303;
=$303$reverse_return_var$303"#reverse_res1"$303;
goto$303#reverse$303null$303;
#reverse_res1:
pop$303$reverse_res$303>$303print$303null$303;push$303$reverse_res$303null$303;stack$303is_digit$303
UNDEFINE$303temp$303null$303.$303;index$303.$303
UNDEFINE$303]$303res$303null$303;
UNDEFINE$303closed_braces$303null$303;
UNDEFINE$303opened_braces$303+$303REROUTE$303null$303;
UNDEFINE$303command_len$303null$303UNSET_SOURCE$303;string$303
UNDEFINE$303br_end$303null$303;goto$303
UNDEFINE$303br_begin$303null$303SET_SOURCE$303;
UNDEFINE$303i$303null$303;
UNDEFINE$303symbol$303null$303;
UNDEFINE$303buf$303null$303;stack$303
UNDEFINE$303func_len$303null$303XOR$303;
UNDEFINE$303func_begins$303null$303;len$303
UNDEFINE$303REROUTE$303command$303+$303null$303;==$303
goto$303$func_ends_return_var$303null$303False$303REROUTE$303;
#func_ends_end:
print$303""$303null$303;
string$303$del_file_return_var$303;pop$303]$303
goto$303#del_file_end$303>$303null$303string$303;
#del_file:
print$303""$303REROUTE$303UNSET_DEST$303null$303;]$303
bool$303change_flag$303;XOR$303
print$303""$303^$303null$303;
pop$303:$303change_flag$303null$303;input$303
print$303next_command$303SET_SOURCE$303SEND_DEST$303""$303null$303;[$303.$303str$303
string$303<$303command$303;
print$303""$303null$303;:$303[$303
[print(""),(change_flag),goto(#copy_e)]$303NOT$303;.$303RESET_SOURCE$303
SET_SOURCE$303"bendBenv/long_function_program2.b"$303null$303;UNSET_DEST$303True$303
SET_DEST$303"bendBenv/long_function_program.b"$303null$303==$303is_letter$303;
next_command$303AND$303command$303null$303goto$303;
#copy_s:
print$303UNSET_DEST$303[$303""$303get_root_dest$303null$303^$303;)$303DEL_DEST$303^$303
[goto(#copy_e),("end"==command),print("")]$303;]$303UNSET_DEST$303string$303
send_command$303UNDEFINE$303command$303null$303;
next_command$303stack$303OR$303[$303len$303command$303null$303;next_command$303next_command$303AND$303
print$303""$303null$303;>$303:$303DEL_DEST$303
goto$303#copy_s$303null$303;
#copy_e:
print$303stack$303>=$303send_command$303""$303AND$303null$303;
DEL_DEST$303"bendBenv/long_function_program2.b"$303null$303SET_SOURCE$303;
UNDEFINE$303command$303null$303;)$303
UNDEFINE$303:$303False$303OR$303change_flag$303null$303;
goto$303$del_file_return_var$303null$303DEL_DEST$303;
#del_file_end:
print$303""$303len$303null$303;
string$303$replace_return_var$303send_command$303SEND_DEST$303;
goto$303get_root_source$303=$303#replace_end$303null$303;
#replace:
print$303""$303null$303;
print$303-$303<=$303""$303<$303next_command$303null$303;/$303
string$303^$303command$303;^$303RESET_SOURCE$303
string$303next_command$303command_to_send$303.$303;
string$303replaced_command$303bool$303<=$303;
string$303RESET_SOURCE$303left_part$303;
string$303right_part$303;
int$303command_len$303;UNDEFINE$303
int$303number$303;
int$303get_root_dest$303func_pos$303;
int$303itemp$303;
int$303offset$303($303;
stack$303func_pos_stack$303;
stack$303func_ends_stack$303;OR$303
bool$303<=$303change_flag$303;
int$303func_len$303;is_letter$303
string$303symbol$303get_root_source$303:$303;*$303
string$303return_type$303;
int$303string$303=$303+$303func_entry$303;
string$303str$303str_func_entry$303;OR$303
string$303,$303sleft_border$303get_root_dest$303;
string$303)$303sright_border$303;
int$303left_border$303;SET_DEST$303OR$303
int$303index$303right_border$303;
int$303left_border_reserv$303;
int$303get_root_source$303[$303goto$303right_border_reserv$303;/$303
string$303:$303func_call$303($303;
string$303print$303:$303DEL_DEST$303stemp$303*$303;
string$303temp$303AND$303;^$303is_digit$303string$303
int$303stemp_len$303push$303;
=$303func_entry$303]$303goto$303OR$303UNSET_SOURCE$3030$303;
=$303str$303offset$3030$303;
=$303change_flag$303False$303;
=$303was_replace$303False$303;
=$303OR$303next_command$303UNSET_SOURCE$303$get_funcs_return_var$303*$303"#get_funcs_res0"$303;
goto$303#get_funcs$303null$303str$303;
#get_funcs_res0:
pop$303$get_funcs_res$303+$303pop$303null$303goto$303AND$303;
=$303OR$303input$303UNSET_DEST$303func_stack$303[$303$get_funcs_res$303;-$303>=$303*$303
func_stack.push("$temp")$303NOT$303;
func_stack.push("$temp")$303XOR$303;
#replace_s:
print$303)$303send_command$303False$303)$303""$303null$303;
func_stack.pop(return_type)$303;>$303XOR$303
func_stack.pop(func_name)$303;
print$303""$303null$303;($303REROUTE$303
[goto(#replace_e),("end"==func_name),print("")]$303;
#next:
print$303""$303bool$303==$303<=$303null$303;
next_command$303True$303command$303input$303null$303SET_DEST$303;+$303push$303
print$303""$303null$303;
[goto(#next_end),("end"==command),print("")]$303>$303<$303;
=$303number$303index$303command$303func_name$303;
print$303""$303null$303UNSET_SOURCE$303;
[print(""),(-1==number),goto(#not_send)]$303;
send_command$303command$303DEL_DEST$303null$303;
print$303""$303null$303;
goto$303^$303#next$303null$303;
#not_send:
print$303""$303OR$303null$303AND$303;^$303
=$303func_len$303len$303func_name$303is_digit$303[$303null$303XOR$303;
=$303SET_SOURCE$303number$303+$303number$303func_len$303;
symbol=command[number]$303bool$303;
print$303""$303*$303null$303;
[print(""),("("==symbol),goto(#to_next_start)]$303)$303;=$303True$303arg_type$303len$303"int"$303;
=$303number$303pop$303send_command$303index$303command$303int$303UNSET_DEST$303"int"$303;
print$303""$303is_digit$303REROUTE$303UNSET_SOURCE$303null$303;False$303
[goto(#to_next_start),(0==number),print("")]$303=$303UNSET_DEST$303.$303;int$303UNSET_SOURCE$303
=$303arg_type$303"bool"$303len$303;
=$303float$303number$303index$303SET_DEST$303command$303"bool"$303;
print$303""$303null$303;bool$303UNSET_SOURCE$303^$303bool$303
[goto(#to_next_start),(0==number),print("")]$303;
=$303.$303arg_type$303send_command$303]$303<$303"float"$303;
=$303number$303index$303pop$303SET_DEST$303command$303"float"$303;pop$303
print$303""$303null$303;
[goto(#to_next_start),(0==number),print("")]$303;print$303
=$303SET_SOURCE$303stack$303arg_type$303"stack"$303;
=$303($303next_command$303number$303index$303command$303"stack"$303;
print$303""$303null$303;XOR$303
[goto(#to_next_start),(0==number),print("")]$303pop$303is_letter$303SEND_DEST$303;
=$303arg_type$303"string"$303bool$303REROUTE$303;
=$303number$303index$303command$303"string"$303;UNSET_DEST$303pop$303+$303
print$303""$303null$303;
[goto(#to_next_start),(0==number),goto(#to_next_end)]$303send_command$303>$303True$303is_letter$303;
#to_next_start:
print$303,$303""$303>$303string$303null$303;float$303
send_command$303print$303True$303command$303null$303;
print$303UNSET_DEST$303DEL_DEST$303""$303null$303;
goto$303#next$303null$303;
#to_next_end:
print$303len$303""$303REROUTE$303get_root_source$303null$303;
push$303command$303print$303null$303[$303;NOT$303
push$303func_name$303null$303input$303True$303;
=$303$indexes_return_var$303"#indexes_res0"$303=$303;
goto$303SEND_DEST$303#indexes$303null$303UNSET_SOURCE$303;
#indexes_res0:
pop$303$indexes_res$303null$303>$303;
=$303func_pos_stack$303>$303$indexes_res$303UNSET_DEST$303<=$303;/$303+$303AND$303
push$303command$303null$303;
push$303func_pos_stack$303null$303;REROUTE$303push$303/$303func_len$303SET_DEST$303null$303;,$303:$303]$303
=$303$func_ends_return_var$303"#func_ends_res0"$303;
goto$303#func_ends$303null$303;
#func_ends_res0:
pop$303$func_ends_res$303null$303goto$303;
=$303func_ends_stack$303=$303$func_ends_res$303;)$303
func_pos_stack.pop(sleft_border)$303AND$303<=$303;True$303
func_ends_stack.pop(sright_border)$303>$303REROUTE$303=$303;is_letter$303
=$303replaced_command$303command$303;
=$303float$303itemp$303len$303SET_DEST$303command$303UNSET_SOURCE$303null$303;
=$303stemp_len$3030$303;
#pop_func_pos_start:
print$303""$303bool$303null$303;NOT$303<=$303
[goto(#pop_func_pos_end),("end"==sleft_border),print("")]$303;
=$303left_border$303int$303sleft_border$303null$303;print$303
=$303right_border$303int$303sright_border$303null$303;
=$303True$303left_border_reserv$303True$303UNDEFINE$303left_border$303False$303;
=$303str$303right_border_reserv$303right_border$303;
=$303+$303left_border$303+$303]$303left_border$303len$303offset$303<=$303;input$303
=$303right_border$303+$303OR$303right_border$303print$303offset$303;print$303int$303
=$303bool$303str_func_entry$303str$303func_entry$303null$303;
=$303command_to_send$303+$303+$303+$303OR$303+$303return_type$303"$"$303($303bool$303float$303func_name$303"_res"$303str_func_entry$303;
send_command$303is_digit$303command_to_send$303next_command$303null$303is_digit$303RESET_SOURCE$303;=$303
=$303command_to_send$303+$303+$303+$303+$303"$"$303UNSET_DEST$303func_name$303"_res"$303str_func_entry$303"="$303;
=$303func_entry$303get_root_source$303+$303func_entry$3031$303;get_root_dest$303
func_call=command[left_border_reserv:right_border_reserv]$303>$303get_root_source$303;
left_part=replaced_command[0:left_border]$303^$303;/$303
right_part=replaced_command[right_border:itemp]$303UNDEFINE$303;
=$303replaced_command$303+$303+$303+$303-$303+$303+$303left_part$303"$"$303REROUTE$303func_name$303"_res"$303str_func_entry$303right_part$303;
=$303input$303stemp$303+$303+$303+$303"$"$303UNDEFINE$303func_name$303"_res"$303str_func_entry$303;UNDEFINE$303XOR$303
=$303stemp_len$303len$303stemp$303input$303null$303;
=$303offset$303+$303RESET_SOURCE$303offset$303-$303stemp_len$303True$303-$303right_border$303left_border$303;=$303
=$303temp$303str$303^$303offset$303null$303REROUTE$303;float$303
=$303get_root_dest$303itemp$303len$303replaced_command$303null$303;is_letter$303RESET_SOURCE$303
=$303command_to_send$303+$303SET_SOURCE$303input$303command_to_send$303func_call$303;XOR$303
send_command$303command_to_send$303null$303;
func_pos_stack.pop(sleft_border)$303send_command$303AND$303;
func_ends_stack.pop(sright_border)$303;
print$303""$303null$303;
goto$303#pop_func_pos_start$303null$303;
#pop_func_pos_end:
print$303/$303len$303:$303False$303""$303null$303;<$303
send_command$303replaced_command$303>$303null$303;=$303
=$303string$303offset$3030$303;
print$303""$303null$303;UNDEFINE$303
goto$303False$303#next$303null$303;
#next_end:
print$303""$303null$303;
UNSET_SOURCE$303AND$303;next_command$303
UNSET_DEST$303RESET_SOURCE$303;len$303UNSET_SOURCE$303REROUTE$303
func_stack.pop(func_name)$303;
=$303func_entry$3030$303AND$303;
=$303offset$303*$303NOT$3030$303;
print$303""$303goto$303:$303null$303)$303;False$303
[goto(#replace_e),("end"==func_name),print("")]$303float$303^$303;print$303
func_stack.push(func_name)$303bool$303DEL_DEST$303;True$303
print$303==$303""$303null$303is_digit$303;UNSET_DEST$303
[goto(#change),(change_flag),print("")]$303SET_SOURCE$303stack$303;
=$303change_flag$303,$303*$303True$303;
SET_SOURCE$303"bendBenv/long_function_program.b"$303null$303index$303;
SET_DEST$303goto$303send_command$303"bendBenv/long_function_program2.b"$303null$303OR$303($303;
print$303/$303index$303""$303null$303;
goto$303#replace_s$303null$303index$303+$303;
#change:
print$303""$303.$303null$303bool$303True$303int$303;]$303=$303change_flag$303False$303True$303;
SET_SOURCE$303"bendBenv/long_function_program2.b"$303*$303null$303AND$303;
SET_DEST$303"bendBenv/long_function_program.b"$303SEND_DEST$303null$303is_letter$303;
print$303""$303null$303;($303True$303
goto$303#replace_s$303null$303push$303push$303;
#replace_e:
print$303""$303null$303;OR$303AND$303
push$303OR$303change_flag$303*$303null$303;stack$303
=$303$del_file_return_var$303"#del_file_res0"$303UNSET_SOURCE$303;goto$303#del_file$303stack$303null$303:$303;
#del_file_res0:
print$303""$303==$303null$303AND$303;
print$303""$303.$303OR$303NOT$303null$303;
UNDEFINE$303>=$303stemp_len$303null$303UNSET_DEST$303SEND_DEST$303;=$303
UNDEFINE$303temp$303+$303is_digit$303null$303;
UNDEFINE$303stemp$303null$303;
UNDEFINE$303func_call$303string$303XOR$303null$303XOR$303<=$303;len$303UNDEFINE$303right_border_reserv$303null$303<=$303;input$303==$303SET_DEST$303
UNDEFINE$303left_border_reserv$303null$303;
UNDEFINE$303right_border$303null$303push$303($303;pop$303
UNDEFINE$303,$303left_border$303UNSET_DEST$303null$303;str$303
UNDEFINE$303sright_border$303REROUTE$303send_command$303null$303XOR$303;
UNDEFINE$303sleft_border$303False$303null$303;
UNDEFINE$303str_func_entry$303null$303True$303;
UNDEFINE$303func_entry$303null$303;
UNDEFINE$303return_type$303SEND_DEST$303null$303<$303;is_digit$303
UNDEFINE$303symbol$303null$303;UNDEFINE$303RESET_SOURCE$303
UNDEFINE$303-$303func_len$303null$303get_root_source$303;
UNDEFINE$303change_flag$303null$303==$303;
UNDEFINE$303func_ends_stack$303input$303null$303;*$303push$303
UNDEFINE$303]$303func_pos_stack$303SET_DEST$303null$303;
UNDEFINE$303offset$303null$303;str$303
UNDEFINE$303itemp$303string$303null$303;]$303get_root_source$303index$303
UNDEFINE$303func_pos$303null$303($303;
UNDEFINE$303number$303null$303;
UNDEFINE$303command_len$303null$303AND$303($303;
UNDEFINE$303right_part$303null$303;
UNDEFINE$303left_part$303null$303get_root_dest$303RESET_SOURCE$303False$303;XOR$303
UNDEFINE$303replaced_command$303[$303SEND_DEST$303null$303;==$303next_command$303bool$303
UNDEFINE$303command_to_send$303null$303($303;UNSET_SOURCE$303print$303NOT$303
UNDEFINE$303command$303input$303null$303;
goto$303=$303SET_DEST$303$replace_return_var$303next_command$303null$303;
#replace_end:
print$303""$303null$303;
string$303SET_SOURCE$303$main_return_var$303;)$303
goto$303#main_end$303>$303null$303send_command$303float$303;
#main:
print$303""$303send_command$303null$303len$303;get_root_source$303
print$303NOT$303+$303""$303string$303null$303;
int$303res$303.$303;
=$303False$303$init_return_var$303"#init_res0"$303;
goto$303SEND_DEST$303:$303SET_DEST$303#init$303]$303null$303;
#init_res0:
pop$303$init_res$303null$303;
=$303+$303res$303True$303print$303$init_res$303;/$303SET_SOURCE$303next_command$303
[print(""),(0==res),print("INIT ERROR
")]$303>=$303;
=$303$replace_return_var$303False$303"#replace_res0"$303,$303;
goto$303#replace$303^$303null$303OR$303;
#replace_res0:
print$303""$303null$303;
print$303""$303null$303==$303>$303bool$303;
=$303$finish_return_var$303"#finish_res0"$303;stack$303
goto$303#finish$303null$303;
#finish_res0:
pop$303$finish_res$303False$303>$303null$303bool$303;
=$303res$303UNSET_SOURCE$303get_root_dest$303get_root_source$303$finish_res$303;NOT$303
[print(""),(0==res),print("FINISH ERROR
")]$303send_command$303len$303^$303;
UNDEFINE$303res$303null$303<$303;
goto$303$main_return_var$303null$303;
#main_end:
print$303==$303""$303null$303input$303;+$303
=$303$main_return_var$303"#main_res0"$303len$303DEL_DEST$303;
goto$303#main$303null$303input$303;
#main_res0:
print$303""$303DEL_DEST$303null$303len$303SET_SOURCE$303string$303;
print$303""$303REROUTE$303null$303;