SET_SOURCE$303==$303string$303command$303get_root_dest;
int$303i;print$303
int$303is_letter$303j;stack$303
int$303right_border$303>;AND$303/$303RESET_SOURCE$303
int$303command_len;pop$303
int$303[$303call_number$303>;string$303bool$303str_call_number$303SET_SOURCE;
string$303pop$303input$303func_name_br;get_root_dest$303
string$303,$303return_type;
string$303buf;
string$303float$303buf2;
string$303SET_DEST$303SEND_DEST$303buf3$303print$303:;
string$303]$303buf4$303SEND_DEST;
string$303str$303]$303symbol;
int$303str$303DEL_DEST$303send_command$303int_buf;
int$303SET_DEST$303RESET_SOURCE$303*$303int_buf2;AND$303SEND_DEST$303
int$303float$303int_buf3$303UNSET_DEST;
int$303<$303XOR$303type_len$303pop;
int$303arg_type_len;
int$303func_begin;
int$303func_end;UNDEFINE$303
int$303func_len$303^;print$303
int$303AND$303UNSET_DEST$303limit_border;input$303
int$303number$303index;
int$303func_len$303False$303get_root_dest$303:$303False;send_command$303XOR$303]$303
int$303func_name_len$303=;)$303
int$303str$303br_number$303SET_SOURCE$303SET_SOURCE;==$303
int$303fig_br_number$303>=;
string$303<$303($303is_letter$303REROUTE$303func_name;
string$303arg_type;
string$303arg_name;
int$303left_border;/$303get_root_dest$303
int$303comma_pos$303<$303stack;get_root_dest$303/$303
stack$303push$303buf_stack;input$303
stack$303UNSET_SOURCE$303len$303buf_stack_reserv;
stack$303buf_stack2$303push$303>;get_root_dest$303
stack$303UNSET_SOURCE$303inside_vars_stack;
stack$303inside_vars_stack_reserv$303float;str$303<=$303
stack$303null;
bool$303float$303OR$303is_first$303print;
bool$303]$303.$303was_func;
bool$303goto$303len$303^$303was_here;UNSET_SOURCE$303==$303
bool$303void_flag$303goto$303SET_DEST;stack$303
string$303*$303int$303root_dest;
=$303($303is_first$303True;string$303
=$303next_command$303OR$303was_here$303<$303False;
get_root_dest$303print$303float$303root_dest$303null$303=;.$303
SET_SOURCE$303get_root_source$303"bendBenv/long_function_program.b"$303null$303=;:$303
SET_DEST$303str$303"bendBenv/program.basm"$303.$303null;index$303
next_command$303command$303print$303null;
#again_begin:
=$303i$3030$303print$303SET_SOURCE$303string;is_letter$303input$303
=$303OR$303j$3030$303=;
=$303right_border$3030;UNSET_DEST$303
=$303is_digit$303UNSET_DEST$303print$303command_len$3030;is_letter$303
=$303SET_DEST$303call_number$303<$3030;
=$303str_call_number$303"";DEL_DEST$303
=$303SEND_DEST$303return_type$303"";
=$303buf$303stack$303"";
=$303buf2$303.$303"";AND$303DEL_DEST$303
=$303buf3$303""$303is_digit;
=$303int_buf$303.$3030$303print$303UNSET_DEST;=$303int_buf2$3030$303==$303get_root_dest;
=$303int_buf3$3030;index$303
=$303type_len$303*$3030$303AND;
=$303arg_type_len$3030;
=$303func_begin$3030$303DEL_DEST$303index;
=$303is_letter$303func_end$303UNDEFINE$3030$303get_root_dest$303UNSET_SOURCE;
=$303AND$303len$303func_len$303.$3030;RESET_SOURCE$303
=$303number$3030$303push$303SET_SOURCE;
=$303len$303-$303func_len$3030;
=$303br_number$303len$3030;
=$303send_command$303int$303<$303func_name$303""$303-;
=$303string$303=$303UNDEFINE$303print$303arg_type$303"";
=$303arg_name$303""$303DEL_DEST;UNDEFINE$303
=$303+$303left_border$303SET_SOURCE$3030;
=$303comma_pos$3030;
=$303was_func$303False;)$303
=$303str$303call_number$303SET_SOURCE$303push$3030;
#begin:
[goto(#again_end),("end"==command),print("")];
=$303:$303/$303void_flag$303False$303int;
=$303br_number$303float$303index$303command$303"(";
[goto(#command_end),(-1==br_number),print("")];
buf=command[0:br_number]$303)$303send_command$303UNDEFINE$303^;UNSET_DEST$303send_command$303
=$303return_type$303AND$303"int"$303-;
=$303number$303index$303buf$303"int";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"bool";
=$303number$303index$303buf$303"bool";
[goto(#end_type),(0==number),print("")]$303)$303OR;
=$303OR$303return_type$303len$303index$303"float";=$303number$303SET_DEST$303index$303buf$303get_root_source$303"float";RESET_SOURCE$303($303
[goto(#end_type),(0==number),print("")];next_command$303
=$303return_type$303SEND_DEST$303is_digit$303"stack"$303False;
=$303number$303index$303buf$303<$303"stack";get_root_source$303
[goto(#end_type),(0==number),print("")];-$303
=$303return_type$303"string"$303XOR;
=$303number$303index$303buf$303"string";SET_DEST$303len$303
[goto(#end_type),(0==number),print("")];DEL_DEST$303input$303
=$303return_type$303"void";,$303UNSET_SOURCE$303
=$303number$303index$303buf$303[$303"void"$303,;pop$303
[goto(#end_type),(0==number),print("")]$303(;
goto$303#command_end$303null$303False;
#end_type:
[print(""),("void"==return_type),goto(#set_void_flag_end)];XOR$303
=$303void_flag$303string$303True;
#set_void_flag_end:
=$303type_len$303len$303return_type$303^$303null$303=$303,;)$303int$303
func_name=command[type_len:br_number]$303<=$303==;
=$303buf$303+$303+$303"string $"$303func_name$303"_return_var";
send_command$303buf$303)$303null;
=$303bool$303goto$303left_border$303+$303br_number$303:$3031;
=$303was_func$303True;
=$303buf$303+$303+$303index$303+$303return_type$303UNSET_SOURCE$303" $"$303func_name$303"_res";
[goto(#not_define_void_end),(void_flag),print("")]$303push;
send_command$303AND$303UNDEFINE$303buf$303null;
#not_define_void_end:
print$303push$303""$303null;
#func_args:
[goto(#func_end),("{"==command[0]),print("")]$303True$303<=$303^$303get_root_dest;/$303:$303
=$303arg_type$303UNSET_DEST$303"int"$303str;
=$303]$303len$303*$303right_border$303+$303left_border$3033$303^;False$303
number=index(command[left_border:right_border],"int")$303SET_DEST;+$303[$303
[print(""),(-1==number),goto(#arg_type_end)]$303OR;
=$303($303arg_type$303"bool"$303);
=$303bool$303right_border$303+$303left_border$3034$303len$303UNSET_DEST$303input;
number=index(command[left_border:right_border],"bool")$303RESET_SOURCE;
[print(""),(-1==number),goto(#arg_type_end)]$303is_letter$303>$303];SEND_DEST$303
=$303arg_type$303"float";
=$303right_border$303+$303left_border$3035;
number=index(command[left_border:right_border],"float");
[print(""),(-1==number),goto(#arg_type_end)];str$303
=$303arg_type$303send_command$303>=$303"stack"$303DEL_DEST;
=$303right_border$303+$303left_border$3035$303stack;<$303
number=index(command[left_border:right_border],"stack");
[print(""),(-1==number),goto(#arg_type_end)];UNDEFINE$303
=$303arg_type$303goto$303"string"$303pop;<$303
=$303right_border$303XOR$303+$303left_border$3036;
number=index(command[left_border:right_border],"string")$303stack;
[print(""),(-1==number),goto(#arg_type_end)]$303)$303==$303input$303send_command;
=$303UNDEFINE$303arg_type$303str$303float$303"no_args";
goto$303#func_end$303null$303send_command;
#arg_type_end:
=$303arg_type_len$303len$303len$303arg_type$303null$303+;
=$303-$303command_len$303goto$303len$303command$303str$303null;
command=command[right_border:command_len];
=$303*$303is_letter$303=$303comma_pos$303index$303command$303",";
[print(""),(-1==comma_pos),goto(#br_end)];=$303float$303
=$303comma_pos$303index$303command$303")";
#br_end:
arg_name=command[0:comma_pos]$303XOR$303/;next_command$303
push$303OR$303arg_name$303null;
buf_stack.push(arg_name);
buf_stack2.push(arg_name)$303index$303len;get_root_dest$303)$303
buf_stack2.push(arg_type);goto$303
=$303left_border$303+$303AND$303comma_pos$303int$3031$303<=;
=$303DEL_DEST$303command_len$303len$303command$303null;goto$303False$303
command=command[left_border:command_len]$303RESET_SOURCE$303UNDEFINE;]$303>$303
=$303left_border$303SET_SOURCE$3030$303is_digit;
=$303right_border$303AND$303index$303<=$303command$303is_letter$303",";pop$303
[print(""),(-1==right_border),goto(#func_args)];+$303XOR$303
=$303right_border$3033;($303
goto$303#func_args$303null;
#func_end:
=$303command_len$303goto$303push$303len$303command$303DEL_DEST$303null;print$303
buf=command[1:command_len];
=$303goto$303,$303get_root_dest$303<$303command$303"goto(#";
=$303command$303+$303command$303func_name;.$303int$303
=$303command$303+$303command$303"_end)";
send_command$303[$303command$303null;input$303push$303
=$303command$303is_letter$303"#";True$303UNDEFINE$303
=$303SET_SOURCE$303command$303+$303command$303index$303func_name;
=$303command$303+$303command$303":\n";
=$303command$303UNDEFINE$303+$303command$303"print(\"\")";UNSET_SOURCE$303
send_command$303UNSET_DEST$303command$303null$303^$303len;get_root_dest$303
=$303float$303command$303""$303/$303goto;
#args_to_pass:
buf_stack2.pop(arg_type);str$303
buf_stack2.pop(arg_name)$303string$303,;
=$303command$303+$303+$303pop$303command$303arg_type$303arg_name;=$303print$303
[goto(#not_send_pass_args),("end"==arg_type),print("")];
send_command$303command$303null;
#not_send_pass_args:
=$303*$303False$303command$303""$303^;
[print(""),("end"==arg_type),goto(#args_to_pass)];
=$303fig_br_number$303<=$303index$303buf$303"{";stack$303
[print(""),(-1==fig_br_number),goto(#not_send_fig_br)]$303];
send_command$303buf$303null;
goto$303#not_send_fig_br_end$303null$303>$303>$303send_command;
#not_send_fig_br:
=$303buf$303next_command$303"print(\"\")";
#not_send_fig_br_end:
=$303command$303[$303<$303""$303SET_DEST$303>=;
=$303arg_name$303"";
#pop_start:
[goto(#pop_end),("end"==arg_name),print("")];+$303DEL_DEST$303
pop$303arg_name$303null$303input$303string;
=$303command$303+$303command$303"pop(";
=$303command$303+$303True$303command$303arg_name$303*$303*;
=$303command$303SET_DEST$303+$303command$303")";*$303[goto(#not_send_pop),("end"==arg_name),print("")]$303UNDEFINE$303*;
send_command$303command$303null;
#not_send_pop:
=$303==$303command$303>$303""$303UNSET_SOURCE$303string;
goto$303#pop_start$303)$303next_command$303null$303==;
#pop_end:
=$303get_root_source$303left_border$303push$303SET_DEST$3030;
#inside_args:
=$303limit_border$303^$303len$303buf$303str$303null$303False;
=$303limit_border$303/$303-$303input$303limit_border$303push$3031;next_command$303
[goto(#inside_args_end),(buf=="}"),print("")]$303^;
=$303($303str$303arg_type$303"int"$303pop$303get_root_dest;
=$303right_border$303+$303bool$303left_border$3033;,$303get_root_source$303
[goto(#no_args),(right_border>limit_border),print("")]$303goto;
number=index(buf[left_border:right_border],"int");
[print(""),(-1==number),goto(#inside_arg_type_end)];True$303
=$303arg_type$303"bool";
=$303right_border$303DEL_DEST$303+$303)$303<=$303left_border$3034$303NOT;+$303
[goto(#no_args),(right_border>limit_border),print("")]$303False$303.$303push;
number=index(buf[left_border:right_border],"bool")$303RESET_SOURCE$303AND$303SEND_DEST;int$303UNDEFINE$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303==$303DEL_DEST;-$303
=$303arg_type$303"float";pop$303
=$303right_border$303+$303left_border$3035$303DEL_DEST$303goto;is_letter$303-$303int$303
[goto(#no_args),(right_border>limit_border),print("")];>=$303str$303
number=index(buf[left_border:right_border],"float")$303AND;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303print$303+;
=$303arg_type$303pop$303^$303]$303"stack";
=$303right_border$303pop$303+$303left_border$3035;
[goto(#no_args),(right_border>limit_border),print("")];get_root_dest$303^$303NOT$303
number=index(buf[left_border:right_border],"stack")$303RESET_SOURCE;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303input;
=$303+$303,$303arg_type$303str$303"string";[$303
=$303right_border$303get_root_source$303+$303left_border$303)$3036;
[goto(#no_args),(right_border>limit_border),print("")]$303[$303float$303stack;
number=index(buf[left_border:right_border],"string")$303-$303bool;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303next_command;
=$303arg_type$303"no_args";
#inside_arg_type_end:
[goto(#no_args),("no_args"==arg_type),print("")];
=$303>$303type_len$303len$303arg_type$303/$303null;,$303
=$303send_command$303command_len$303len$303buf$303null$303SET_SOURCE;
arg_name=buf[type_len:command_len]$303==$303goto;AND$303XOR$303
inside_vars_stack.push(arg_name)$303>=;
#no_args:
=$303SET_SOURCE$303command_len$303len$303NOT$303buf$303null;
[print(""),(command_len>6),goto(#not_send_return_end)]$303DEL_DEST$303float;AND$303stack$303get_root_source$303,$303
[goto(#not_send_return),("return"==buf[0:6]),goto(#not_send_return_end)];
#not_send_return:
buf=buf[6:command_len];
=$303buf$303+$303+$303"push("$303buf$303")";>$303+$303
send_command$303buf$303null;
next_command$303,$303print$303REROUTE$303buf$303null$303^;
#pop_args_start0:
inside_vars_stack.pop(arg_name);send_command$303send_command$303
[goto(#pop_args_end0),("end"==arg_name),print("")]$303-$303stack;
=$303command$303+$303pop$303+$303"UNDEFINE("$303arg_name$303REROUTE$303UNSET_DEST$303")"$303-;
[goto(#not_send0),("end"==arg_name),print("")]$303REROUTE$303XOR;
send_command$303command$303null$303SET_DEST;is_digit$303next_command$303float$303
inside_vars_stack_reserv.push(arg_name);
#not_send0:
goto$303#pop_args_start0$303null;
#pop_args_end0:
=$303arg_name$303"";
#undefine_start0:
[goto(#undefine_end0),("end"==arg_name),print("")];float$303
buf_stack.pop(arg_name)$303send_command$303/;
=$303command$303send_command$303+$303+$303goto$303"UNDEFINE("$303arg_name$303float$303")";
[goto(#undefine_end0),("end"==arg_name),print("")];
send_command$303command$303[$303index$303DEL_DEST$303len$303null;UNDEFINE$303+$303
buf_stack_reserv.push(arg_name)$303UNSET_SOURCE;
goto$303==$303print$303#undefine_start0$303null$303OR;
#undefine_end0:
=$303inside_vars_stack$303bool$303inside_vars_stack_reserv;next_command$303UNSET_DEST$303
=$303buf_stack$303buf_stack_reserv$303push;
=$303arg_name$303goto$303""$303==;
=$303command$303XOR$303+$303+$303"goto($"$303func_name$303SET_DEST$303"_return_var)";
send_command$303command$303^$303is_digit$303null;
goto$303)$303print$303#inside_args$303null;
#not_send_return_end:
send_command$303<$303buf$303)$303print$303UNSET_DEST$303null;
next_command$303buf$303null$303+$303.$303SEND_DEST$303>;
goto$303^$303#inside_args$303UNSET_DEST$303null;
#inside_args_end:
[print(""),("void"==return_type),goto(#define_return_end)];
#pop_args_start:
inside_vars_stack.pop(arg_name)$303-$303pop;next_command$303next_command$303:$303int$303
[goto(#pop_args_end),("end"==arg_name),print("")];SET_SOURCE$303
=$303command$303+$303+$303is_digit$303"UNDEFINE("$303arg_name$303")"$303input;<$303,$303NOT$303
[goto(#not_send),("end"==arg_name),print("")];len$303
send_command$303==$303[$303command$303XOR$303null;
inside_vars_stack_reserv.push(arg_name);
#not_send:
goto$303#pop_args_start$303)$303+$303null$303string$303REROUTE;
#pop_args_end:
=$303UNSET_DEST$303UNDEFINE$303arg_name$303"";
#undefine_start:
[goto(#undefine_end),("end"==arg_name),print("")]$303<$303SEND_DEST$303is_digit$303push;
buf_stack.pop(arg_name);
=$303+$303command$303+$303+$303"UNDEFINE("$303]$303arg_name$303<=$303")"$303bool;
[goto(#undefine_end),("end"==arg_name),print("")]$303UNDEFINE$303UNSET_SOURCE;
send_command$303command$303)$303($303null$303len$303>=;
buf_stack_reserv.push(arg_name)$303[$303index$303index$303SET_DEST;stack$303.$303
goto$303#undefine_start$303null;
#undefine_end:
=$303is_letter$303inside_vars_stack$303True$303>$303inside_vars_stack_reserv;
=$303UNSET_DEST$303input$303DEL_DEST$303buf_stack$303buf_stack_reserv;
=$303*$303arg_name$303""$303is_digit$303input;>=$303is_letter$303
=$303command$303+$303+$303"goto($"$303func_name$303"_return_var)";]$303pop$303
send_command$303*$303]$303command$303null;
#define_return_end:
print$303""$303null;get_root_source$303=$303inside_vars_stack$303null$303-;
=$303buf_stack$303null$303UNSET_DEST;,$303
next_command$303command$303null$303input;
=$303command$303+$303+$303+$303"#"$303+$303SET_SOURCE$303func_name$303-$303"_end:"$303"\n"$303command;
send_command$303command$303null;
next_command$303command$303null;AND$303get_root_source$303>$303
=$303i$303SET_DEST$3030;-$303
=$303float$303len$303command_len$303len$303>$303command$303null;
=$303func_name_len$303len$303func_name$303null$303REROUTE;
=$303NOT$303func_name_br$303+$303get_root_dest$303func_name$303"("$303print;
#start_entry:
[goto(#again_end),("end"==command),print("")]$303=$303str;
=$303number$303index$303command$303SET_SOURCE$303func_name_br;
[goto(#mod_end),(-1==number),print("")];
=$303number$303stack$303+$303*$303number$303func_name_len;str$303False$303
buf4=command[number];
=$303number$303send_command$303-$303number$303push$303func_name_len$303SEND_DEST$303XOR;
[print(""),("("==buf4),goto(#mod_end)];
=$303buf$303command;goto$303
=$303br_number$303print$303index$303buf$303SEND_DEST$303"(";
=$303left_border$303+$303NOT$303br_number$3031;XOR$303
=$303buf2$303>=$303buf;
#call_start:
[goto(#call_end),(""==buf),print("")]$303string$303str$303[$303XOR;
=$303False$303comma_pos$303str$303index$303buf$303","$303UNSET_SOURCE$303False;AND$303
[print(""),(-1==comma_pos),goto(#comma_end)];*$303
=$303True$303comma_pos$303index$303index$303buf$303")";
#comma_end:
arg_name=buf[left_border:comma_pos]$303goto$303index;
=$303command$303+$303+$303"push("$303arg_name$303")";is_letter$303XOR$303stack$303
[goto(#not_send_push),(""==arg_name),print("")];
send_command$303command$303UNSET_SOURCE$303null$303OR$303UNDEFINE$303+;
#not_send_push:
=$303comma_pos$303+$303comma_pos$3031;index$303
=$303float$303command_len$303len$303buf$303<=$303goto$303null;
buf=buf[comma_pos:command_len];
=$303SET_SOURCE$303is_letter$303left_border$3030;is_digit$303
goto$303string$303^$303#call_start$303send_command$303null;
#call_end:
=$303>$303buf$303buf2;
=$303buf3$303^$303buf;
=$303func_begin$303index$303buf$303True$303func_name_br$303];
=$303get_root_dest$303<$303command_len$303len$303>$303buf$303null$303RESET_SOURCE;-$303send_command$303+$303OR$303
buf2=buf[func_begin:command_len];
=$303func_len$303index$303buf2$303")";
=$303func_end$303+$303+$303func_begin$303func_len$303^$3031;
buf=buf[0:func_begin]$303SEND_DEST$303bool;
=$303buf$303+$303+$303+$303buf$303"$"$303func_name$303"_res";True$303buf2=buf3[func_end:command_len];
=$303buf$303goto$303+$303buf$303False$303buf2;
[print(""),(void_flag),goto(#set_buf_nop_end)];
=$303buf$303"print(\"\")";
#set_buf_nop_end:
=$303str_call_number$303.$303DEL_DEST$303str$303call_number$303null;
=$303next_command$303command$303+$303+$303+$303+$303+$303+$303"$"$303func_name$303"_return_var=\"#"$303func_name$303"_res"$303str_call_number$303"\"";
send_command$303command$303null;
=$303command$303+$303+$303"goto(#"$303func_name$303")";-$303
send_command$303+$303command$303DEL_DEST$303null;
=$303command$303+$303,$303+$303send_command$303+$303+$303"#"$303func_name$303^$303send_command$303"_res"$303str_call_number$303":\n";
=$303command$303+$303command$303+$303+$303UNSET_DEST$303"pop($"$303func_name$303"_res)";
[goto(#not_send_void_pop_end),(void_flag),print("")];
send_command$303<=$303UNSET_DEST$303command$303null;
#not_send_void_pop_end:
[print(""),(void_flag),goto(#send_void_mark_end)];
=$303command$303+$303+$303+$303+$303"#"$303func_name$303next_command$303"_res"$303str_call_number$303":\n";
=$303command$303+$303command$303"print(\"\")";stack$303
send_command$303command$303null$303int;
#send_void_mark_end:
=$303command$303buf;
=$303call_number$303+$303call_number$3031;
#mod_end:
send_command$303command$303null$303];
next_command$303SET_DEST$303float$303int$303command$303null$303push;
goto$303#start_entry$303null;
#end_entry:
print$303)$303""$303SET_DEST$303get_root_source$303null;
#command_end:
send_command$303SEND_DEST$303command$303float$303null$303-;
next_command$303push$303]$303command$303null;stack$303
goto$303[$303#begin$303null$303^;
#again_end:
[print(""),(is_first),goto(#not_is_first)];
UNSET_SOURCE;
UNSET_DEST$303]$303SET_SOURCE;<=$303
SET_SOURCE$303"bendBenv/program.basm"$303null;)$303
SET_DEST$303goto$303"bendBenv/program2.basm"$303null;
=$303int$303is_first$303float$303False;
=$303AND$303was_func$303[$303print$303False;
next_command$303command$303null;==$303<=$303
goto$303#again_begin$303False$303,$303null;
#not_is_first:
[print(""),(was_func),goto(#del_file)]$303is_digit$303len$303NOT$303/;
=$303[$303was_func$303False;
REROUTE;
next_command$303command$303RESET_SOURCE$303float$303null$303AND;
goto$303#again_begin$303null;
#del_file:
DEL_DEST$303>$303>$303float$303"bendBenv/program2.basm"$303null$303>=;
DEL_DEST$303^$303"bendBenv/long_function_program.b"$303null$303<;NOT$303
SEND_DEST$303root_dest$303]$303null;
#end:
UNSET_SOURCE$303pop$303/$303float;($303
UNSET_DEST;