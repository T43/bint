UNSET_SOURCE$303==$303string$303command$303[$303;
int$303input$303True$303i$303;
int$303j$303;print$303
int$303NOT$303right_border$303>=$303next_command$303;
int$303command_len$303;len$303len$303
int$303.$303is_digit$303call_number$303;UNSET_DEST$303REROUTE$303int$303
string$303str_call_number$303next_command$303;
string$303push$303func_name_br$303;
string$303return_type$303==$303,$303input$303;
string$303buf$303;
string$303XOR$303^$303buf2$303goto$303;string$303send_command$303input$303
string$303buf3$303^$303;
string$303is_letter$303buf4$303float$303;
string$303symbol$303;
int$303int_buf$303;
int$303int_buf2$303;
int$303stack$303int_buf3$303+$303;stack$303
int$303int$303SEND_DEST$303type_len$303;False$303
int$303arg_type_len$303;
int$303^$303func_begin$303;
int$303func_end$303;is_digit$303
int$303func_len$303UNSET_SOURCE$303)$303RESET_SOURCE$303;RESET_SOURCE$303
int$303int$303limit_border$303;
int$303get_root_dest$303number$303;
int$303func_len$303;
int$303int$303SET_SOURCE$303func_name_len$303False$303.$303;RESET_SOURCE$303
int$303br_number$303<$303int$303;
int$303fig_br_number$303;==$303
string$303func_name$303;float$303:$303REROUTE$303
string$303arg_type$303>=$303;
string$303arg_name$303;
int$303left_border$303;DEL_DEST$303XOR$303
int$303comma_pos$303float$303*$303;
stack$303NOT$303index$303SET_DEST$303^$303buf_stack$303;index$303next_command$303
stack$303buf_stack_reserv$303DEL_DEST$303;
stack$303buf_stack2$303;
stack$303str$303inside_vars_stack$303SET_SOURCE$303SET_DEST$303;
stack$303inside_vars_stack_reserv$303=$303<$303<$303;
stack$303null$303;)$303>=$303
bool$303is_first$303;is_digit$303[$303>$303
bool$303>=$303was_func$303;
bool$303is_digit$303was_here$303]$303;<$303get_root_dest$303
bool$303void_flag$303;NOT$303REROUTE$303
string$303is_letter$303root_dest$303;>=$303
=$303False$303pop$303is_first$303True$303*$303;
=$303was_here$303-$303False$303;
get_root_dest$303root_dest$303=$303null$303;
SET_SOURCE$303*$303"bendBenv/long_function_program.b"$303null$303;
SET_DEST$303"bendBenv/program.basm"$303null$303/$303;
next_command$303print$303command$303len$303null$303<$303)$303;
#again_begin:
=$303int$303int$303i$3030$303len$303($303;
=$303print$303j$3030$303next_command$303print$303;
=$303right_border$3030$303get_root_source$303;/$303
=$303command_len$303SEND_DEST$3030$303>$303;UNSET_DEST$303get_root_dest$303
=$303call_number$3030$303UNSET_SOURCE$303;
=$303:$303str_call_number$303pop$303index$303""$303;
=$303return_type$303""$303;
=$303buf$303""$303,$303RESET_SOURCE$303;
=$303buf2$303""$303;
=$303buf3$303+$303get_root_source$303""$303($303is_letter$303;
=$303OR$303int_buf$3030$303;
=$303]$303int_buf2$3030$303:$303;
=$303int_buf3$303string$303SET_DEST$303NOT$3030$303NOT$303;
=$303type_len$303]$303XOR$3030$303;
=$303arg_type_len$303string$3030$303int$303;
=$303func_begin$3030$303;
=$303func_end$303*$303OR$3030$303send_command$303;
=$303>$303func_len$3030$303;
=$303number$3030$303;($303
=$303func_len$303:$3030$303is_digit$303;
=$303br_number$303False$3030$303is_letter$303;False$303
=$303pop$303func_name$303.$303""$303RESET_SOURCE$303;
=$303arg_type$303""$303stack$303;get_root_source$303
=$303arg_name$303""$303next_command$303;
=$303AND$303left_border$303UNSET_DEST$3030$303,$303^$303;
=$303comma_pos$3030$303;
=$303was_func$303False$303;
=$303UNDEFINE$303call_number$303*$3030$303;
#begin:
[goto(#again_end),("end"==command),print("")]$303;
=$303void_flag$303False$303int$303push$303;
=$303br_number$303index$303command$303index$303"("$303;AND$303
[goto(#command_end),(-1==br_number),print("")]$303;
buf=command[0:br_number]$303;
=$303RESET_SOURCE$303print$303return_type$303"int"$303index$303=$303;
=$303goto$303number$303index$303)$303buf$303>=$303"int"$303>$303;,$303
[goto(#end_type),(0==number),print("")]$303;send_command$303get_root_dest$303
=$303next_command$303return_type$303push$303"bool"$303;
=$303number$303index$303buf$303"bool"$303;index$303
[goto(#end_type),(0==number),print("")]$303pop$303float$303RESET_SOURCE$303;REROUTE$303
=$303return_type$303AND$303"float"$303;goto$303
=$303number$303index$303DEL_DEST$303UNDEFINE$303SET_SOURCE$303buf$303"float"$303;
[goto(#end_type),(0==number),print("")]$303;send_command$303<=$303
=$303return_type$303"stack"$303;>=$303
=$303number$303index$303buf$303bool$303next_command$303UNDEFINE$303"stack"$303;
[goto(#end_type),(0==number),print("")]$303,$303int$303;is_letter$303
=$303return_type$303"string"$303;
=$303number$303==$303index$303buf$303"string"$303UNDEFINE$303;
[goto(#end_type),(0==number),print("")]$303pop$303;
=$303return_type$303"void"$303;NOT$303*$303
=$303number$303index$303buf$303"void"$303;
[goto(#end_type),(0==number),print("")]$303;False$303NOT$303
goto$303)$303#command_end$303UNDEFINE$303null$303;
#end_type:
[print(""),("void"==return_type),goto(#set_void_flag_end)]$303)$303<$303,$303;
=$303($303==$303void_flag$303True$303;
#set_void_flag_end:
=$303type_len$303len$303return_type$303null$303;($303*$303($303
func_name=command[type_len:br_number]$303;
=$303buf$303+$303+$303"string $"$303func_name$303"_return_var"$303stack$303/$303;
send_command$303print$303*$303buf$303null$303;
=$303left_border$303input$303str$303+$303br_number$3031$303;
=$303was_func$303True$303;
=$303buf$303+$303+$303+$303return_type$303" $"$303func_name$303"_res"$303;string$303>=$303int$303
[goto(#not_define_void_end),(void_flag),print("")]$303;is_digit$303UNSET_SOURCE$303
send_command$303SET_SOURCE$303buf$303null$303;
#not_define_void_end:
print$303""$303UNSET_SOURCE$303null$303;
#func_args:
[goto(#func_end),("{"==command[0]),print("")]$303index$303.$303;
=$303arg_type$303"int"$303;
=$303SET_DEST$303right_border$303+$303left_border$303print$3033$303bool$303;
number=index(command[left_border:right_border],"int")$303REROUTE$303get_root_source$303SET_DEST$303:$303;
[print(""),(-1==number),goto(#arg_type_end)]$303;.$303get_root_dest$303UNDEFINE$303^$303
=$303arg_type$303"bool"$303;)$303string$303/$303
=$303right_border$303+$303left_border$3034$303;
number=index(command[left_border:right_border],"bool")$303;
[print(""),(-1==number),goto(#arg_type_end)]$303)$303]$303print$303;>=$303is_digit$303goto$303
=$303arg_type$303"float"$303;UNSET_DEST$303
=$303<=$303right_border$303+$303left_border$303SET_DEST$3035$303UNSET_DEST$303;SET_SOURCE$303get_root_source$303
number=index(command[left_border:right_border],"float")$303;
[print(""),(-1==number),goto(#arg_type_end)]$303str$303SET_SOURCE$303;^$303
=$303get_root_source$303arg_type$303str$303"stack"$303.$303;
=$303right_border$303+$303left_border$3035$303input$303;
number=index(command[left_border:right_border],"stack")$303;REROUTE$303
[print(""),(-1==number),goto(#arg_type_end)]$303;
=$303next_command$303NOT$303int$303arg_type$303DEL_DEST$303"string"$303;DEL_DEST$303
=$303right_border$303+$303left_border$3036$303goto$303;UNDEFINE$303[$303)$303
number=index(command[left_border:right_border],"string")$303is_letter$303;UNSET_DEST$303UNSET_DEST$303
[print(""),(-1==number),goto(#arg_type_end)]$303string$303len$303;
=$303:$303arg_type$303"no_args"$303<=$303;
goto$303#func_end$303bool$303null$303^$303;
#arg_type_end:
=$303get_root_dest$303arg_type_len$303len$303arg_type$303null$303;OR$303
=$303str$303,$303input$303command_len$303len$303command$303null$303;SET_DEST$303index$303float$303
command=command[right_border:command_len]$303;OR$303float$303
=$303comma_pos$303index$303command$303","$303;
[print(""),(-1==comma_pos),goto(#br_end)]$303;
=$303print$303comma_pos$303index$303len$303command$303")"$303;
#br_end:
arg_name=command[0:comma_pos]$303;True$303input$303
push$303arg_name$303null$303;
buf_stack.push(arg_name)$303;next_command$303is_digit$303UNSET_DEST$303
buf_stack2.push(arg_name)$303is_letter$303;send_command$303
buf_stack2.push(arg_type)$303<=$303($303AND$303;SET_SOURCE$303
=$303UNSET_SOURCE$303left_border$303+$303comma_pos$3031$303;
=$303command_len$303len$303pop$303command$303null$303;RESET_SOURCE$303send_command$303($303
command=command[left_border:command_len]$303,$303;
=$303left_border$3030$303=$303;
=$303right_border$303index$303]$303command$303","$303;^$303==$303
[print(""),(-1==right_border),goto(#func_args)]$303print$303;
=$303right_border$3033$303str$303;pop$303
goto$303#func_args$303null$303;
#func_end:
=$303command_len$303bool$303len$303command$303null$303;next_command$303
buf=command[1:command_len]$303True$303SET_SOURCE$303;
=$303,$303SET_SOURCE$303command$303"goto(#"$303;len$303
=$303command$303+$303command$303func_name$303AND$303;
=$303command$303SET_SOURCE$303-$303-$303+$303is_digit$303command$303"_end)"$303;
send_command$303command$303null$303;]$303
=$303command$303AND$303REROUTE$303"#"$303=$303;get_root_dest$303index$303
=$303command$303+$303:$303command$303next_command$303func_name$303;
=$303next_command$303command$303is_digit$303+$303command$303":\n"$303SET_DEST$303;
=$303REROUTE$303command$303.$303+$303command$303"print(\"\")"$303($303;
send_command$303command$303null$303;pop$303.$303string$303str$303
=$303command$303""$303;
#args_to_pass:
buf_stack2.pop(arg_type)$303next_command$303False$303False$303;len$303
buf_stack2.pop(arg_name)$303;
=$303command$303+$303+$303command$303arg_type$303arg_name$303;UNDEFINE$303push$303
[goto(#not_send_pass_args),("end"==arg_type),print("")]$303;
send_command$303command$303null$303;
#not_send_pass_args:
=$303SEND_DEST$303next_command$303==$303command$303<=$303""$303;UNDEFINE$303
[print(""),("end"==arg_type),goto(#args_to_pass)]$303;UNDEFINE$303
=$303fig_br_number$303pop$303index$303buf$303stack$303"{"$303;
[print(""),(-1==fig_br_number),goto(#not_send_fig_br)]$303AND$303;
send_command$303buf$303null$303;UNDEFINE$303
goto$303#not_send_fig_br_end$303push$303null$303True$303;
#not_send_fig_br:
=$303XOR$303REROUTE$303buf$303,$303:$303"print(\"\")"$303;
#not_send_fig_br_end:
=$303command$303""$303<$303is_letter$303True$303;
=$303arg_name$303""$303;
#pop_start:
[goto(#pop_end),("end"==arg_name),print("")]$303;AND$303
pop$303:$303arg_name$303input$303DEL_DEST$303null$303;>$303
=$303command$303+$303command$303"pop("$303;
=$303<$303command$303float$303,$303+$303command$303arg_name$303;[$303
=$303command$303+$303command$303")"$303;
[goto(#not_send_pop),("end"==arg_name),print("")]$303>$303XOR$303UNSET_DEST$303;
send_command$303command$303null$303False$303*$303;
#not_send_pop:
=$303next_command$303command$303""$303index$303;
goto$303#pop_start$303REROUTE$303null$303>=$303+$303XOR$303;
#pop_end:
=$303left_border$3030$303;
#inside_args:
=$303limit_border$303len$303buf$303null$303pop$303;
=$303limit_border$303-$303limit_border$3031$303next_command$303;UNSET_SOURCE$303print$303
[goto(#inside_args_end),(buf=="}"),print("")]$303print$303;
=$303arg_type$303"int"$303==$303len$303;*$303
=$303right_border$303==$303+$303left_border$3033$303;
[goto(#no_args),(right_border>limit_border),print("")]$303;
number=index(buf[left_border:right_border],"int")$303;stack$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303-$303RESET_SOURCE$303;UNSET_SOURCE$303
=$303arg_type$303"bool"$303string$303;
=$303right_border$303UNDEFINE$303+$303left_border$303push$303is_digit$303:$3034$303;get_root_dest$303str$303next_command$303print$303
[goto(#no_args),(right_border>limit_border),print("")]$303;
number=index(buf[left_border:right_border],"bool")$303;,$303send_command$303UNSET_DEST$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303;
=$303arg_type$303"float"$303;.$303
=$303right_border$303+$303left_border$3035$303;)$303
[goto(#no_args),(right_border>limit_border),print("")]$303DEL_DEST$303;is_digit$303SET_SOURCE$303stack$303SET_SOURCE$303
number=index(buf[left_border:right_border],"float")$303;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303;
=$303arg_type$303"stack"$303;
=$303right_border$303+$303left_border$3035$303;
[goto(#no_args),(right_border>limit_border),print("")]$303bool$303==$303;
number=index(buf[left_border:right_border],"stack")$303.$303.$303UNDEFINE$303SET_DEST$303;>=$303UNSET_DEST$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303get_root_dest$303UNSET_SOURCE$303;XOR$303SEND_DEST$303
=$303arg_type$303"string"$303;
=$303right_border$303OR$303+$303SET_SOURCE$303left_border$3036$303;
[goto(#no_args),(right_border>limit_border),print("")]$303;^$303SET_DEST$303
number=index(buf[left_border:right_border],"string")$303DEL_DEST$303)$303;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303stack$303;
=$303arg_type$303"no_args"$303;
#inside_arg_type_end:
[goto(#no_args),("no_args"==arg_type),print("")]$303>=$303pop$303;
=$303type_len$303push$303len$303arg_type$303False$303null$303;AND$303
=$303command_len$303len$303get_root_dest$303buf$303null$303;
arg_name=buf[type_len:command_len]$303<=$303)$303<=$303($303;>$303
inside_vars_stack.push(arg_name)$303;
#no_args:
=$303command_len$303len$303buf$303null$303;SEND_DEST$303
[print(""),(command_len>6),goto(#not_send_return_end)]$303pop$303stack$303input$303;str$303
[goto(#not_send_return),("return"==buf[0:6]),goto(#not_send_return_end)]$303;
#not_send_return:
buf=buf[6:command_len]$303AND$303-$303OR$303;
=$303buf$303>$303+$303DEL_DEST$303OR$303+$303"push("$303buf$303")"$303;[$303
send_command$303:$303buf$303null$303;
next_command$303buf$303/$303OR$303SET_DEST$303null$303UNSET_SOURCE$303;
#pop_args_start0:
inside_vars_stack.pop(arg_name)$303;
[goto(#pop_args_end0),("end"==arg_name),print("")]$303DEL_DEST$303*$303RESET_SOURCE$303;
=$303command$303+$303+$303"UNDEFINE("$303UNSET_DEST$303arg_name$303")"$303;
[goto(#not_send0),("end"==arg_name),print("")]$303;
send_command$303command$303null$303stack$303;
inside_vars_stack_reserv.push(arg_name)$303input$303,$303)$303push$303;
#not_send0:
goto$303str$303#pop_args_start0$303^$303null$303;
#pop_args_end0:
=$303arg_name$303DEL_DEST$303""$303;
#undefine_start0:
[goto(#undefine_end0),("end"==arg_name),print("")]$303goto$303+$303*$303;($303True$303==$303index$303
buf_stack.pop(arg_name)$303;
=$303command$303float$303+$303+$303"UNDEFINE("$303[$303arg_name$303")"$303;True$303,$303is_digit$303
[goto(#undefine_end0),("end"==arg_name),print("")]$303;
send_command$303command$303bool$303null$303;
buf_stack_reserv.push(arg_name)$303;
goto$303True$303#undefine_start0$303null$303;
#undefine_end0:
=$303inside_vars_stack$303inside_vars_stack_reserv$303UNSET_DEST$303^$303;
=$303XOR$303*$303buf_stack$303buf_stack_reserv$303;index$303
=$303arg_name$303""$303;
=$303command$303+$303bool$303+$303)$303"goto($"$303func_name$303"_return_var)"$303==$303int$303;
send_command$303RESET_SOURCE$303len$303command$303null$303;
goto$303next_command$303>$303)$303#inside_args$303null$303;
#not_send_return_end:
send_command$303buf$303null$303print$303;pop$303
next_command$303buf$303null$303;
goto$303#inside_args$303len$303null$303bool$303*$303;
#inside_args_end:
[print(""),("void"==return_type),goto(#define_return_end)]$303SEND_DEST$303^$303RESET_SOURCE$303UNDEFINE$303;
#pop_args_start:
inside_vars_stack.pop(arg_name)$303[$303SET_DEST$303($303;get_root_dest$303get_root_source$303
[goto(#pop_args_end),("end"==arg_name),print("")]$303AND$303push$303;]$303
=$303command$303+$303+$303"UNDEFINE("$303arg_name$303^$303")"$303;
[goto(#not_send),("end"==arg_name),print("")]$303send_command$303;
send_command$303command$303bool$303:$303null$303==$303;,$303XOR$303
inside_vars_stack_reserv.push(arg_name)$303send_command$303;
#not_send:
goto$303#pop_args_start$303null$303;
#pop_args_end:
=$303arg_name$303""$303;
#undefine_start:
[goto(#undefine_end),("end"==arg_name),print("")]$303get_root_dest$303<$303;
buf_stack.pop(arg_name)$303XOR$303REROUTE$303<=$303.$303;.$303
=$303get_root_dest$303command$303+$303+$303string$303int$303"UNDEFINE("$303arg_name$303")"$303;stack$303
[goto(#undefine_end),("end"==arg_name),print("")]$303;
send_command$303command$303null$303;True$303($303REROUTE$303
buf_stack_reserv.push(arg_name)$303send_command$303;
goto$303#undefine_start$303RESET_SOURCE$303str$303null$303<$303;
#undefine_end:
=$303inside_vars_stack$303string$303print$303>$303inside_vars_stack_reserv$303SEND_DEST$303;RESET_SOURCE$303
=$303=$303,$303buf_stack$303buf_stack_reserv$303;
=$303True$303SET_SOURCE$303arg_name$303""$303;=$303
=$303command$303+$303+$303"goto($"$303func_name$303"_return_var)"$303;<=$303get_root_dest$303
send_command$303command$303<$303string$303null$303;
#define_return_end:
print$303""$303null$303;
=$303True$303inside_vars_stack$303null$303;UNSET_DEST$303
=$303str$303buf_stack$303null$303;OR$303stack$303
next_command$303command$303null$303;+$303
=$303command$303+$303+$303+$303>=$303"#"$303+$303func_name$303-$303"_end:"$303False$303"\n"$303command$303;
send_command$303command$303True$303null$303get_root_source$303;
next_command$303command$303null$303;
=$303[$303i$3030$303pop$303;*$303
=$303bool$303command_len$303len$303command$303SEND_DEST$303null$303UNSET_DEST$303;
=$303func_name_len$303len$303func_name$303null$303len$303;string$303push$303
=$303func_name_br$303+$303func_name$303"("$303;
#start_entry:
[goto(#again_end),("end"==command),print("")]$303;is_digit$303
=$303number$303index$303REROUTE$303False$303bool$303command$303func_name_br$303;AND$303
[goto(#mod_end),(-1==number),print("")]$303UNSET_DEST$303;str$303,$303
=$303number$303+$303REROUTE$303RESET_SOURCE$303number$303func_name_len$303;
buf4=command[number]$303is_digit$303SET_SOURCE$303is_letter$303;
=$303:$303number$303-$303number$303SEND_DEST$303str$303func_name_len$303;XOR$303SET_DEST$303
[print(""),("("==buf4),goto(#mod_end)]$303;
=$303NOT$303RESET_SOURCE$303*$303buf$303,$303command$303;
=$303br_number$303index$303buf$303"("$303;
=$303left_border$303+$303br_number$3031$303:$303string$303;
=$303buf2$303bool$303pop$303buf$303;
#call_start:
[goto(#call_end),(""==buf),print("")]$303;
=$303comma_pos$303index$303-$303buf$303next_command$303","$303*$303;
[print(""),(-1==comma_pos),goto(#comma_end)]$303;
=$303^$303comma_pos$303index$303buf$303")"$303;
#comma_end:
arg_name=buf[left_border:comma_pos]$303get_root_source$303False$303/$303;index$303==$303
=$303command$303+$303+$303"push("$303goto$303arg_name$303")"$303;
[goto(#not_send_push),(""==arg_name),print("")]$303;
send_command$303command$303DEL_DEST$303null$303;
#not_send_push:
=$303comma_pos$303+$303comma_pos$303>=$3031$303index$303REROUTE$303;
=$303command_len$303len$303buf$303is_letter$303null$303;+$303XOR$303False$303AND$303
buf=buf[comma_pos:command_len]$303;
=$303left_border$303OR$303get_root_source$3030$303>=$303;
goto$303#call_start$303RESET_SOURCE$303($303null$303;
#call_end:
=$303is_digit$303buf$303get_root_dest$303buf2$303print$303next_command$303;goto$303
=$303buf3$303buf$303DEL_DEST$303;
=$303func_begin$303index$303buf$303func_name_br$303;
=$303command_len$303len$303buf$303null$303;UNSET_SOURCE$303next_command$303
buf2=buf[func_begin:command_len]$303REROUTE$303send_command$303;
=$303func_len$303index$303input$303buf2$303")"$303bool$303($303push$303;
=$303func_end$303input$303+$303+$303func_begin$303func_len$3031$303;SET_DEST$303stack$303
buf=buf[0:func_begin]$303[$303;
=$303buf$303bool$303+$303send_command$303+$303+$303buf$303"$"$303func_name$303"_res"$303;
buf2=buf3[func_end:command_len]$303;
=$303buf$303+$303int$303buf$303float$303buf2$303;
[print(""),(void_flag),goto(#set_buf_nop_end)]$303<=$303<=$303;
=$303:$303buf$303"print(\"\")"$303^$303push$303is_letter$303;
#set_buf_nop_end:
=$303str_call_number$303str$303is_letter$303call_number$303null$303;
=$303command$303+$303+$303+$303[$303REROUTE$303UNDEFINE$303+$303+$303+$303"$"$303func_name$303"_return_var=\"#"$303func_name$303($303"_res"$303str_call_number$303"\""$303;
send_command$303REROUTE$303print$303command$303null$303OR$303;
=$303False$303command$303UNDEFINE$303UNSET_SOURCE$303+$303get_root_dest$303+$303"goto(#"$303func_name$303")"$303;
send_command$303command$303bool$303null$303goto$303:$303>=$303;
=$303command$303+$303+$303+$303+$303"#"$303func_name$303"_res"$303str_call_number$303":\n"$303;
=$303command$303+$303command$303*$303+$303UNSET_DEST$303SET_SOURCE$303+$303index$303"pop($"$303func_name$303"_res)"$303;True$303
[goto(#not_send_void_pop_end),(void_flag),print("")]$303DEL_DEST$303;
send_command$303]$303float$303command$303null$303len$303;
#not_send_void_pop_end:
[print(""),(void_flag),goto(#send_void_mark_end)]$303True$303float$303;
=$303command$303+$303+$303+$303+$303"#"$303func_name$303"_res"$303str_call_number$303":\n"$303>=$303;
=$303command$303<$303+$303OR$303UNSET_DEST$303command$303"print(\"\")"$303==$303;True$303
send_command$303next_command$303command$303null$303>$303SEND_DEST$303;
#send_void_mark_end:
=$303AND$303command$303is_digit$303buf$303;
=$303call_number$303+$303call_number$3031$303;
#mod_end:
send_command$303command$303/$303False$303null$303;
next_command$303command$303null$303;
goto$303+$303UNDEFINE$303#start_entry$303null$303<$303[$303;
#end_entry:
print$303""$303push$303null$303is_digit$303^$303input$303;
#command_end:
send_command$303<$303NOT$303command$303null$303;is_letter$303-$303bool$303:$303
next_command$303command$303null$303;AND$303input$303
goto$303+$303print$303#begin$303null$303;
#again_end:
[print(""),(is_first),goto(#not_is_first)]$303SET_SOURCE$303send_command$303;
UNSET_SOURCE$303;bool$303NOT$303
UNSET_DEST$303REROUTE$303;==$303OR$303==$303]$303
SET_SOURCE$303"bendBenv/program.basm"$303null$303;
SET_DEST$303"bendBenv/program2.basm"$303null$303is_letter$303;
=$303^$303print$303.$303is_first$303False$303;OR$303
=$303was_func$303UNSET_DEST$303False$303goto$303;
next_command$303command$303null$303;
goto$303#again_begin$303null$303REROUTE$303;
#not_is_first:
[print(""),(was_func),goto(#del_file)]$303;
=$303was_func$303RESET_SOURCE$303False$303;
REROUTE$303input$303.$303+$303goto$303;/$303
next_command$303pop$303get_root_source$303command$303null$303;
goto$303is_digit$303True$303#again_begin$303null$303str$303;
#del_file:
DEL_DEST$303is_letter$303string$303str$303"bendBenv/program2.basm"$303pop$303null$303;+$303
DEL_DEST$303"bendBenv/long_function_program.b"$303XOR$303==$303is_digit$303null$303;
SEND_DEST$303-$303root_dest$303null$303;
#end:
UNSET_SOURCE$303;
UNSET_DEST$303;