>$303string$303len$303command$303($303;RESET_SOURCE$303
int$303i$303;
int$303DEL_DEST$303input$303j$303;
int$303right_border$303;]$303
int$303string$303<=$303command_len$303^$303;
int$303str$303len$303call_number$303;string$303False$303SEND_DEST$303^$303<$303str_call_number$303;
string$303:$303SEND_DEST$303int$303func_name_br$303;
string$303return_type$303;
string$303buf$303push$303NOT$303;
string$303buf2$303;
string$303buf3$303;)$303
string$303buf4$303RESET_SOURCE$303+$303UNDEFINE$303;OR$303
string$303>=$303symbol$303SEND_DEST$303;
int$303index$303>$303AND$303int_buf$303;send_command$303REROUTE$303<=$303
int$303int_buf2$303RESET_SOURCE$303;
int$303*$303int_buf3$303NOT$303;+$303
int$303type_len$303;
int$303.$303arg_type_len$303*$303;
int$303func_begin$303string$303;==$303UNSET_DEST$303
int$303func_end$303>=$303;
int$303<=$303is_digit$303func_len$303;float$303<=$303
int$303is_digit$303-$303limit_border$303;get_root_source$303
int$303NOT$303number$303;
int$303/$303XOR$303-$303func_len$303^$303;get_root_source$303
int$303is_letter$303func_name_len$303;
int$303br_number$303;
int$303fig_br_number$303UNSET_DEST$303;NOT$303push$303
string$303func_name$303DEL_DEST$303;
string$303arg_type$303;index$303index$303
string$303($303arg_name$303=$303;
int$303left_border$303;==$303^$303+$303
int$303comma_pos$303;==$303($303
stack$303index$303buf_stack$303UNSET_DEST$303;
stack$303len$303int$303buf_stack_reserv$303;
stack$303RESET_SOURCE$303buf_stack2$303print$303;
stack$303inside_vars_stack$303push$303;
stack$303=$303inside_vars_stack_reserv$303,$303NOT$303;str$303
stack$303null$303stack$303;goto$303
bool$303is_first$303UNSET_SOURCE$303;
bool$303was_func$303SET_SOURCE$303;
bool$303[$303was_here$303;
bool$303void_flag$303UNDEFINE$303OR$303;send_command$303False$303-$303
string$303root_dest$303;
=$303is_first$303True$303bool$303;input$303DEL_DEST$303index$303
=$303print$303was_here$303False$303;
get_root_dest$303:$303False$303root_dest$303>=$303<=$303null$303;
SET_SOURCE$303is_letter$303"bendBenv/long_function_program.b"$303null$303push$303;]$303
SET_DEST$303"bendBenv/program.basm"$303get_root_dest$303null$303;
next_command$303command$303UNDEFINE$303SEND_DEST$303null$303:$303next_command$303;
#again_begin:
=$303SEND_DEST$303len$303i$3030$303($303OR$303;
=$303j$3030$303;
=$303right_border$303==$3030$303UNSET_DEST$303;SEND_DEST$303
=$303command_len$3030$303REROUTE$303;RESET_SOURCE$303
=$303call_number$3030$303DEL_DEST$303;UNDEFINE$303
=$303str_call_number$303int$303""$303;
=$303>=$303return_type$303""$303get_root_dest$303<=$303SEND_DEST$303;
=$303buf$303get_root_source$303==$303($303""$303;
=$303^$303buf2$303""$303-$303;
=$303buf3$303""$303UNSET_DEST$303;pop$303
=$303int_buf$303UNSET_DEST$303stack$3030$303is_letter$303;=$303UNDEFINE$303int_buf2$303string$303pop$303DEL_DEST$3030$303;
=$303int_buf3$3030$303;
=$303type_len$3030$303AND$303;
=$303^$303True$303arg_type_len$3030$303bool$303;NOT$303
=$303func_begin$303]$303[$3030$303;
=$303func_end$3030$303;
=$303func_len$3030$303;print$303
=$303number$303^$3030$303/$303;)$303
=$303func_len$303print$3030$303;print$303
=$303br_number$3030$303pop$303;print$303
=$303func_name$303""$303;
=$303push$303arg_type$303""$303;send_command$303
=$303UNDEFINE$303:$303arg_name$303is_digit$303""$303;
=$303left_border$3030$303goto$303;XOR$303[$303
=$303False$303comma_pos$3030$303;bool$303False$303SET_SOURCE$303
=$303was_func$303False$303is_digit$303;
=$303call_number$3030$303int$303OR$303print$303AND$303;
#begin:
[goto(#again_end),("end"==command),print("")]$303<$303True$303index$303UNDEFINE$303;
=$303float$303void_flag$303False$303;
=$303*$303br_number$303.$303index$303command$303float$303push$303"("$303;print$303get_root_source$303
[goto(#command_end),(-1==br_number),print("")]$303;
buf=command[0:br_number]$303;send_command$303
=$303RESET_SOURCE$303[$303return_type$303"int"$303;
=$303number$303index$303buf$303get_root_source$303"int"$303;
[goto(#end_type),(0==number),print("")]$303;
=$303return_type$303"bool"$303;
=$303number$303UNSET_SOURCE$303index$303buf$303"bool"$303;
[goto(#end_type),(0==number),print("")]$303;print$303
=$303return_type$303+$303"float"$303;.$303OR$303=$303number$303index$303buf$303"float"$303;
[goto(#end_type),(0==number),print("")]$303print$303SET_SOURCE$303next_command$303;
=$303return_type$303"stack"$303;get_root_source$303^$303NOT$303
=$303number$303index$303buf$303"stack"$303;bool$303
[goto(#end_type),(0==number),print("")]$303;
=$303return_type$303goto$303"string"$303goto$303;False$303UNSET_SOURCE$303
=$303number$303print$303index$303buf$303.$303"string"$303;
[goto(#end_type),(0==number),print("")]$303NOT$303REROUTE$303NOT$303;==$303
=$303return_type$303len$303"void"$303<=$303REROUTE$303;
=$303number$303pop$303UNDEFINE$303index$303<$303buf$303"void"$303<$303;($303len$303=$303
[goto(#end_type),(0==number),print("")]$303print$303;
goto$303#command_end$303is_digit$303RESET_SOURCE$303null$303;
#end_type:
[print(""),("void"==return_type),goto(#set_void_flag_end)]$303;
=$303void_flag$303True$303;
#set_void_flag_end:
=$303SET_SOURCE$303type_len$303len$303return_type$303goto$303null$303OR$303;is_letter$303get_root_dest$303
func_name=command[type_len:br_number]$303;
=$303buf$303+$303+$303"string $"$303str$303($303<$303func_name$303"_return_var"$303;
send_command$303str$303buf$303len$303null$303UNSET_DEST$303;,$303
=$303left_border$303+$303br_number$303NOT$3031$303;
=$303was_func$303True$303;
=$303($303print$303buf$303+$303+$303UNDEFINE$303+$303return_type$303" $"$303func_name$303"_res"$303UNSET_DEST$303;
[goto(#not_define_void_end),(void_flag),print("")]$303<$303bool$303AND$303;
send_command$303buf$303UNDEFINE$303print$303pop$303null$303;
#not_define_void_end:
print$303""$303null$303DEL_DEST$303;
#func_args:
[goto(#func_end),("{"==command[0]),print("")]$303;
=$303>=$303arg_type$303>$303"int"$303;
=$303($303right_border$303+$303stack$303left_border$3033$303;
number=index(command[left_border:right_border],"int")$303]$303>$303;True$303push$303AND$303=$303
[print(""),(-1==number),goto(#arg_type_end)]$303;
=$303arg_type$303"bool"$303;
=$303right_border$303DEL_DEST$303>$303+$303left_border$3034$303;^$303
number=index(command[left_border:right_border],"bool")$303)$303next_command$303DEL_DEST$303;
[print(""),(-1==number),goto(#arg_type_end)]$303;.$303index$303OR$303*$303
=$303arg_type$303"float"$303;NOT$303is_digit$303
=$303right_border$303+$303left_border$303>$3035$303;push$303get_root_source$303=$303float$303
number=index(command[left_border:right_border],"float")$303;
[print(""),(-1==number),goto(#arg_type_end)]$303,$303;
=$303arg_type$303"stack"$303;
=$303right_border$303UNDEFINE$303UNDEFINE$303+$303left_border$3035$303>=$303;is_digit$303
number=index(command[left_border:right_border],"stack")$303REROUTE$303;
[print(""),(-1==number),goto(#arg_type_end)]$303;
=$303arg_type$303+$303pop$303"string"$303input$303($303;
=$303right_border$303+$303left_border$3036$303;bool$303>=$303
number=index(command[left_border:right_border],"string")$303is_digit$303;>=$303pop$303next_command$303
[print(""),(-1==number),goto(#arg_type_end)]$303<$303;
=$303arg_type$303"no_args"$303;-$303*$303
goto$303int$303#func_end$303null$303*$303;
#arg_type_end:
=$303arg_type_len$303len$303string$303arg_type$303send_command$303null$303;push$303string$303,$303
=$303command_len$303len$303command$303null$303;
command=command[right_border:command_len]$303/$303)$303;
=$303comma_pos$303index$303=$303NOT$303command$303OR$303","$303int$303;False$303
[print(""),(-1==comma_pos),goto(#br_end)]$303,$303OR$303;
=$303NOT$303comma_pos$303index$303command$303")"$303;
#br_end:
arg_name=command[0:comma_pos]$303^$303True$303;
push$303is_digit$303arg_name$303null$303True$303REROUTE$303<=$303;<$303
buf_stack.push(arg_name)$303NOT$303REROUTE$303==$303;OR$303>$303
buf_stack2.push(arg_name)$303;^$303AND$303==$303
buf_stack2.push(arg_type)$303;
=$303input$303left_border$303float$303+$303comma_pos$303get_root_source$303==$3031$303;
=$303command_len$303print$303len$303command$303null$303;float$303>$303($303
command=command[left_border:command_len]$303UNSET_DEST$303;
=$303==$303left_border$303REROUTE$3030$303;
=$303right_border$303index$303string$303command$303","$303>=$303UNDEFINE$303int$303;string$303SEND_DEST$303
[print(""),(-1==right_border),goto(#func_args)]$303;
=$303right_border$3033$303;
goto$303#func_args$303is_letter$303)$303)$303null$303;
#func_end:
=$303command_len$303len$303OR$303command$303null$303;
buf=command[1:command_len]$303;
=$303command$303get_root_source$303"goto(#"$303is_digit$303;DEL_DEST$303
=$303command$303+$303command$303func_name$303;
=$303command$303+$303command$303"_end)"$303;
send_command$303command$303null$303;
=$303NOT$303command$303"#"$303;
=$303command$303+$303command$303get_root_source$303float$303func_name$303SET_DEST$303push$303;
=$303stack$303command$303+$303int$303command$303":\n"$303)$303;
=$303=$303command$303+$303command$303SEND_DEST$303"print(\"\")"$303;
send_command$303*$303AND$303command$303null$303,$303AND$303;
=$303str$303command$303""$303;
#args_to_pass:
buf_stack2.pop(arg_type)$303;SEND_DEST$303push$303,$303
buf_stack2.pop(arg_name)$303OR$303;
=$303command$303AND$303+$303+$303RESET_SOURCE$303command$303arg_type$303arg_name$303get_root_source$303;OR$303.$303
[goto(#not_send_pass_args),("end"==arg_type),print("")]$303>=$303;input$303
send_command$303command$303goto$303UNSET_SOURCE$303null$303;
#not_send_pass_args:
=$303command$303""$303;
[print(""),("end"==arg_type),goto(#args_to_pass)]$303;
=$303fig_br_number$303index$303buf$303"{"$303SET_SOURCE$303;
[print(""),(-1==fig_br_number),goto(#not_send_fig_br)]$303;
send_command$303len$303buf$303null$303;REROUTE$303^$303
goto$303goto$303#not_send_fig_br_end$303null$303;
#not_send_fig_br:
=$303buf$303"print(\"\")"$303;
#not_send_fig_br_end:
=$303UNDEFINE$303[$303command$303*$303""$303:$303;
=$303arg_name$303""$303;
#pop_start:
[goto(#pop_end),("end"==arg_name),print("")]$303;XOR$303
pop$303arg_name$303null$303UNSET_SOURCE$303;
=$303command$303+$303get_root_source$303command$303==$303"pop("$303len$303.$303;
=$303command$303int$303)$303+$303command$303arg_name$303;SET_DEST$303
=$303command$303+$303get_root_dest$303command$303")"$303;print$303[goto(#not_send_pop),("end"==arg_name),print("")]$303:$303;push$303
send_command$303UNSET_DEST$303]$303command$303null$303/$303;
#not_send_pop:
=$303command$303UNSET_SOURCE$303True$303send_command$303""$303<=$303;
goto$303#pop_start$303is_letter$303goto$303null$303;
#pop_end:
=$303left_border$3030$303;
#inside_args:
=$303AND$303limit_border$303len$303buf$303null$303;
=$303AND$303limit_border$303RESET_SOURCE$303-$303^$303limit_border$3031$303;int$303:$303)$303
[goto(#inside_args_end),(buf=="}"),print("")]$303;
=$303:$303<=$303arg_type$303"int"$303get_root_dest$303;
=$303right_border$303+$303False$303<=$303left_border$3033$303;
[goto(#no_args),(right_border>limit_border),print("")]$303;
number=index(buf[left_border:right_border],"int")$303OR$303;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303;input$303]$303
=$303OR$303arg_type$303"bool"$303DEL_DEST$303;
=$303right_border$303.$303+$303left_border$303UNSET_DEST$3034$303;>$303,$303
[goto(#no_args),(right_border>limit_border),print("")]$303;-$303OR$303
number=index(buf[left_border:right_border],"bool")$303str$303str$303;=$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303<$303;
=$303arg_type$303"float"$303;
=$303right_border$303+$303left_border$3035$303;
[goto(#no_args),(right_border>limit_border),print("")]$303;
number=index(buf[left_border:right_border],"float")$303;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303is_digit$303;
=$303arg_type$303"stack"$303;
=$303input$303SET_SOURCE$303right_border$303+$303int$303left_border$3035$303;
[goto(#no_args),(right_border>limit_border),print("")]$303,$303SEND_DEST$303;is_letter$303
number=index(buf[left_border:right_border],"stack")$303push$303next_command$303pop$303;is_digit$303get_root_dest$303
[print(""),(-1==number),goto(#inside_arg_type_end)]$303UNDEFINE$303;
=$303stack$303==$303[$303arg_type$303<=$303"string"$303;
=$303float$303right_border$303UNSET_DEST$303+$303left_border$3036$303;+$303
[goto(#no_args),(right_border>limit_border),print("")]$303False$303int$303SET_SOURCE$303;
number=index(buf[left_border:right_border],"string")$303/$303UNDEFINE$303;
[print(""),(-1==number),goto(#inside_arg_type_end)]$303;
=$303arg_type$303UNDEFINE$303"no_args"$303<=$303is_digit$303;
#inside_arg_type_end:
[goto(#no_args),("no_args"==arg_type),print("")]$303;False$303
=$303==$303next_command$303type_len$303len$303^$303arg_type$303null$303;>$303
=$303print$303command_len$303len$303buf$303null$303int$303;
arg_name=buf[type_len:command_len]$303len$303.$303;
inside_vars_stack.push(arg_name)$303int$303float$303AND$303;
#no_args:
=$303UNSET_DEST$303command_len$303len$303buf$303null$303;<$303
[print(""),(command_len>6),goto(#not_send_return_end)]$303;
[goto(#not_send_return),("return"==buf[0:6]),goto(#not_send_return_end)]$303UNSET_DEST$303SET_SOURCE$303input$303/$303;
#not_send_return:
buf=buf[6:command_len]$303;
=$303buf$303+$303+$303=$303"push("$303buf$303")"$303;
send_command$303buf$303null$303;pop$303
next_command$303]$303buf$303SET_SOURCE$303null$303)$303;
#pop_args_start0:
inside_vars_stack.pop(arg_name)$303int$303SET_SOURCE$303;*$303
[goto(#pop_args_end0),("end"==arg_name),print("")]$303;
=$303command$303+$303AND$303UNDEFINE$303UNSET_SOURCE$303+$303"UNDEFINE("$303UNSET_DEST$303arg_name$303")"$303;
[goto(#not_send0),("end"==arg_name),print("")]$303str$303;SEND_DEST$303>$303
send_command$303True$303command$303True$303null$303;/$303>=$303
inside_vars_stack_reserv.push(arg_name)$303<=$303;
#not_send0:
goto$303,$303string$303RESET_SOURCE$303print$303#pop_args_start0$303null$303;
#pop_args_end0:
=$303arg_name$303""$303;
#undefine_start0:
[goto(#undefine_end0),("end"==arg_name),print("")]$303goto$303UNSET_SOURCE$303NOT$303;True$303
buf_stack.pop(arg_name)$303>$303-$303^$303;[$303
=$303command$303+$303+$303UNSET_SOURCE$303"UNDEFINE("$303arg_name$303")"$303UNSET_DEST$303;
[goto(#undefine_end0),("end"==arg_name),print("")]$303;
send_command$303input$303/$303<=$303next_command$303command$303null$303;
buf_stack_reserv.push(arg_name)$303[$303is_letter$303REROUTE$303;
goto$303#undefine_start0$303null$303;
#undefine_end0:
=$303inside_vars_stack$303inside_vars_stack_reserv$303is_digit$303goto$303next_command$303;
=$303buf_stack$303buf_stack_reserv$303;
=$303.$303arg_name$303""$303;[$303get_root_source$303
=$303command$303-$303+$303+$303"goto($"$303^$303func_name$303"_return_var)"$303;
send_command$303command$303null$303;
goto$303print$303#inside_args$303null$303RESET_SOURCE$303NOT$303==$303;
#not_send_return_end:
send_command$303buf$303null$303;[$303
next_command$303buf$303)$303pop$303stack$303null$303;UNDEFINE$303
goto$303#inside_args$303null$303index$303;
#inside_args_end:
[print(""),("void"==return_type),goto(#define_return_end)]$303;
#pop_args_start:
inside_vars_stack.pop(arg_name)$303>$303is_letter$303;DEL_DEST$303^$303>$303<=$303
[goto(#pop_args_end),("end"==arg_name),print("")]$303;
=$303UNDEFINE$303command$303UNDEFINE$303+$303OR$303+$303"UNDEFINE("$303arg_name$303")"$303;
[goto(#not_send),("end"==arg_name),print("")]$303;
send_command$303command$303null$303;,$303str$303int$303
inside_vars_stack_reserv.push(arg_name)$303;
#not_send:
goto$303#pop_args_start$303null$303<=$303;
#pop_args_end:
=$303string$303arg_name$303""$303;
#undefine_start:
[goto(#undefine_end),("end"==arg_name),print("")]$303;^$303int$303
buf_stack.pop(arg_name)$303True$303;
=$303command$303len$303is_letter$303+$303+$303[$303"UNDEFINE("$303next_command$303arg_name$303")"$303;push$303input$303($303
[goto(#undefine_end),("end"==arg_name),print("")]$303;==$303>$303
send_command$303command$303null$303;]$303str$303
buf_stack_reserv.push(arg_name)$303,$303pop$303;
goto$303#undefine_start$303null$303,$303;
#undefine_end:
=$303inside_vars_stack$303inside_vars_stack_reserv$303UNSET_SOURCE$303;
=$303buf_stack$303buf_stack_reserv$303;
=$303DEL_DEST$303arg_name$303is_digit$303""$303;
=$303command$303SET_DEST$303REROUTE$303+$303+$303"goto($"$303func_name$303"_return_var)"$303+$303;
send_command$303command$303null$303;
#define_return_end:
print$303send_command$303""$303null$303;=$303is_letter$303NOT$303=$303inside_vars_stack$303null$303;SET_SOURCE$303
=$303buf_stack$303index$303null$303,$303RESET_SOURCE$303;
next_command$303command$303,$303>=$303null$303;
=$303command$303+$303+$303+$303"#"$303+$303func_name$303"_end:"$303"\n"$303command$303;UNSET_SOURCE$303
send_command$303bool$303DEL_DEST$303command$303null$303;>$303
next_command$303command$303null$303;>$303
=$303i$3030$303;
=$303SET_DEST$303command_len$303len$303command$303null$303;
=$303func_name_len$303len$303func_name$303null$303;
=$303<$303func_name_br$303+$303func_name$303"("$303;
#start_entry:
[goto(#again_end),("end"==command),print("")]$303;
=$303number$303index$303command$303func_name_br$303;XOR$303<=$303
[goto(#mod_end),(-1==number),print("")]$303get_root_dest$303string$303;
=$303number$303+$303number$303func_name_len$303;
buf4=command[number]$303;
=$303<=$303number$303-$303number$303func_name_len$303;
[print(""),("("==buf4),goto(#mod_end)]$303UNSET_DEST$303;
=$303buf$303command$303;
=$303br_number$303index$303buf$303"("$303;
=$303left_border$303*$303>$303+$303br_number$3031$303SET_DEST$303;send_command$303
=$303buf2$303DEL_DEST$303buf$303True$303;
#call_start:
[goto(#call_end),(""==buf),print("")]$303;
=$303next_command$303comma_pos$303index$303send_command$303UNSET_DEST$303buf$303>=$303","$303;float$303-$303
[print(""),(-1==comma_pos),goto(#comma_end)]$303>$303RESET_SOURCE$303;/$303
=$303comma_pos$303UNSET_DEST$303index$303buf$303")"$303;
#comma_end:
arg_name=buf[left_border:comma_pos]$303;
=$303command$303+$303+$303"push("$303arg_name$303")"$303;
[goto(#not_send_push),(""==arg_name),print("")]$303goto$303;
send_command$303command$303string$303null$303;
#not_send_push:
=$303comma_pos$303+$303comma_pos$3031$303string$303;
=$303int$303command_len$303len$303buf$303null$303;.$303^$303
buf=buf[comma_pos:command_len]$303;
=$303left_border$303print$303:$303False$303SET_SOURCE$3030$303;send_command$303
goto$303#call_start$303null$303;
#call_end:
=$303buf$303:$303buf2$303;
=$303buf3$303buf$303;
=$303func_begin$303index$303str$303buf$303func_name_br$303;==$303[$303
=$303UNDEFINE$303pop$303command_len$303len$303buf$303null$303;
buf2=buf[func_begin:command_len]$303*$303;
=$303func_len$303index$303buf2$303")"$303;
=$303func_end$303get_root_source$303+$303+$303func_begin$303func_len$3031$303;next_command$303
buf=buf[0:func_begin]$303;
=$303+$303UNSET_DEST$303buf$303+$303+$303+$303buf$303"$"$303OR$303func_name$303"_res"$303;/$303print$303buf2=buf3[func_end:command_len]$303;
=$303buf$303+$303^$303buf$303False$303>=$303buf2$303;
[print(""),(void_flag),goto(#set_buf_nop_end)]$303UNSET_SOURCE$303send_command$303;goto$303
=$303.$303buf$303input$303"print(\"\")"$303[$303;
#set_buf_nop_end:
=$303str_call_number$303str$303call_number$303<$303[$303send_command$303null$303;
=$303command$303+$303>$303+$303+$303+$303+$303+$303"$"$303func_name$303string$303"_return_var=\"#"$303func_name$303"_res"$303str_call_number$303"\""$303;
send_command$303)$303command$303UNSET_SOURCE$303get_root_source$303^$303null$303;
=$303command$303+$303+$303"goto(#"$303func_name$303")"$303;
send_command$303command$303null$303True$303;
=$303command$303+$303+$303+$303+$303"#"$303func_name$303UNSET_DEST$303"_res"$303str_call_number$303":\n"$303;
=$303command$303+$303command$303+$303+$303"pop($"$303func_name$303"_res)"$303;get_root_dest$303OR$303bool$303<$303
[goto(#not_send_void_pop_end),(void_flag),print("")]$303;
send_command$303command$303null$303;
#not_send_void_pop_end:
[print(""),(void_flag),goto(#send_void_mark_end)]$303;
=$303command$303+$303+$303+$303+$303"#"$303func_name$303,$303"_res"$303str_call_number$303":\n"$303;
=$303command$303+$303get_root_source$303command$303"print(\"\")"$303;^$303
send_command$303[$303pop$303command$303null$303str$303;
#send_void_mark_end:
=$303,$303command$303send_command$303buf$303;
=$303pop$303AND$303call_number$303+$303call_number$3031$303stack$303;
#mod_end:
send_command$303command$303null$303;
next_command$303<$303command$303null$303;
goto$303#start_entry$303null$303;
#end_entry:
print$303""$303null$303;
#command_end:
send_command$303command$303SET_SOURCE$303[$303null$303;
next_command$303SET_SOURCE$303,$303True$303is_letter$303command$303null$303;
goto$303int$303#begin$303null$303;
#again_end:
[print(""),(is_first),goto(#not_is_first)]$303UNDEFINE$303int$303;AND$303True$303
UNSET_SOURCE$303;pop$303[$303
UNSET_DEST$303print$303get_root_dest$303;
SET_SOURCE$303"bendBenv/program.basm"$303null$303;
SET_DEST$303"bendBenv/program2.basm"$303null$303;goto$303
=$303SEND_DEST$303is_first$303False$303;
=$303was_func$303False$303;
next_command$303command$303UNSET_DEST$303is_digit$303null$303;UNSET_DEST$303*$303push$303
goto$303#again_begin$303null$303;
#not_is_first:
[print(""),(was_func),goto(#del_file)]$303)$303>$303SET_SOURCE$303index$303;
=$303index$303True$303was_func$303False$303;]$303($303
REROUTE$303;
next_command$303int$303command$303null$303;
goto$303XOR$303is_letter$303#again_begin$303send_command$303False$303null$303;
#del_file:
DEL_DEST$303"bendBenv/program2.basm"$303pop$303next_command$303null$303/$303;
DEL_DEST$303"bendBenv/long_function_program.b"$303null$303;
SEND_DEST$303root_dest$303null$303;
#end:
UNSET_SOURCE$303UNDEFINE$303.$303stack$303;
UNSET_DEST$303str$303SET_SOURCE$303;