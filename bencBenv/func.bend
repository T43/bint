string$303command;
int$303i;
int$303j;
int$303right_border;
int$303command_len;
int$303call_number;
string$303str_call_number;
string$303func_name_br;
string$303return_type;
string$303buf;
string$303buf2;
string$303buf3;
string$303buf4;
string$303symbol;
int$303int_buf;
int$303int_buf2;
int$303int_buf3;
int$303type_len;
int$303arg_type_len;
int$303func_begin;
int$303func_end;
int$303func_len;
int$303limit_border;
int$303number;
int$303func_len;
int$303func_name_len;
int$303br_number;
int$303fig_br_number;
string$303func_name;
string$303arg_type;
string$303arg_name;
int$303left_border;
int$303comma_pos;
stack$303buf_stack;
stack$303buf_stack_reserv;
stack$303buf_stack2;
stack$303inside_vars_stack;
stack$303inside_vars_stack_reserv;
stack$303null;
bool$303is_first;
bool$303was_func;
bool$303was_here;
bool$303void_flag;
string$303root_dest;
=$303is_first$303True;
=$303was_here$303False;
get_root_dest$303root_dest$303null;
SET_SOURCE$303"bendBenv/long_function_program.b"$303null;
SET_DEST$303"bendBenv/program.basm"$303null;
next_command$303command$303null;
#again_begin:
=$303i$3030;
=$303j$3030;
=$303right_border$3030;
=$303command_len$3030;
=$303call_number$3030;
=$303str_call_number$303"";
=$303return_type$303"";
=$303buf$303"";
=$303buf2$303"";
=$303buf3$303"";
=$303int_buf$3030;
=$303int_buf2$3030;
=$303int_buf3$3030;
=$303type_len$3030;
=$303arg_type_len$3030;
=$303func_begin$3030;
=$303func_end$3030;
=$303func_len$3030;
=$303number$3030;
=$303func_len$3030;
=$303br_number$3030;
=$303func_name$303"";
=$303arg_type$303"";
=$303arg_name$303"";
=$303left_border$3030;
=$303comma_pos$3030;
=$303was_func$303False;
=$303call_number$3030;
#begin:
[goto(#again_end),("end"==command),print("")];
=$303void_flag$303False;
=$303br_number$303index$303command$303"(";
[goto(#command_end),(-1==br_number),print("")];
buf=command[0:br_number];
=$303return_type$303"int";
=$303number$303index$303buf$303"int";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"bool";
=$303number$303index$303buf$303"bool";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"float";
=$303number$303index$303buf$303"float";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"stack";
=$303number$303index$303buf$303"stack";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"string";
=$303number$303index$303buf$303"string";
[goto(#end_type),(0==number),print("")];
=$303return_type$303"void";
=$303number$303index$303buf$303"void";
[goto(#end_type),(0==number),print("")];
goto$303#command_end$303null;
#end_type:
[print(""),("void"==return_type),goto(#set_void_flag_end)];
=$303void_flag$303True;
#set_void_flag_end:
=$303type_len$303len$303return_type$303null;
func_name=command[type_len:br_number];
=$303buf$303+$303+$303"string $"$303func_name$303"_return_var";
send_command$303buf$303null;
=$303left_border$303+$303br_number$3031;
=$303was_func$303True;
=$303buf$303+$303+$303+$303return_type$303" $"$303func_name$303"_res";
[goto(#not_define_void_end),(void_flag),print("")];
send_command$303buf$303null;
#not_define_void_end:
print$303""$303null;
#func_args:
[goto(#func_end),("{"==command[0]),print("")];
=$303arg_type$303"int";
=$303right_border$303+$303left_border$3033;
number=index(command[left_border:right_border],"int");
[print(""),(-1==number),goto(#arg_type_end)];
=$303arg_type$303"bool";
=$303right_border$303+$303left_border$3034;
number=index(command[left_border:right_border],"bool");
[print(""),(-1==number),goto(#arg_type_end)];
=$303arg_type$303"float";
=$303right_border$303+$303left_border$3035;
number=index(command[left_border:right_border],"float");
[print(""),(-1==number),goto(#arg_type_end)];
=$303arg_type$303"stack";
=$303right_border$303+$303left_border$3035;
number=index(command[left_border:right_border],"stack");
[print(""),(-1==number),goto(#arg_type_end)];
=$303arg_type$303"string";
=$303right_border$303+$303left_border$3036;
number=index(command[left_border:right_border],"string");
[print(""),(-1==number),goto(#arg_type_end)];
=$303arg_type$303"no_args";
goto$303#func_end$303null;
#arg_type_end:
=$303arg_type_len$303len$303arg_type$303null;
=$303command_len$303len$303command$303null;
command=command[right_border:command_len];
=$303comma_pos$303index$303command$303",";
[print(""),(-1==comma_pos),goto(#br_end)];
=$303comma_pos$303index$303command$303")";
#br_end:
arg_name=command[0:comma_pos];
push$303arg_name$303null;
buf_stack.push(arg_name);
buf_stack2.push(arg_name);
buf_stack2.push(arg_type);
=$303left_border$303+$303comma_pos$3031;
=$303command_len$303len$303command$303null;
command=command[left_border:command_len];
=$303left_border$3030;
=$303right_border$303index$303command$303",";
[print(""),(-1==right_border),goto(#func_args)];
=$303right_border$3033;
goto$303#func_args$303null;
#func_end:
=$303command_len$303len$303command$303null;
buf=command[1:command_len];
=$303command$303"goto(#";
=$303command$303+$303command$303func_name;
=$303command$303+$303command$303"_end)";
send_command$303command$303null;
=$303command$303"#";
=$303command$303+$303command$303func_name;
=$303command$303+$303command$303":\n";
=$303command$303+$303command$303"print(\"\")";
send_command$303command$303null;
=$303command$303"";
#args_to_pass:
buf_stack2.pop(arg_type);
buf_stack2.pop(arg_name);
=$303command$303+$303+$303command$303arg_type$303arg_name;
[goto(#not_send_pass_args),("end"==arg_type),print("")];
send_command$303command$303null;
#not_send_pass_args:
=$303command$303"";
[print(""),("end"==arg_type),goto(#args_to_pass)];
=$303fig_br_number$303index$303buf$303"{";
[print(""),(-1==fig_br_number),goto(#not_send_fig_br)];
send_command$303buf$303null;
goto$303#not_send_fig_br_end$303null;
#not_send_fig_br:
=$303buf$303"print(\"\")";
#not_send_fig_br_end:
=$303command$303"";
=$303arg_name$303"";
#pop_start:
[goto(#pop_end),("end"==arg_name),print("")];
pop$303arg_name$303null;
=$303command$303+$303command$303"pop(";
=$303command$303+$303command$303arg_name;
=$303command$303+$303command$303")";
[goto(#not_send_pop),("end"==arg_name),print("")];
send_command$303command$303null;
#not_send_pop:
=$303command$303"";
goto$303#pop_start$303null;
#pop_end:
=$303left_border$3030;
#inside_args:
=$303limit_border$303len$303buf$303null;
=$303limit_border$303-$303limit_border$3031;
[goto(#inside_args_end),(buf=="}"),print("")];
=$303arg_type$303"int";
=$303right_border$303+$303left_border$3033;
[goto(#no_args),(right_border>limit_border),print("")];
number=index(buf[left_border:right_border],"int");
[print(""),(-1==number),goto(#inside_arg_type_end)];
=$303arg_type$303"bool";
=$303right_border$303+$303left_border$3034;
[goto(#no_args),(right_border>limit_border),print("")];
number=index(buf[left_border:right_border],"bool");
[print(""),(-1==number),goto(#inside_arg_type_end)];
=$303arg_type$303"float";
=$303right_border$303+$303left_border$3035;
[goto(#no_args),(right_border>limit_border),print("")];
number=index(buf[left_border:right_border],"float");
[print(""),(-1==number),goto(#inside_arg_type_end)];
=$303arg_type$303"stack";
=$303right_border$303+$303left_border$3035;
[goto(#no_args),(right_border>limit_border),print("")];
number=index(buf[left_border:right_border],"stack");
[print(""),(-1==number),goto(#inside_arg_type_end)];
=$303arg_type$303"string";
=$303right_border$303+$303left_border$3036;
[goto(#no_args),(right_border>limit_border),print("")];
number=index(buf[left_border:right_border],"string");
[print(""),(-1==number),goto(#inside_arg_type_end)];
=$303arg_type$303"no_args";
#inside_arg_type_end:
[goto(#no_args),("no_args"==arg_type),print("")];
=$303type_len$303len$303arg_type$303null;
=$303command_len$303len$303buf$303null;
arg_name=buf[type_len:command_len];
inside_vars_stack.push(arg_name);
#no_args:
=$303command_len$303len$303buf$303null;
[print(""),(command_len>6),goto(#not_send_return_end)];
[goto(#not_send_return),("return"==buf[0:6]),goto(#not_send_return_end)];
#not_send_return:
buf=buf[6:command_len];
=$303buf$303+$303+$303"push("$303buf$303")";
send_command$303buf$303null;
next_command$303buf$303null;
#pop_args_start0:
inside_vars_stack.pop(arg_name);
[goto(#pop_args_end0),("end"==arg_name),print("")];
=$303command$303+$303+$303"UNDEFINE("$303arg_name$303")";
[goto(#not_send0),("end"==arg_name),print("")];
send_command$303command$303null;
inside_vars_stack_reserv.push(arg_name);
#not_send0:
goto$303#pop_args_start0$303null;
#pop_args_end0:
=$303arg_name$303"";
#undefine_start0:
[goto(#undefine_end0),("end"==arg_name),print("")];
buf_stack.pop(arg_name);
=$303command$303+$303+$303"UNDEFINE("$303arg_name$303")";
[goto(#undefine_end0),("end"==arg_name),print("")];
send_command$303command$303null;
buf_stack_reserv.push(arg_name);
goto$303#undefine_start0$303null;
#undefine_end0:
=$303inside_vars_stack$303inside_vars_stack_reserv;
=$303buf_stack$303buf_stack_reserv;
=$303arg_name$303"";
=$303command$303+$303+$303"goto($"$303func_name$303"_return_var)";
send_command$303command$303null;
goto$303#inside_args$303null;
#not_send_return_end:
send_command$303buf$303null;
next_command$303buf$303null;
goto$303#inside_args$303null;
#inside_args_end:
[print(""),("void"==return_type),goto(#define_return_end)];
#pop_args_start:
inside_vars_stack.pop(arg_name);
[goto(#pop_args_end),("end"==arg_name),print("")];
=$303command$303+$303+$303"UNDEFINE("$303arg_name$303")";
[goto(#not_send),("end"==arg_name),print("")];
send_command$303command$303null;
inside_vars_stack_reserv.push(arg_name);
#not_send:
goto$303#pop_args_start$303null;
#pop_args_end:
=$303arg_name$303"";
#undefine_start:
[goto(#undefine_end),("end"==arg_name),print("")];
buf_stack.pop(arg_name);
=$303command$303+$303+$303"UNDEFINE("$303arg_name$303")";
[goto(#undefine_end),("end"==arg_name),print("")];
send_command$303command$303null;
buf_stack_reserv.push(arg_name);
goto$303#undefine_start$303null;
#undefine_end:
=$303inside_vars_stack$303inside_vars_stack_reserv;
=$303buf_stack$303buf_stack_reserv;
=$303arg_name$303"";
=$303command$303+$303+$303"goto($"$303func_name$303"_return_var)";
send_command$303command$303null;
#define_return_end:
print$303""$303null;
=$303inside_vars_stack$303null;
=$303buf_stack$303null;
next_command$303command$303null;
=$303command$303+$303+$303+$303"#"$303+$303func_name$303"_end:"$303"\n"$303command;
send_command$303command$303null;
next_command$303command$303null;
=$303i$3030;
=$303command_len$303len$303command$303null;
=$303func_name_len$303len$303func_name$303null;
=$303func_name_br$303+$303func_name$303"(";
#start_entry:
[goto(#again_end),("end"==command),print("")];
=$303number$303index$303command$303func_name_br;
[goto(#mod_end),(-1==number),print("")];
=$303number$303+$303number$303func_name_len;
buf4=command[number];
=$303number$303-$303number$303func_name_len;
[print(""),("("==buf4),goto(#mod_end)];
=$303buf$303command;
=$303br_number$303index$303buf$303"(";
=$303left_border$303+$303br_number$3031;
=$303buf2$303buf;
#call_start:
[goto(#call_end),(""==buf),print("")];
=$303comma_pos$303index$303buf$303",";
[print(""),(-1==comma_pos),goto(#comma_end)];
=$303comma_pos$303index$303buf$303")";
#comma_end:
arg_name=buf[left_border:comma_pos];
=$303command$303+$303+$303"push("$303arg_name$303")";
[goto(#not_send_push),(""==arg_name),print("")];
send_command$303command$303null;
#not_send_push:
=$303comma_pos$303+$303comma_pos$3031;
=$303command_len$303len$303buf$303null;
buf=buf[comma_pos:command_len];
=$303left_border$3030;
goto$303#call_start$303null;
#call_end:
=$303buf$303buf2;
=$303buf3$303buf;
=$303func_begin$303index$303buf$303func_name_br;
=$303command_len$303len$303buf$303null;
buf2=buf[func_begin:command_len];
=$303func_len$303index$303buf2$303")";
=$303func_end$303+$303+$303func_begin$303func_len$3031;
buf=buf[0:func_begin];
=$303buf$303+$303+$303+$303buf$303"$"$303func_name$303"_res";
buf2=buf3[func_end:command_len];
=$303buf$303+$303buf$303buf2;
[print(""),(void_flag),goto(#set_buf_nop_end)];
=$303buf$303"print(\"\")";
#set_buf_nop_end:
=$303str_call_number$303str$303call_number$303null;
=$303command$303+$303+$303+$303+$303+$303+$303"$"$303func_name$303"_return_var=\"#"$303func_name$303"_res"$303str_call_number$303"\"";
send_command$303command$303null;
=$303command$303+$303+$303"goto(#"$303func_name$303")";
send_command$303command$303null;
=$303command$303+$303+$303+$303+$303"#"$303func_name$303"_res"$303str_call_number$303":\n";
=$303command$303+$303command$303+$303+$303"pop($"$303func_name$303"_res)";
[goto(#not_send_void_pop_end),(void_flag),print("")];
send_command$303command$303null;
#not_send_void_pop_end:
[print(""),(void_flag),goto(#send_void_mark_end)];
=$303command$303+$303+$303+$303+$303"#"$303func_name$303"_res"$303str_call_number$303":\n";
=$303command$303+$303command$303"print(\"\")";
send_command$303command$303null;
#send_void_mark_end:
=$303command$303buf;
=$303call_number$303+$303call_number$3031;
#mod_end:
send_command$303command$303null;
next_command$303command$303null;
goto$303#start_entry$303null;
#end_entry:
print$303""$303null;
#command_end:
send_command$303command$303null;
next_command$303command$303null;
goto$303#begin$303null;
#again_end:
[print(""),(is_first),goto(#not_is_first)];
UNSET_SOURCE;
UNSET_DEST;
SET_SOURCE$303"bendBenv/program.basm"$303null;
SET_DEST$303"bendBenv/program2.basm"$303null;
=$303is_first$303False;
=$303was_func$303False;
next_command$303command$303null;
goto$303#again_begin$303null;
#not_is_first:
[print(""),(was_func),goto(#del_file)];
=$303was_func$303False;
REROUTE;
next_command$303command$303null;
goto$303#again_begin$303null;
#del_file:
DEL_DEST$303"bendBenv/program2.basm"$303null;
DEL_DEST$303"bendBenv/long_function_program.b"$303null;
SEND_DEST$303root_dest$303null;
#end:
UNSET_SOURCE;
UNSET_DEST;
