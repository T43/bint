string$println_return_var;
goto(#println_end);
#println:print("");
strings;
print("");
pop(s);
print("");
string $print_arg0;
$print_arg0=s;
print($print_arg0);
UNDEFINE($print_arg0);
string $print_arg0;
$print_arg0="\n";
print($print_arg0);
UNDEFINE($print_arg0);
UNDEFINE(s);
goto($println_return_var);
#println_end:print("");
string$reverse_return_var;
stack$reverse_res;
goto(#reverse_end);
#reverse:print("");
stacks;
print("");
pop(s);
print("");
stringbuf;
stackres;
s.pop(buf);
#_reverse_s:print("");
[goto(#_reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
goto(#_reverse_s);
#_reverse_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(s);
goto($reverse_return_var);
#reverse_end:print("");
string$indexes_return_var;
stack$indexes_res;
goto(#indexes_end);
#indexes:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
s_len=len(s);
sub_len=len(sub_s);
s_len_old=s_len;
i=index(s,sub_s);
pointer=i;
#_indexes_s:print("");
[goto(#_indexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
s=s[pointer:s_len];
s_len=len(s);
i=index(s,sub_s);
pointer=i;
goto(#_indexes_s);
#_indexes_e:print("");
stack$reverse_res0;
push(res);
$reverse_return_var="#reverse_res0";
goto(#reverse);
#reverse_res0:pop($reverse_res);
$reverse_res0=$reverse_res;
res=$reverse_res0;
push(res);
UNDEFINE($reverse_res0);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($indexes_return_var);
#indexes_end:print("");
string$ops_return_var;
stack$ops_res;
goto(#ops_end);
#ops:print("");
stringop;
stringcommand;
print("");
pop(op);
pop(command);
print("");
stackquotes;
stackthese_quotes;
stackop_nums;
stringbuf;
stackres;
intnum1;
intnum2;
intop_num;
boolwas_quote;
boolto_add;
was_quote=False;
to_add=True;
stack$indexes_res0;
push(command);
push(op);
$indexes_return_var="#indexes_res0";
goto(#indexes);
#indexes_res0:pop($indexes_res);
$indexes_res0=$indexes_res;
op_nums=$indexes_res0;
op_nums.pop(buf);
#_op_nums_s:print("");
[goto(#_op_nums_e),("end"==buf),print("")];
op_num=int(buf);
quotes=reg_find("\"(\\.|[^\"])*\"",command);
#_quotes_s:print("");
quotes.pop(these_quotes);
these_quotes.pop(buf);
[goto(#_quotes_e),("end"==buf),print("")];
#_these_quotes_s:print("");
[goto(#_these_quotes_e),("end"==buf),print("")];
num1=int(buf);
these_quotes.pop(buf);
num2=int(buf);
these_quotes.pop(buf);
was_quote=True;
goto(#_these_quotes_s);
#_these_quotes_e:print("");
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)];
to_add=False;
goto(#_push_op_end);
#_is_op_end:print("");
goto(#_quotes_s);
#_quotes_e:print("");
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")];
res.push(op_num);
was_quote=False;
to_add=True;
#_push_op_end:print("");
print("");
op_nums.pop(buf);
was_quote=False;
to_add=True;
goto(#_op_nums_s);
#_op_nums_e:print("");
stack$reverse_res1;
push(res);
$reverse_return_var="#reverse_res1";
goto(#reverse);
#reverse_res1:pop($reverse_res);
$reverse_res1=$reverse_res;
res=$reverse_res1;
push(res);
UNDEFINE($reverse_res1);
UNDEFINE($indexes_res0);
UNDEFINE(to_add);
UNDEFINE(was_quote);
UNDEFINE(op_num);
UNDEFINE(num2);
UNDEFINE(num1);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(op_nums);
UNDEFINE(these_quotes);
UNDEFINE(quotes);
UNDEFINE(op);
UNDEFINE(command);
goto($ops_return_var);
#ops_end:print("");
string$in_stack_return_var;
bool$in_stack_res;
goto(#in_stack_end);
#in_stack:print("");
stringel;
stacks;
print("");
pop(el);
pop(s);
print("");
stringbuf;
boolres;
res=False;
s.pop(buf);
#_in_stack_s:print("");
[goto(#_in_stack_e),("end"==buf),print("")];
[print(""),(el==buf),goto(#_no)];
res=True;
goto(#_in_stack_e);
#_no:print("");
s.pop(buf);
goto(#_in_stack_s);
#_in_stack_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(el);
UNDEFINE(s);
goto($in_stack_return_var);
#in_stack_end:print("");
string$func_end_return_var;
int$func_end_res;
goto(#func_end_end);
#func_end:print("");
intfunc_begin;
stringcommand;
print("");
pop(func_begin);
pop(command);
print("");
stackobraces;
stackcbraces;
stringobrace;
stringcbrace;
stringsymbol;
into_sum;
intc_sum;
intpos;
stringspos;
intcommand_len;
command_len=len(command);
obrace="(";
cbrace=")";
o_sum=1;
c_sum=0;
pos=(func_begin+1);
stack$ops_res0;
push(command);
push(obrace);
$ops_return_var="#ops_res0";
goto(#ops);
#ops_res0:pop($ops_res);
$ops_res0=$ops_res;
obraces=$ops_res0;
stack$ops_res1;
push(command);
push(cbrace);
$ops_return_var="#ops_res1";
goto(#ops);
#ops_res1:pop($ops_res);
$ops_res1=$ops_res;
cbraces=$ops_res1;
#_braces_s:print("");
[print(""),(pos<command_len),goto(#_braces_e)];
spos=str(pos);
bool$in_stack_res0;
push(obraces);
push(spos);
$in_stack_return_var="#in_stack_res0";
goto(#in_stack);
#in_stack_res0:pop($in_stack_res);
$in_stack_res0=$in_stack_res;
[print(""),$in_stack_res0,goto(#_o_plus_end)];
o_sum=(o_sum+1);
#_o_plus_end:print("");
bool$in_stack_res1;
push(cbraces);
push(spos);
$in_stack_return_var="#in_stack_res1";
goto(#in_stack);
#in_stack_res1:pop($in_stack_res);
$in_stack_res1=$in_stack_res;
[print(""),$in_stack_res1,goto(#_c_plus_end)];
c_sum=(c_sum+1);
#_c_plus_end:print("");
[goto(#_braces_e),(o_sum==c_sum),print("")];
pos=(pos+1);
goto(#_braces_s);
#_braces_e:print("");
push(pos);
UNDEFINE($in_stack_res1);
UNDEFINE($in_stack_res0);
UNDEFINE($ops_res1);
UNDEFINE($ops_res0);
UNDEFINE(command_len);
UNDEFINE(spos);
UNDEFINE(pos);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(symbol);
UNDEFINE(cbrace);
UNDEFINE(obrace);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(func_begin);
UNDEFINE(command);
goto($func_end_return_var);
#func_end_end:print("");
stringroot_source;
intCOMMAND_COUNTER;
stringcommand;
string$init_return_var;
goto(#init_end);
#init:print("");
print("");
COMMAND_COUNTER=0;
root_source="benv/prep_func_program.b";
SET_SOURCE(root_source);
SET_DEST("benv/prep_if_program.b");
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
goto(#finish_end);
#finish:print("");
print("");
UNSET_SOURCE();
UNSET_DEST();
DEL_DEST(root_source);
goto($finish_return_var);
#finish_end:print("");
string$stack_len_return_var;
int$stack_len_res;
goto(#stack_len_end);
#stack_len:print("");
stacks;
print("");
pop(s);
print("");
intres;
stringbuf;
res=0;
s.pop(buf);
#stack_len_s:print("");
[goto(#stack_len_e),("end"==buf),print("")];
res=(res+1);
s.pop(buf);
goto(#stack_len_s);
#stack_len_e:print("");
push(res);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(s);
goto($stack_len_return_var);
#stack_len_end:print("");
string$switch_command_return_var;
goto(#switch_command_end);
#switch_command:print("");
print("");
COMMAND_COUNTER=(COMMAND_COUNTER+1);
next_command(command);
goto($switch_command_return_var);
#switch_command_end:print("");
string$SET_COMMAND_COUNTER_return_var;
goto(#SET_COMMAND_COUNTER_end);
#SET_COMMAND_COUNTER:print("");
intcounter;
print("");
pop(counter);
print("");
inti;
i=0;
stringcommand;
RESET_SOURCE();
COMMAND_COUNTER=counter;
#set_start:print("");
[print(""),(i<counter),goto(#set_end)];
next_command(command);
i=(i+1);
goto(#set_start);
#set_end:print("");
print("");
UNDEFINE(command);
UNDEFINE(i);
UNDEFINE(counter);
goto($SET_COMMAND_COUNTER_return_var);
#SET_COMMAND_COUNTER_end:print("");
string$block_end_return_var;
int$block_end_res;
goto(#block_end_end);
#block_end:print("");
print("");
stringop1;
stringop2;
stringcode;
stringcommand_buf;
into_sum;
intc_sum;
intcommand_len;
stackobraces;
stackcbraces;
stringbuf;
stringspos;
intcounter;
intbuf_counter;
intpos;
counter=COMMAND_COUNTER;
command_len=len(command);
command=command[1:command_len];
code=command;
next_command(command);
counter=(counter+1);
code=(code+command[0]);
o_sum=1;
c_sum=0;
#block_s:print("");
[goto(#block_e),(o_sum==c_sum),print("")];
stack$ops_res2;
push(code);
push("{");
$ops_return_var="#ops_res2";
goto(#ops);
#ops_res2:pop($ops_res);
$ops_res2=$ops_res;
obraces=$ops_res2;
stack$ops_res3;
push(code);
push("}");
$ops_return_var="#ops_res3";
goto(#ops);
#ops_res3:pop($ops_res);
$ops_res3=$ops_res;
cbraces=$ops_res3;
int$stack_len_res0;
push(obraces);
$stack_len_return_var="#stack_len_res0";
goto(#stack_len);
#stack_len_res0:pop($stack_len_res);
$stack_len_res0=$stack_len_res;
o_sum=$stack_len_res0;
int$stack_len_res1;
push(cbraces);
$stack_len_return_var="#stack_len_res1";
goto(#stack_len);
#stack_len_res1:pop($stack_len_res);
$stack_len_res1=$stack_len_res;
c_sum=$stack_len_res1;
command_len=len(command);
command_buf=command[1:command_len];
code=(code+command_buf);
next_command(command);
counter=(counter+1);
command_buf=command[0];
code=(code+command_buf);
goto(#block_s);
#block_e:print("");
buf_counter=(COMMAND_COUNTER-1);
push(buf_counter);
$SET_COMMAND_COUNTER_return_var="#SET_COMMAND_COUNTER_res0";
goto(#SET_COMMAND_COUNTER);
#SET_COMMAND_COUNTER_res0:print("");
print("");
next_command(command);
COMMAND_COUNTER=(COMMAND_COUNTER+1);
push((counter-1));
UNDEFINE($stack_len_res1);
UNDEFINE($stack_len_res0);
UNDEFINE($ops_res3);
UNDEFINE($ops_res2);
UNDEFINE(pos);
UNDEFINE(buf_counter);
UNDEFINE(counter);
UNDEFINE(spos);
UNDEFINE(buf);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(command_len);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(command_buf);
UNDEFINE(code);
UNDEFINE(op2);
UNDEFINE(op1);
goto($block_end_return_var);
#block_end_end:print("");
string$is_if_return_var;
bool$is_if_res;
goto(#is_if_end);
#is_if:print("");
stringcommand;
print("");
pop(command);
print("");
stringop;
stacks;
stringbuf;
intibuf;
intstart_pos;
op="if(";
stack$ops_res4;
push(command);
push(op);
$ops_return_var="#ops_res4";
goto(#ops);
#ops_res4:pop($ops_res);
$ops_res4=$ops_res;
s=$ops_res4;
s.pop(buf);
[goto(#end_true),("end"==buf),print("")];
ibuf=int(buf);
[goto(#start_true),(0==ibuf),print("")];
start_pos=(ibuf-4);
[goto(#end_true),(start_pos<0),print("")];
buf=command[start_pos:ibuf];
[print(""),("else"==buf),goto(#end_true)];
#start_true:print("");
push(True);
UNDEFINE($ops_res4);
UNDEFINE(start_pos);
UNDEFINE(ibuf);
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(op);
UNDEFINE(command);
goto($is_if_return_var);
#end_true:print("");
push(False);
UNDEFINE(op);
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(ibuf);
UNDEFINE(start_pos);
UNDEFINE($ops_res4);
UNDEFINE(command);
goto($is_if_return_var);
print("");
#is_if_end:print("");
string$is_else_return_var;
bool$is_else_res;
goto(#is_else_end);
#is_else:print("");
stringcommand;
print("");
pop(command);
print("");
stringop;
stacks;
stringbuf;
intibuf;
intstart_pos;
op="}else{";
stack$ops_res5;
push(command);
push(op);
$ops_return_var="#ops_res5";
goto(#ops);
#ops_res5:pop($ops_res);
$ops_res5=$ops_res;
s=$ops_res5;
s.pop(buf);
[goto(#end_else_true),("end"==buf),print("")];
ibuf=int(buf);
[print(""),(0==ibuf),goto(#end_else_true)];
push(True);
UNDEFINE($ops_res5);
UNDEFINE(start_pos);
UNDEFINE(ibuf);
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(op);
UNDEFINE(command);
goto($is_else_return_var);
#end_else_true:print("");
push(False);
UNDEFINE(op);
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(ibuf);
UNDEFINE(start_pos);
UNDEFINE($ops_res5);
UNDEFINE(command);
goto($is_else_return_var);
#is_else_end:print("");
string$send_new_command_return_var;
goto(#send_new_command_end);
#send_new_command:print("");
stringcommand;
print("");
pop(command);
print("");
stringop;
stringbuf;
stringcommand_buf;
stacks;
intpos;
stringnew_command;
intcommand_len;
op="{";
#send_new_command_s:print("");
stack$ops_res6;
push(command);
push(op);
$ops_return_var="#ops_res6";
goto(#ops);
#ops_res6:pop($ops_res);
$ops_res6=$ops_res;
s=$ops_res6;
s.pop(buf);
[goto(#send_new_command_e),("end"==buf),print("")];
pos=int(buf);
pos=(pos+1);
command_buf=command[0:pos];
new_command=(command_buf+"print(\"\")");
send_command(new_command);
command_len=len(command);
command_buf=command[pos:command_len];
command=command_buf;
goto(#send_new_command_s);
#send_new_command_e:print("");
send_command(command);
print("");
UNDEFINE($ops_res6);
UNDEFINE(command_len);
UNDEFINE(new_command);
UNDEFINE(pos);
UNDEFINE(s);
UNDEFINE(command_buf);
UNDEFINE(buf);
UNDEFINE(op);
UNDEFINE(command);
goto($send_new_command_return_var);
#send_new_command_end:print("");
string$var_type_return_var;
string$var_type_res;
goto(#var_type_end);
#var_type:print("");
stringcommand;
print("");
pop(command);
print("");
stringbuf;
stacks;
s=reg_find("(?:^int)",command);
s.pop(buf);
[goto(#int_type_end),("end"==buf),print("")];
push("int");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($var_type_return_var);
#int_type_end:print("");
s=reg_find("(?:^float)",command);
s.pop(buf);
[goto(#float_type_end),("end"==buf),print("")];
push("float");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($var_type_return_var);
#float_type_end:print("");
s=reg_find("(?:^bool)",command);
s.pop(buf);
[goto(#bool_type_end),("end"==buf),print("")];
push("bool");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($var_type_return_var);
#bool_type_end:print("");
s=reg_find("(?:^stack)",command);
s.pop(buf);
[goto(#stack_type_end),("end"==buf),print("")];
push("stack");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($var_type_return_var);
#stack_type_end:print("");
s=reg_find("(?:^string)",command);
s.pop(buf);
[goto(#string_type_end),("end"==buf),print("")];
push("string");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($var_type_return_var);
#string_type_end:print("");
push("");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($var_type_return_var);
#var_type_end:print("");
string$undefine_vars_return_var;
goto(#undefine_vars_end);
#undefine_vars:print("");
print("");
intold_COMMAND_COUNTER;
intcounter;
intinternal_counter;
intpos;
stringop;
stringbuf;
stringthis_command;
intcommand_len;
stacks;
stringT;
stringvar;
stackvars;
this_command=command;
old_COMMAND_COUNTER=COMMAND_COUNTER;
int$block_end_res0;
$block_end_return_var="#block_end_res0";
goto(#block_end);
#block_end_res0:pop($block_end_res);
$block_end_res0=$block_end_res;
counter=$block_end_res0;
op="{";
#undefine_vars_loop_s:print("");
stack$ops_res7;
push(this_command);
push(op);
$ops_return_var="#ops_res7";
goto(#ops);
#ops_res7:pop($ops_res);
$ops_res7=$ops_res;
s=$ops_res7;
s.pop(buf);
[goto(#undefine_vars_loop_e),("end"==buf),print("")];
pos=int(buf);
pos=(pos+1);
command_len=len(command);
this_command=command[pos:command_len];
goto(#undefine_vars_loop_s);
#undefine_vars_loop_e:print("");
string$var_type_res0;
push(this_command);
$var_type_return_var="#var_type_res0";
goto(#var_type);
#var_type_res0:pop($var_type_res);
$var_type_res0=$var_type_res;
T=$var_type_res0;
pos=len(T);
command_len=len(this_command);
[print(""),(pos>0),goto(#not_var)];
var=this_command[pos:command_len];
vars.push(var);
#not_var:print("");
print("");
#vars_loop_s:print("");
[print(""),(COMMAND_COUNTER<counter),goto(#vars_loop_e)];
$switch_command_return_var="#switch_command_res0";
goto(#switch_command);
#switch_command_res0:print("");
print("");
bool$is_else_res0;
push(command);
$is_else_return_var="#is_else_res0";
goto(#is_else);
#is_else_res0:pop($is_else_res);
$is_else_res0=$is_else_res;
bool$is_if_res0;
push(command);
$is_if_return_var="#is_if_res0";
goto(#is_if);
#is_if_res0:pop($is_if_res);
$is_if_res0=$is_if_res;
[print(""),(($is_if_res0)OR($is_else_res0)),goto(#not_internal)];
$block_end_return_var="#block_end_res1";
goto(#block_end);
#block_end_res1:pop($block_end_res);
internal_counter=$block_end_res;
push(internal_counter);
$SET_COMMAND_COUNTER_return_var="#SET_COMMAND_COUNTER_res1";
goto(#SET_COMMAND_COUNTER);
#SET_COMMAND_COUNTER_res1:print("");
print("");
#not_internal:print("");
string$var_type_res1;
push(command);
$var_type_return_var="#var_type_res1";
goto(#var_type);
#var_type_res1:pop($var_type_res);
$var_type_res1=$var_type_res;
T=$var_type_res1;
pos=len(T);
command_len=len(command);
[print(""),(pos>0),goto(#not_var2)];
var=command[pos:command_len];
vars.push(var);
#not_var2:print("");
goto(#vars_loop_s);
#vars_loop_e:print("");
vars.pop(var);
#get_var_s:print("");
[goto(#get_var_e),("end"==var),print("")];
push(var);
$println_return_var="#println_res0";
goto(#println);
#println_res0:print("");
print("");
vars.pop(var);
goto(#get_var_s);
#get_var_e:print("");
push(command);
$println_return_var="#println_res1";
goto(#println);
#println_res1:print("");
print("");
push(old_COMMAND_COUNTER);
$SET_COMMAND_COUNTER_return_var="#SET_COMMAND_COUNTER_res2";
goto(#SET_COMMAND_COUNTER);
#SET_COMMAND_COUNTER_res2:print("");
print("");
UNDEFINE($var_type_res1);
UNDEFINE(ernal_counter=$block_end_res);
UNDEFINE($is_if_res0);
UNDEFINE($is_else_res0);
UNDEFINE($var_type_res0);
UNDEFINE($ops_res7);
UNDEFINE($block_end_res0);
UNDEFINE(vars);
UNDEFINE(var);
UNDEFINE(T);
UNDEFINE(s);
UNDEFINE(command_len);
UNDEFINE(this_command);
UNDEFINE(buf);
UNDEFINE(op);
UNDEFINE(pos);
UNDEFINE(internal_counter);
UNDEFINE(counter);
UNDEFINE(old_COMMAND_COUNTER);
goto($undefine_vars_return_var);
#undefine_vars_end:print("");
string$main_return_var;
goto(#main_end);
#main:print("");
print("");
$init_return_var="#init_res0";
goto(#init);
#init_res0:print("");
print("");
$switch_command_return_var="#switch_command_res1";
goto(#switch_command);
#switch_command_res1:print("");
print("");
#main_s:print("");
[goto(#main_e),("end"==command),print("")];
bool$is_else_res1;
push(command);
$is_else_return_var="#is_else_res1";
goto(#is_else);
#is_else_res1:pop($is_else_res);
$is_else_res1=$is_else_res;
bool$is_if_res1;
push(command);
$is_if_return_var="#is_if_res1";
goto(#is_if);
#is_if_res1:pop($is_if_res);
$is_if_res1=$is_if_res;
[print(""),(($is_if_res1)OR($is_else_res1)),goto(#not_cond)];
push(command);
$send_new_command_return_var="#send_new_command_res0";
goto(#send_new_command);
#send_new_command_res0:print("");
print("");
$undefine_vars_return_var="#undefine_vars_res0";
goto(#undefine_vars);
#undefine_vars_res0:print("");
print("");
$switch_command_return_var="#switch_command_res2";
goto(#switch_command);
#switch_command_res2:print("");
print("");
goto(#main_s);
#not_cond:print("");
send_command(command);
$switch_command_return_var="#switch_command_res3";
goto(#switch_command);
#switch_command_res3:print("");
print("");
goto(#main_s);
#main_e:print("");
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:print("");
print("");
UNDEFINE($is_if_res1);
UNDEFINE($is_else_res1);
goto($main_return_var);
#main_end:print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:print("");
print("");
