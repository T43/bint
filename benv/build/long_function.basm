string$ret;
stringcommand;
stringreturn_type;
stringfunc_name;
stackfunc_stack;
boolbool_res;
stringroot_source;
string$init_return_var;
int$init_res;
goto(#init_end);
#init:print("");
print("");
root_source="benv/if_program.b";
SET_SOURCE(root_source);
SET_DEST("benv/long_function_program.b");
push(0);
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
int$finish_res;
goto(#finish_end);
#finish:print("");
print("");
DEL_DEST(root_source);
push(0);
goto($finish_return_var);
#finish_end:print("");
string$reverse_return_var;
stack$reverse_res;
goto(#reverse_end);
#reverse:print("");
stacks;
print("");
pop(s);
print("");
stringbuf;
stackres;
s.pop(buf);
#reverse_s:print("");
[goto(#reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
goto(#reverse_s);
#reverse_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(s);
goto($reverse_return_var);
#reverse_end:print("");
string$indexes_return_var;
stack$indexes_res;
goto(#indexes_end);
#indexes:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
int$l0;
$l0=len(sub_s);
sub_len=$l0;
UNDEFINE($l0);
s_len_old=s_len;
i=index(s,sub_s);
pointer=i;
#indexes_s:print("");
[goto(#indexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
s=s[pointer:s_len];
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
i=index(s,sub_s);
pointer=i;
goto(#indexes_s);
#indexes_e:print("");
stack$reverse_res0;
push(res);
$reverse_return_var="#reverse_res0";
goto(#reverse);
#reverse_res0:pop($reverse_res);
$reverse_res0=$reverse_res;
res=$reverse_res0;
push(res);
UNDEFINE($reverse_res0);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($indexes_return_var);
#indexes_end:print("");
string$look_behind_return_var;
stack$look_behind_res;
goto(#look_behind_end);
#look_behind:print("");
strings;
stringreg;
print("");
pop(s);
pop(reg);
print("");
stackst;
stackthis;
stackres;
stringbuf;
intpos;
stringsymbol;
st=reg_find(reg,s);
#look_behind_s:print("");
st.pop(this);
this.pop(buf);
[goto(#look_behind_e),("end"==buf),print("")];
pos=int(buf);
[print(""),(0==pos),goto(#is_not_zero)];
res.push("$");
goto(#look_behind_s);
#is_not_zero:print("");
pos=(pos-1);
symbol=s[pos];
res.push(symbol);
goto(#look_behind_s);
#look_behind_e:print("");
stack$reverse_res1;
push(res);
$reverse_return_var="#reverse_res1";
goto(#reverse);
#reverse_res1:pop($reverse_res);
$reverse_res1=$reverse_res;
res=$reverse_res1;
push(res);
UNDEFINE($reverse_res1);
UNDEFINE(symbol);
UNDEFINE(pos);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(this);
UNDEFINE(st);
UNDEFINE(s);
UNDEFINE(reg);
goto($look_behind_return_var);
#look_behind_end:print("");
string$look_ahead_return_var;
stack$look_ahead_res;
goto(#look_ahead_end);
#look_ahead:print("");
strings;
stringreg;
print("");
pop(s);
pop(reg);
print("");
stackst;
stackthis;
stackres;
stringbuf;
intpos;
stringsymbol;
intlast_pos;
st=reg_find(reg,s);
int$l0;
$l0=len(s);
last_pos=$l0;
UNDEFINE($l0);
last_pos=(last_pos-1);
#look_ahead_s:print("");
st.pop(this);
this.pop(buf);
this.pop(buf);
[goto(#look_ahead_e),("end"==buf),print("")];
pos=int(buf);
[print(""),(last_pos==pos),goto(#ais_not_zero)];
res.push("$");
goto(#look_ahead_s);
#ais_not_zero:print("");
symbol=s[pos];
res.push(symbol);
goto(#look_ahead_s);
#look_ahead_e:print("");
stack$reverse_res2;
push(res);
$reverse_return_var="#reverse_res2";
goto(#reverse);
#reverse_res2:pop($reverse_res);
$reverse_res2=$reverse_res;
res=$reverse_res2;
push(res);
UNDEFINE($reverse_res2);
UNDEFINE(last_pos);
UNDEFINE(symbol);
UNDEFINE(pos);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(this);
UNDEFINE(st);
UNDEFINE(s);
UNDEFINE(reg);
goto($look_ahead_return_var);
#look_ahead_end:print("");
string$func_call_index_return_var;
int$func_call_index_res;
goto(#func_call_index_end);
#func_call_index:print("");
stringfunc_name;
stringcommand;
print("");
pop(func_name);
pop(command);
print("");
stringreg;
stackst;
stackst2;
stackist;
intres;
stringbuf;
stringsymbol;
stringsymbol2;
boolletter;
booldigit;
reg=(("(?:"+func_name)+")");
stack$look_behind_res0;
push(reg);
push(command);
$look_behind_return_var="#look_behind_res0";
goto(#look_behind);
#look_behind_res0:pop($look_behind_res);
$look_behind_res0=$look_behind_res;
st=$look_behind_res0;
stack$look_ahead_res0;
push(reg);
push(command);
$look_ahead_return_var="#look_ahead_res0";
goto(#look_ahead);
#look_ahead_res0:pop($look_ahead_res);
$look_ahead_res0=$look_ahead_res;
st2=$look_ahead_res0;
stack$indexes_res0;
push(command);
push(func_name);
$indexes_return_var="#indexes_res0";
goto(#indexes);
#indexes_res0:pop($indexes_res);
$indexes_res0=$indexes_res;
ist=$indexes_res0;
#func_call_index_s:print("");
st.pop(symbol);
[print(""),("end"==symbol),goto(#_cond0_end)];
push(-1);
UNDEFINE($indexes_res0);
UNDEFINE($look_ahead_res0);
UNDEFINE($look_behind_res0);
UNDEFINE(digit);
UNDEFINE(letter);
UNDEFINE(symbol2);
UNDEFINE(symbol);
UNDEFINE(buf);
UNDEFINE(res);
UNDEFINE(ist);
UNDEFINE(st2);
UNDEFINE(st);
UNDEFINE(reg);
UNDEFINE(func_name);
UNDEFINE(command);
goto($func_call_index_return_var);
#_cond0_end:print("");
print("");
st2.pop(symbol2);
[print(""),("end"==symbol2),goto(#_cond1_end)];
string $print_arg0;
$print_arg0="long_function: func_call_index: ERROR\n";
print($print_arg0);
UNDEFINE($print_arg0);
exit(1);
#_cond1_end:print("");
print("");
ist.pop(buf);
[print(""),("end"==buf),goto(#_cond2_end)];
string $print_arg0;
$print_arg0="func_call_index ERROR\n";
print($print_arg0);
UNDEFINE($print_arg0);
exit(1);
#_cond2_end:print("");
print("");
res=int(buf);
letter=is_letter(symbol);
digit=is_digit(symbol);
[print(""),(NOT(((letter)OR(digit))OR("_"==symbol))),goto(#_cond3_end)];
letter=is_letter(symbol2);
digit=is_digit(symbol2);
[print(""),(NOT(((letter)OR(digit))OR("_"==symbol2))),goto(#_cond4_end)];
push(res);
UNDEFINE(reg);
UNDEFINE(st);
UNDEFINE(st2);
UNDEFINE(ist);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(symbol);
UNDEFINE(symbol2);
UNDEFINE(letter);
UNDEFINE(digit);
UNDEFINE($look_behind_res0);
UNDEFINE($look_ahead_res0);
UNDEFINE($indexes_res0);
UNDEFINE(command);
UNDEFINE(func_name);
goto($func_call_index_return_var);
#_cond4_end:print("");
print("");
#_cond3_end:print("");
print("");
goto(#func_call_index_s);
#func_call_index_end:print("");
string$func_calls_return_var;
stack$func_calls_res;
goto(#func_calls_end);
#func_calls:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
int$l0;
$l0=len(sub_s);
sub_len=$l0;
UNDEFINE($l0);
s_len_old=s_len;
int$func_call_index_res0;
push(s);
push(sub_s);
$func_call_index_return_var="#func_call_index_res0";
goto(#func_call_index);
#func_call_index_res0:pop($func_call_index_res);
$func_call_index_res0=$func_call_index_res;
i=$func_call_index_res0;
pointer=i;
#findexes_s:print("");
[goto(#findexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
s=s[pointer:s_len];
int$l0;
$l0=len(s);
s_len=$l0;
UNDEFINE($l0);
int$func_call_index_res1;
push(s);
push(sub_s);
$func_call_index_return_var="#func_call_index_res1";
goto(#func_call_index);
#func_call_index_res1:pop($func_call_index_res);
$func_call_index_res1=$func_call_index_res;
i=$func_call_index_res1;
pointer=i;
goto(#findexes_s);
#findexes_e:print("");
stack$reverse_res3;
push(res);
$reverse_return_var="#reverse_res3";
goto(#reverse);
#reverse_res3:pop($reverse_res);
$reverse_res3=$reverse_res;
res=$reverse_res3;
push(res);
UNDEFINE($reverse_res3);
UNDEFINE($func_call_index_res1);
UNDEFINE($func_call_index_res0);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($func_calls_return_var);
#func_calls_end:print("");
string$next_func_return_var;
stack$next_func_res;
goto(#next_func_end);
#next_func:print("");
print("");
intnumber;
intleft_border;
intright_border;
stackfunc_stack;
stringfunc_name;
inttype_len;
stringcommand;
stringarg_type;
#next_func_st:print("");
next_command(command);
[goto(#end_file),("end"==command),print("")];
number=index(command,"{");
[goto(#end_clause),(-1==number),print("")];
arg_type="int";
number=index(command,"int");
[goto(#next_func_e),(0==number),print("")];
arg_type="bool";
number=index(command,"bool");
[goto(#next_func_e),(0==number),print("")];
arg_type="float";
number=index(command,"float");
[goto(#next_func_e),(0==number),print("")];
arg_type="stack";
number=index(command,"stack");
[goto(#next_func_e),(0==number),print("")];
arg_type="string";
number=index(command,"string");
[goto(#next_func_e),(0==number),print("")];
#end_clause:print("");
goto(#next_func_st);
#next_func_e:print("");
int$l0;
$l0=len(arg_type);
type_len=$l0;
UNDEFINE($l0);
left_border=type_len;
right_border=index(command,"(");
func_name=command[left_border:right_border];
func_stack.push(func_name);
func_stack.push(arg_type);
#end_file:print("");
push(func_stack);
UNDEFINE(arg_type);
UNDEFINE(command);
UNDEFINE(type_len);
UNDEFINE(func_name);
UNDEFINE(func_stack);
UNDEFINE(right_border);
UNDEFINE(left_border);
UNDEFINE(number);
goto($next_func_return_var);
#next_func_end:print("");
string$get_funcs_return_var;
stack$get_funcs_res;
goto(#get_funcs_end);
#get_funcs:print("");
print("");
stackres_stack;
stringreturn_type;
stringfunc_name;
#get_funcs_s:print("");
stack$next_func_res0;
$next_func_return_var="#next_func_res0";
goto(#next_func);
#next_func_res0:pop($next_func_res);
$next_func_res0=$next_func_res;
func_stack=$next_func_res0;
func_stack.pop(return_type);
func_stack.pop(func_name);
[goto(#get_funcs_e),("end"==func_name),print("")];
res_stack.push(func_name);
res_stack.push(return_type);
goto(#get_funcs_s);
#get_funcs_e:print("");
RESET_SOURCE();
push(res_stack);
UNDEFINE($next_func_res0);
UNDEFINE(func_name);
UNDEFINE(return_type);
UNDEFINE(res_stack);
goto($get_funcs_return_var);
#get_funcs_end:print("");
string$func_ends_return_var;
stack$func_ends_res;
goto(#func_ends_end);
#func_ends:print("");
intfunc_len;
stackfunc_begins;
stringcommand;
print("");
pop(func_len);
pop(func_begins);
pop(command);
print("");
stringbuf;
stringsymbol;
inti;
intbr_begin;
intbr_end;
intcommand_len;
intopened_braces;
intclosed_braces;
stackres;
stringtemp;
func_begins.pop(buf);
#func_ends_s:print("");
closed_braces=0;
[goto(#func_ends_e),("end"==buf),print("")];
i=int(buf);
int$l0;
$l0=len(command);
command_len=$l0;
UNDEFINE($l0);
br_begin=(i+func_len);
opened_braces=1;
br_end=(br_begin+1);
#counter_s:print("");
[goto(#counter_e),(opened_braces==closed_braces),print("")];
symbol=command[br_end];
[print(""),("("==symbol),goto(#inc_o_end)];
opened_braces=(opened_braces+1);
#inc_o_end:print("");
[print(""),(")"==symbol),goto(#inc_c_end)];
closed_braces=(closed_braces+1);
#inc_c_end:print("");
br_end=(br_end+1);
goto(#counter_s);
#counter_e:print("");
res.push(br_end);
func_begins.pop(buf);
goto(#func_ends_s);
#func_ends_e:print("");
push(reverse(res));
UNDEFINE(temp);
UNDEFINE(res);
UNDEFINE(closed_braces);
UNDEFINE(opened_braces);
UNDEFINE(command_len);
UNDEFINE(br_end);
UNDEFINE(br_begin);
UNDEFINE(i);
UNDEFINE(symbol);
UNDEFINE(buf);
UNDEFINE(func_len);
UNDEFINE(func_begins);
UNDEFINE(command);
goto($func_ends_return_var);
#func_ends_end:print("");
string$del_file_return_var;
goto(#del_file_end);
#del_file:print("");
boolchange_flag;
print("");
pop(change_flag);
print("");
stringcommand;
[print(""),(change_flag),goto(#copy_e)];
SET_SOURCE("benv/long_function_program2.b");
SET_DEST("benv/long_function_program.b");
next_command(command);
#copy_s:print("");
[goto(#copy_e),("end"==command),print("")];
send_command(command);
next_command(command);
goto(#copy_s);
#copy_e:print("");
DEL_DEST("benv/long_function_program2.b");
UNDEFINE(command);
UNDEFINE(change_flag);
goto($del_file_return_var);
#del_file_end:print("");
string$replace_return_var;
goto(#replace_end);
#replace:print("");
print("");
stringcommand;
stringcommand_to_send;
stringreplaced_command;
stringleft_part;
stringright_part;
intcommand_len;
intnumber;
intfunc_pos;
intitemp;
intoffset;
stackfunc_pos_stack;
stackfunc_ends_stack;
boolchange_flag;
intfunc_len;
stringsymbol;
stringreturn_type;
intfunc_entry;
stringstr_func_entry;
stringsleft_border;
stringsright_border;
intleft_border;
intright_border;
intleft_border_reserv;
intright_border_reserv;
stringfunc_call;
stringstemp;
intitemp;
stringtemp;
intstemp_len;
stringarg_type;
func_entry=0;
offset=0;
change_flag=False;
was_replace=False;
stack$get_funcs_res0;
$get_funcs_return_var="#get_funcs_res0";
goto(#get_funcs);
#get_funcs_res0:pop($get_funcs_res);
$get_funcs_res0=$get_funcs_res;
func_stack=$get_funcs_res0;
func_stack.push("$temp");
func_stack.push("$temp");
#replace_s:print("");
func_stack.pop(return_type);
func_stack.pop(func_name);
[goto(#replace_e),("end"==func_name),print("")];
#next:print("");
next_command(command);
[goto(#next_end),("end"==command),print("")];
int$func_call_index_res2;
push(command);
push(func_name);
$func_call_index_return_var="#func_call_index_res2";
goto(#func_call_index);
#func_call_index_res2:pop($func_call_index_res);
$func_call_index_res2=$func_call_index_res;
number=$func_call_index_res2;
[print(""),(-1==number),goto(#not_send)];
send_command(command);
goto(#next);
#not_send:print("");
int$l0;
$l0=len(func_name);
func_len=$l0;
UNDEFINE($l0);
number=(number+func_len);
symbol=command[number];
[print(""),("("==symbol),goto(#to_next_start)];
arg_type="int";
number=index(command,"int");
[goto(#to_next_start),(0==number),print("")];
arg_type="bool";
number=index(command,"bool");
[goto(#to_next_start),(0==number),print("")];
arg_type="float";
number=index(command,"float");
[goto(#to_next_start),(0==number),print("")];
arg_type="stack";
number=index(command,"stack");
[goto(#to_next_start),(0==number),print("")];
arg_type="string";
number=index(command,"string");
[goto(#to_next_start),(0==number),goto(#to_next_end)];
#to_next_start:print("");
send_command(command);
goto(#next);
#to_next_end:print("");
stack$func_calls_res0;
push(command);
push(func_name);
$func_calls_return_var="#func_calls_res0";
goto(#func_calls);
#func_calls_res0:pop($func_calls_res);
$func_calls_res0=$func_calls_res;
func_pos_stack=$func_calls_res0;
push(command);
push(func_pos_stack);
push(func_len);
$func_ends_return_var="#func_ends_res0";
goto(#func_ends);
#func_ends_res0:pop($func_ends_res);
func_ends_stack=$func_ends_res;
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
replaced_command=command;
int$l0;
$l0=len(command);
itemp=$l0;
UNDEFINE($l0);
stemp_len=0;
#pop_func_pos_start:print("");
[goto(#pop_func_pos_end),("end"==sleft_border),print("")];
left_border=int(sleft_border);
right_border=int(sright_border);
left_border_reserv=left_border;
right_border_reserv=right_border;
left_border=(left_border+offset);
right_border=(right_border+offset);
str_func_entry=str(func_entry);
command_to_send=((((return_type+"$")+func_name)+"_res")+str_func_entry);
send_command(command_to_send);
command_to_send=(((("$"+func_name)+"_res")+str_func_entry)+"=");
func_entry=(func_entry+1);
func_call=command[left_border_reserv:right_border_reserv];
left_part=replaced_command[0:left_border];
right_part=replaced_command[right_border:itemp];
replaced_command=(((((left_part+"$")+func_name)+"_res")+str_func_entry)+right_part);
stemp=((("$"+func_name)+"_res")+str_func_entry);
int$l0;
$l0=len(stemp);
stemp_len=$l0;
UNDEFINE($l0);
offset=(offset+(stemp_len-(right_border-left_border)));
temp=str(offset);
int$l0;
$l0=len(replaced_command);
itemp=$l0;
UNDEFINE($l0);
command_to_send=(command_to_send+func_call);
send_command(command_to_send);
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
goto(#pop_func_pos_start);
#pop_func_pos_end:print("");
send_command(replaced_command);
offset=0;
goto(#next);
#next_end:print("");
UNSET_SOURCE();
UNSET_DEST();
func_stack.pop(func_name);
func_entry=0;
offset=0;
[goto(#replace_e),("end"==func_name),print("")];
func_stack.push(func_name);
[goto(#change),(change_flag),print("")];
change_flag=True;
SET_SOURCE("benv/long_function_program.b");
SET_DEST("benv/long_function_program2.b");
goto(#replace_s);
#change:print("");
change_flag=False;
SET_SOURCE("benv/long_function_program2.b");
SET_DEST("benv/long_function_program.b");
goto(#replace_s);
#replace_e:print("");
push(change_flag);
$del_file_return_var="#del_file_res0";
goto(#del_file);
#del_file_res0:print("");
print("");
UNDEFINE($func_calls_res0);
UNDEFINE($func_call_index_res2);
UNDEFINE($get_funcs_res0);
UNDEFINE(arg_type);
UNDEFINE(stemp_len);
UNDEFINE(temp);
UNDEFINE(itemp);
UNDEFINE(stemp);
UNDEFINE(func_call);
UNDEFINE(right_border_reserv);
UNDEFINE(left_border_reserv);
UNDEFINE(right_border);
UNDEFINE(left_border);
UNDEFINE(sright_border);
UNDEFINE(sleft_border);
UNDEFINE(str_func_entry);
UNDEFINE(func_entry);
UNDEFINE(return_type);
UNDEFINE(symbol);
UNDEFINE(func_len);
UNDEFINE(change_flag);
UNDEFINE(func_ends_stack);
UNDEFINE(func_pos_stack);
UNDEFINE(offset);
UNDEFINE(itemp);
UNDEFINE(func_pos);
UNDEFINE(number);
UNDEFINE(command_len);
UNDEFINE(right_part);
UNDEFINE(left_part);
UNDEFINE(replaced_command);
UNDEFINE(command_to_send);
UNDEFINE(command);
goto($replace_return_var);
#replace_end:print("");
string$main_return_var;
goto(#main_end);
#main:print("");
print("");
intres;
int$init_res0;
$init_return_var="#init_res0";
goto(#init);
#init_res0:pop($init_res);
$init_res0=$init_res;
res=$init_res0;
[print(""),(0==res),print("INIT ERROR\n")];
$replace_return_var="#replace_res0";
goto(#replace);
#replace_res0:print("");
print("");
int$finish_res0;
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:pop($finish_res);
$finish_res0=$finish_res;
res=$finish_res0;
[print(""),(0==res),print("FINISH ERROR\n")];
UNDEFINE($finish_res0);
UNDEFINE($init_res0);
UNDEFINE(res);
goto($main_return_var);
#main_end:print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:print("");
print("");
