string$println_return_var;
goto(#println_end);
#println:print("");
strings;
print("");
pop(s);
print("");
string $print_arg0;
$print_arg0=s;
print($print_arg0);
UNDEFINE($print_arg0);
string $print_arg0;
$print_arg0="\n";
print($print_arg0);
UNDEFINE($print_arg0);
UNDEFINE(s);
goto($println_return_var);
#println_end:print("");
string$reverse_return_var;
stack$reverse_res;
goto(#reverse_end);
#reverse:print("");
stacks;
print("");
pop(s);
print("");
stringbuf;
stackres;
s.pop(buf);
#_reverse_s:print("");
[goto(#_reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
goto(#_reverse_s);
#_reverse_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(s);
goto($reverse_return_var);
#reverse_end:print("");
string$indexes_return_var;
stack$indexes_res;
goto(#indexes_end);
#indexes:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
s_len=len(s);
sub_len=len(sub_s);
s_len_old=s_len;
i=index(s,sub_s);
pointer=i;
#_indexes_s:print("");
[goto(#_indexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
s=s[pointer:s_len];
s_len=len(s);
i=index(s,sub_s);
pointer=i;
goto(#_indexes_s);
#_indexes_e:print("");
stack$reverse_res0;
push(res);
$reverse_return_var="#reverse_res0";
goto(#reverse);
#reverse_res0:pop($reverse_res);
$reverse_res0=$reverse_res;
res=$reverse_res0;
push(res);
UNDEFINE($reverse_res0);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($indexes_return_var);
#indexes_end:print("");
string$ops_return_var;
stack$ops_res;
goto(#ops_end);
#ops:print("");
stringop;
stringcommand;
print("");
pop(op);
pop(command);
print("");
stackquotes;
stackthese_quotes;
stackop_nums;
stringbuf;
stackres;
intnum1;
intnum2;
intop_num;
boolwas_quote;
boolto_add;
was_quote=False;
to_add=True;
stack$indexes_res0;
push(command);
push(op);
$indexes_return_var="#indexes_res0";
goto(#indexes);
#indexes_res0:pop($indexes_res);
$indexes_res0=$indexes_res;
op_nums=$indexes_res0;
op_nums.pop(buf);
#_op_nums_s:print("");
[goto(#_op_nums_e),("end"==buf),print("")];
op_num=int(buf);
quotes=reg_find("\"(\\.|[^\"])*\"",command);
#_quotes_s:print("");
quotes.pop(these_quotes);
these_quotes.pop(buf);
[goto(#_quotes_e),("end"==buf),print("")];
#_these_quotes_s:print("");
[goto(#_these_quotes_e),("end"==buf),print("")];
num1=int(buf);
these_quotes.pop(buf);
num2=int(buf);
these_quotes.pop(buf);
was_quote=True;
goto(#_these_quotes_s);
#_these_quotes_e:print("");
[print(""),((op_num>num1)AND(op_num<num2)),goto(#_is_op_end)];
to_add=False;
goto(#_push_op_end);
#_is_op_end:print("");
goto(#_quotes_s);
#_quotes_e:print("");
[goto(#_push_op_end),((was_quote)AND(NOT(to_add))),print("")];
res.push(op_num);
was_quote=False;
to_add=True;
#_push_op_end:print("");
print("");
op_nums.pop(buf);
was_quote=False;
to_add=True;
goto(#_op_nums_s);
#_op_nums_e:print("");
stack$reverse_res1;
push(res);
$reverse_return_var="#reverse_res1";
goto(#reverse);
#reverse_res1:pop($reverse_res);
$reverse_res1=$reverse_res;
res=$reverse_res1;
push(res);
UNDEFINE($reverse_res1);
UNDEFINE($indexes_res0);
UNDEFINE(to_add);
UNDEFINE(was_quote);
UNDEFINE(op_num);
UNDEFINE(num2);
UNDEFINE(num1);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(op_nums);
UNDEFINE(these_quotes);
UNDEFINE(quotes);
UNDEFINE(op);
UNDEFINE(command);
goto($ops_return_var);
#ops_end:print("");
string$in_stack_return_var;
bool$in_stack_res;
goto(#in_stack_end);
#in_stack:print("");
stringel;
stacks;
print("");
pop(el);
pop(s);
print("");
stringbuf;
boolres;
res=False;
s.pop(buf);
#_in_stack_s:print("");
[goto(#_in_stack_e),("end"==buf),print("")];
[print(""),(el==buf),goto(#_no)];
res=True;
goto(#_in_stack_e);
#_no:print("");
s.pop(buf);
goto(#_in_stack_s);
#_in_stack_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(el);
UNDEFINE(s);
goto($in_stack_return_var);
#in_stack_end:print("");
string$func_end_return_var;
int$func_end_res;
goto(#func_end_end);
#func_end:print("");
intfunc_begin;
stringcommand;
print("");
pop(func_begin);
pop(command);
print("");
stackobraces;
stackcbraces;
stringobrace;
stringcbrace;
stringsymbol;
into_sum;
intc_sum;
intpos;
stringspos;
intcommand_len;
command_len=len(command);
obrace="(";
cbrace=")";
o_sum=1;
c_sum=0;
pos=(func_begin+1);
stack$ops_res0;
push(command);
push(obrace);
$ops_return_var="#ops_res0";
goto(#ops);
#ops_res0:pop($ops_res);
$ops_res0=$ops_res;
obraces=$ops_res0;
stack$ops_res1;
push(command);
push(cbrace);
$ops_return_var="#ops_res1";
goto(#ops);
#ops_res1:pop($ops_res);
$ops_res1=$ops_res;
cbraces=$ops_res1;
#_braces_s:print("");
[print(""),(pos<command_len),goto(#_braces_e)];
spos=str(pos);
bool$in_stack_res0;
push(obraces);
push(spos);
$in_stack_return_var="#in_stack_res0";
goto(#in_stack);
#in_stack_res0:pop($in_stack_res);
$in_stack_res0=$in_stack_res;
[print(""),$in_stack_res0,goto(#_o_plus_end)];
o_sum=(o_sum+1);
#_o_plus_end:print("");
bool$in_stack_res1;
push(cbraces);
push(spos);
$in_stack_return_var="#in_stack_res1";
goto(#in_stack);
#in_stack_res1:pop($in_stack_res);
$in_stack_res1=$in_stack_res;
[print(""),$in_stack_res1,goto(#_c_plus_end)];
c_sum=(c_sum+1);
#_c_plus_end:print("");
[goto(#_braces_e),(o_sum==c_sum),print("")];
pos=(pos+1);
goto(#_braces_s);
#_braces_e:print("");
push(pos);
UNDEFINE($in_stack_res1);
UNDEFINE($in_stack_res0);
UNDEFINE($ops_res1);
UNDEFINE($ops_res0);
UNDEFINE(command_len);
UNDEFINE(spos);
UNDEFINE(pos);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(symbol);
UNDEFINE(cbrace);
UNDEFINE(obrace);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(func_begin);
UNDEFINE(command);
goto($func_end_return_var);
#func_end_end:print("");
stringroot_source;
stringcommand;
intCOMMAND_COUNTER;
string$init_return_var;
goto(#init_end);
#init:print("");
print("");
get_root_source(root_source);
SET_SOURCE(root_source);
SET_DEST("benv/program.basm");
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
goto(#finish_end);
#finish:print("");
print("");
UNSET_SOURCE();
UNSET_DEST();
goto($finish_return_var);
#finish_end:print("");
string$is_if_return_var;
bool$is_if_res;
goto(#is_if_end);
#is_if:print("");
stringcommand;
print("");
pop(command);
print("");
stringop;
stacks;
stringbuf;
op="if(";
stack$ops_res2;
push(command);
push(op);
$ops_return_var="#ops_res2";
goto(#ops);
#ops_res2:pop($ops_res);
$ops_res2=$ops_res;
s=$ops_res2;
s.pop(buf);
[goto(#end_true),("end"==buf),print("")];
push(True);
UNDEFINE($ops_res2);
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(op);
UNDEFINE(command);
goto($is_if_return_var);
#end_true:print("");
push(False);
UNDEFINE(op);
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE($ops_res2);
UNDEFINE(command);
goto($is_if_return_var);
print("");
#is_if_end:print("");
string$get_cond_return_var;
string$get_cond_res;
goto(#get_cond_end);
#get_cond:print("");
stringcommand;
print("");
pop(command);
print("");
stringop;
stacks;
stringbuf;
intstart_pos;
intend_pos;
op="if(";
stack$ops_res3;
push(command);
push(op);
$ops_return_var="#ops_res3";
goto(#ops);
#ops_res3:pop($ops_res);
$ops_res3=$ops_res;
s=$ops_res3;
s.pop(buf);
start_pos=int(buf);
start_pos=(start_pos+2);
int$func_end_res0;
push(command);
push(start_pos);
$func_end_return_var="#func_end_res0";
goto(#func_end);
#func_end_res0:pop($func_end_res);
$func_end_res0=$func_end_res;
end_pos=$func_end_res0;
end_pos=(end_pos+1);
buf=command[start_pos:end_pos];
push(buf);
UNDEFINE($func_end_res0);
UNDEFINE($ops_res3);
UNDEFINE(end_pos);
UNDEFINE(start_pos);
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(op);
UNDEFINE(command);
goto($get_cond_return_var);
#get_cond_end:print("");
string$block_end_return_var;
int$block_end_res;
goto(#block_end_end);
#block_end:print("");
print("");
stringcommand;
stringop1;
stringop2;
into_sum;
intc_sum;
stackobraces;
stackcbraces;
stringbuf;
intcounter;
counter=COMMAND_COUNTER;
#block_s:print("");
next_command(command);
push(command);
$println_return_var="#println_res0";
goto(#println);
#println_res0:print("");
print("");
counter=(counter+1);
o_sum=1;
c_sum=0;
obrace="{";
cbrace="}";
stack$ops_res4;
push(command);
push(obrace);
$ops_return_var="#ops_res4";
goto(#ops);
#ops_res4:pop($ops_res);
$ops_res4=$ops_res;
obraces=$ops_res4;
stack$ops_res5;
push(command);
push(cbrace);
$ops_return_var="#ops_res5";
goto(#ops);
#ops_res5:pop($ops_res);
$ops_res5=$ops_res;
cbraces=$ops_res5;
cbraces.pop(buf);
push(buf);
$println_return_var="#println_res1";
goto(#println);
#println_res1:print("");
print("");
obraces.pop(buf);
#obrace_s:print("");
[goto(#obrace_e),("end"==buf),print("")];
o_sum=(o_sum+1);
obraces.pop(buf);
goto(#obrace_s);
#obrace_e:print("");
buf=str(o_sum);
push(buf);
$println_return_var="#println_res2";
goto(#println);
#println_res2:print("");
print("");
cbraces.pop(buf);
push(buf);
$println_return_var="#println_res3";
goto(#println);
#println_res3:print("");
print("");
#cbrace_s:print("");
[goto(#cbrace_e),("end"==buf),print("")];
c_sum=(c_sum+1);
cbraces.pop(buf);
goto(#cbrace_s);
#cbrace_e:print("");
buf=str(c_sum);
push(buf);
$println_return_var="#println_res4";
goto(#println);
#println_res4:print("");
print("");
[goto(#block_e),(o_sum==c_sum),print("")];
goto(#block_s);
#block_e:print("");
push(counter);
UNDEFINE($ops_res5);
UNDEFINE($ops_res4);
UNDEFINE(counter);
UNDEFINE(buf);
UNDEFINE(cbraces);
UNDEFINE(obraces);
UNDEFINE(c_sum);
UNDEFINE(o_sum);
UNDEFINE(op2);
UNDEFINE(op1);
UNDEFINE(command);
goto($block_end_return_var);
#block_end_end:print("");
string$main_return_var;
goto(#main_end);
#main:print("");
print("");
stringbuf;
intcounter;
COMMAND_COUNTER=0;
$init_return_var="#init_res0";
goto(#init);
#init_res0:print("");
print("");
next_command(command);
COMMAND_COUNTER=(COMMAND_COUNTER+1);
#main_s:print("");
[goto(#main_e),("end"==command),print("")];
bool$is_if_res0;
push(command);
$is_if_return_var="#is_if_res0";
goto(#is_if);
#is_if_res0:pop($is_if_res);
$is_if_res0=$is_if_res;
[print(""),($is_if_res0),goto(#next)];
push(command);
$println_return_var="#println_res5";
goto(#println);
#println_res5:print("");
print("");
string$get_cond_res0;
push(command);
$get_cond_return_var="#get_cond_res0";
goto(#get_cond);
#get_cond_res0:pop($get_cond_res);
$get_cond_res0=$get_cond_res;
push($get_cond_res0);
$println_return_var="#println_res6";
goto(#println);
#println_res6:print("");
print("");
push("---------------------------");
$println_return_var="#println_res7";
goto(#println);
#println_res7:print("");
print("");
int$block_end_res0;
$block_end_return_var="#block_end_res0";
goto(#block_end);
#block_end_res0:pop($block_end_res);
$block_end_res0=$block_end_res;
counter=$block_end_res0;
#next:print("");
send_command(command);
next_command(command);
COMMAND_COUNTER=(COMMAND_COUNTER+1);
goto(#main_s);
#main_e:print("");
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:print("");
print("");
UNDEFINE($block_end_res0);
UNDEFINE($get_cond_res0);
UNDEFINE($is_if_res0);
UNDEFINE(counter);
UNDEFINE(buf);
goto($main_return_var);
#main_end:print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:print("");
print("");
