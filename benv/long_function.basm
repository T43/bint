stringcommand;
stringreturn_type;
stringfunc_name;
stackfunc_stack;
boolbool_res;
string$init_return_var;
int$init_res;
goto(#init_end);
#init:print("");
print("");
SET_SOURCE("benv/prep_func_program.b");
SET_DEST("benv/long_function_program.b");
push(0);
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
int$finish_res;
goto(#finish_end);
#finish:print("");
print("");
DEL_DEST("benv/prep_func_program.b");
push(0);
goto($finish_return_var);
#finish_end:print("");
string$next_func_return_var;
stack$next_func_res;
goto(#next_func_end);
#next_func:print("");
print("");
intnumber;
intleft_border;
intright_border;
stackfunc_stack;
stringfunc_name;
inttype_len;
stringcommand;
stringarg_type;
#next_func_st:print("");
next_command(command);
print("");
[goto(#end_file),("end"==command),print("")];
number=index(command,"{");
print("");
[goto(#end_clause),(-1==number),print("")];
arg_type="int";
number=index(command,"int");
print("");
[goto(#next_func_e),(0==number),print("")];
arg_type="bool";
number=index(command,"bool");
print("");
[goto(#next_func_e),(0==number),print("")];
arg_type="float";
number=index(command,"float");
print("");
[goto(#next_func_e),(0==number),print("")];
arg_type="stack";
number=index(command,"stack");
print("");
[goto(#next_func_e),(0==number),print("")];
arg_type="string";
number=index(command,"string");
print("");
[goto(#next_func_e),(0==number),print("")];
#end_clause:print("");
goto(#next_func_st);
#next_func_e:print("");
type_len=len(arg_type);
left_border=type_len;
right_border=index(command,"(");
func_name=command[left_border:right_border];
func_stack.push(func_name);
func_stack.push(arg_type);
#end_file:print("");
push(func_stack);
UNDEFINE(arg_type);
UNDEFINE(command);
UNDEFINE(type_len);
UNDEFINE(func_name);
UNDEFINE(func_stack);
UNDEFINE(right_border);
UNDEFINE(left_border);
UNDEFINE(number);
goto($next_func_return_var);
#next_func_end:print("");
string$get_funcs_return_var;
stack$get_funcs_res;
goto(#get_funcs_end);
#get_funcs:print("");
print("");
stackres_stack;
stringreturn_type;
stringfunc_name;
#get_funcs_s:print("");
$next_func_return_var="#next_func_res0";
goto(#next_func);
#next_func_res0:pop($next_func_res);
func_stack=$next_func_res;
func_stack.pop(return_type);
func_stack.pop(func_name);
print("");
[goto(#get_funcs_e),("end"==func_name),print("")];
res_stack.push(func_name);
res_stack.push(return_type);
print("");
goto(#get_funcs_s);
#get_funcs_e:print("");
RESET_SOURCE();
push(res_stack);
UNDEFINE(func_name);
UNDEFINE(return_type);
UNDEFINE(res_stack);
goto($get_funcs_return_var);
#get_funcs_end:print("");
string$reverse_return_var;
stack$reverse_res;
goto(#reverse_end);
#reverse:print("");
stacks;
print("");
pop(s);
print("");
stringbuf;
stackres;
s.pop(buf);
#reverse_s:print("");
[goto(#reverse_e),("end"==buf),print("")];
res.push(buf);
s.pop(buf);
print("");
goto(#reverse_s);
#reverse_e:print("");
push(res);
UNDEFINE(res);
UNDEFINE(buf);
UNDEFINE(s);
goto($reverse_return_var);
#reverse_end:print("");
string$indexes_return_var;
stack$indexes_res;
goto(#indexes_end);
#indexes:print("");
stringsub_s;
strings;
print("");
pop(sub_s);
pop(s);
print("");
stackres;
inti;
intpointer;
ints_len;
ints_len_old;
intsub_len;
s_len=len(s);
sub_len=len(sub_s);
s_len_old=s_len;
i=index(s,sub_s);
pointer=i;
#indexes_s:print("");
[goto(#indexes_e),(-1==i),print("")];
i=(i+(s_len_old-s_len));
res.push(i);
pointer=(pointer+sub_len);
s=s[pointer:s_len];
s_len=len(s);
i=index(s,sub_s);
pointer=i;
print("");
goto(#indexes_s);
#indexes_e:print("");
push(res);
$reverse_return_var="#reverse_res0";
goto(#reverse);
#reverse_res0:pop($reverse_res);
res=$reverse_res;
push(res);
UNDEFINE(sub_len);
UNDEFINE(s_len_old);
UNDEFINE(s_len);
UNDEFINE(pointer);
UNDEFINE(i);
UNDEFINE(res);
UNDEFINE(sub_s);
UNDEFINE(s);
goto($indexes_return_var);
#indexes_end:print("");
string$func_ends_return_var;
stack$func_ends_res;
goto(#func_ends_end);
#func_ends:print("");
intfunc_len;
stackfunc_begins;
stringcommand;
print("");
pop(func_len);
pop(func_begins);
pop(command);
print("");
stringbuf;
stringsymbol;
inti;
intbr_begin;
intbr_end;
intcommand_len;
intopened_braces;
intclosed_braces;
stackres;
stringtemp;
func_begins.pop(buf);
#func_ends_s:print("");
closed_braces=0;
print("");
[goto(#func_ends_e),("end"==buf),print("")];
i=int(buf);
command_len=len(command);
br_begin=(i+(func_len));
opened_braces=1;
br_end=(br_begin+1);
#counter_s:print("");
[goto(#counter_e),(opened_braces==closed_braces),print("")];
symbol=command[br_end];
print("");
[print(""),("("==symbol),goto(#inc_o_end)];
opened_braces=(opened_braces+1);
#inc_o_end:print("");
[print(""),(")"==symbol),goto(#inc_c_end)];
closed_braces=(closed_braces+1);
#inc_c_end:print("");
br_end=(br_end+1);
print("");
goto(#counter_s);
#counter_e:print("");
res.push(br_end);
func_begins.pop(buf);
print("");
goto(#func_ends_s);
#func_ends_e:print("");
push(res);
$reverse_return_var="#reverse_res1";
goto(#reverse);
#reverse_res1:pop($reverse_res);
push($reverse_res);
UNDEFINE(temp);
UNDEFINE(res);
UNDEFINE(closed_braces);
UNDEFINE(opened_braces);
UNDEFINE(command_len);
UNDEFINE(br_end);
UNDEFINE(br_begin);
UNDEFINE(i);
UNDEFINE(symbol);
UNDEFINE(buf);
UNDEFINE(func_len);
UNDEFINE(func_begins);
UNDEFINE(command);
goto($func_ends_return_var);
#func_ends_end:print("");
string$replace_return_var;
goto(#replace_end);
#replace:print("");
print("");
stringcommand;
stringcommand_to_send;
intcommand_len;
intnumber;
intfunc_pos;
stackfunc_pos_stack;
stackfunc_ends_stack;
boolchange_flag;
intfunc_len;
stringsymbol;
stringreturn_type;
intfunc_entry;
stringstr_func_entry;
stringsleft_border;
stringsright_border;
intleft_border;
intright_border;
stringfunc_call;
func_entry=0;
change_flag=False;
$get_funcs_return_var="#get_funcs_res0";
goto(#get_funcs);
#get_funcs_res0:pop($get_funcs_res);
func_stack=$get_funcs_res;
#replace_s:print("");
func_stack.pop(return_type);
func_stack.pop(func_name);
print("");
[goto(#replace_e),("end"==func_name),print("")];
#next:print("");
next_command(command);
print("");
[goto(#next_end),("end"==command),print("")];
number=index(command,func_name);
print("");
[print(""),(-1==number),goto(#not_send)];
send_command(command);
print("");
goto(#next);
#not_send:print("");
func_len=len(func_name);
number=(number+func_len);
symbol=command[number];
print("");
[print(""),("("==symbol),goto(#next)];
arg_type="int";
number=index(command,"int");
print("");
[goto(#next),(0==number),print("")];
arg_type="bool";
number=index(command,"bool");
print("");
[goto(#next),(0==number),print("")];
arg_type="float";
number=index(command,"float");
print("");
[goto(#next),(0==number),print("")];
arg_type="stack";
number=index(command,"stack");
print("");
[goto(#next),(0==number),print("")];
arg_type="string";
number=index(command,"string");
print("");
[goto(#next),(0==number),print("")];
print(command);
print("
");
push(command);
push(func_name);
$indexes_return_var="#indexes_res0";
goto(#indexes);
#indexes_res0:pop($indexes_res);
func_pos_stack=$indexes_res;
push(command);
push(func_pos_stack);
push(func_len);
$func_ends_return_var="#func_ends_res0";
goto(#func_ends);
#func_ends_res0:pop($func_ends_res);
func_ends_stack=$func_ends_res;
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
#pop_func_pos_start:print("");
[goto(#pop_func_pos_end),("end"==sleft_border),print("")];
left_border=int(sleft_border);
right_border=int(sright_border);
str_func_entry=str(func_entry);
command_to_send=(((("$"+func_name)+"_res")+str_func_entry)+"=");
func_entry=(func_entry+1);
func_call=command[left_border:right_border];
command_to_send=(command_to_send+func_call);
send_command(command_to_send);
func_pos_stack.pop(sleft_border);
func_ends_stack.pop(sright_border);
print("");
goto(#pop_func_pos_start);
#pop_func_pos_end:print("");
goto(#next);
#next_end:print("");
UNSET_SOURCE();
UNSET_DEST();
func_stack.pop(func_name);
print("");
[goto(#replace_e),("end"==func_name),print("")];
func_stack.push(func_name);
print("");
[goto(#change),(change_flag),print("")];
change_flag=True;
SET_SOURCE("benv/long_function_program.b");
SET_DEST("benv/long_function_program2.b");
print("");
goto(#replace_s);
#change:print("");
change_flag=False;
SET_SOURCE("benv/long_function_program.b");
SET_DEST("benv/long_function_program2.b");
print("");
goto(#replace_s);
#replace_e:print("");
print("");
UNDEFINE(func_call);
UNDEFINE(right_border);
UNDEFINE(left_border);
UNDEFINE(sright_border);
UNDEFINE(sleft_border);
UNDEFINE(str_func_entry);
UNDEFINE(func_entry);
UNDEFINE(return_type);
UNDEFINE(symbol);
UNDEFINE(func_len);
UNDEFINE(change_flag);
UNDEFINE(func_ends_stack);
UNDEFINE(func_pos_stack);
UNDEFINE(func_pos);
UNDEFINE(number);
UNDEFINE(command_len);
UNDEFINE(command_to_send);
UNDEFINE(command);
goto($replace_return_var);
#replace_end:print("");
string $main_return_var;
goto(#main_end);
#main:
print("");
print("");
intres;
$init_return_var="#init_res0";
goto(#init);
#init_res0:pop($init_res);
res=$init_res;
[print(""),(0==res),print("INIT ERROR
")];
$replace_return_var="#replace_res0";
goto(#replace);
#replace_res0:print("");
print("");
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:pop($finish_res);
res=$finish_res;
[print(""),(0==res),print("FINISH ERROR
")];
UNDEFINE(res);
goto($main_return_var);
#main_end:
print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:
print("");
print("");
