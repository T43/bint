string$init_return_var;
goto(#init_end);
#init:print("");
print("");
stringroot_source;
get_root_source(root_source);
SET_SOURCE(root_source);
SET_DEST("benv/recurs_program.b");
UNDEFINE(root_source);
goto($init_return_var);
#init_end:print("");
string$finish_return_var;
goto(#finish_end);
#finish:print("");
print("");
UNSET_SOURCE();
UNSET_DEST();
goto($finish_return_var);
#finish_end:print("");
string$is_func_definition_return_var;
bool$is_func_definition_res;
goto(#is_func_definition_end);
#is_func_definition:print("");
stringcommand;
print("");
pop(command);
print("");
stacks;
stringbuf;
stringr1;
stringr2;
stringr;
r1="(?:(int|float|bool|string|stack|void)[[:alnum:]|_]";
r2="*?\((?:((int|float|bool|string|stack))[[:alnum:]|_]+\,){0,})(int|float|bool|string|stack)[[:alnum:]|_]+\){";
r=(r1+r2);
s=reg_find(r,command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond0_end)];
push(True);
UNDEFINE(r);
UNDEFINE(r2);
UNDEFINE(r1);
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($is_func_definition_return_var);
#_cond0_end:print("");
print("");
s=reg_find("(?:(int|float|bool|string|stack|void)[[:alnum:]|_]*?\(\){)",command);
s.pop(buf);
push((NOT("end"==buf)));
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(r1);
UNDEFINE(r2);
UNDEFINE(r);
UNDEFINE(command);
goto($is_func_definition_return_var);
#is_func_definition_end:print("");
string$T_return_var;
string$T_res;
goto(#T_end);
#T:print("");
stringcommand;
print("");
pop(command);
print("");
stacks;
stringbuf;
s=reg_find("(?:(^int))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond1_end)];
push("int");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($T_return_var);
#_cond1_end:print("");
print("");
s=reg_find("(?:(^float))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond2_end)];
push("float");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($T_return_var);
#_cond2_end:print("");
print("");
s=reg_find("(?:(^bool))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond3_end)];
push("bool");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($T_return_var);
#_cond3_end:print("");
print("");
s=reg_find("(?:(^stack))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond4_end)];
push("stack");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($T_return_var);
#_cond4_end:print("");
print("");
s=reg_find("(?:(^string))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond5_end)];
push("string");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($T_return_var);
#_cond5_end:print("");
print("");
s=reg_find("(?:(^void))",command);
s.pop(buf);
[print(""),(NOT("end"==buf)),goto(#_cond6_end)];
push("void");
UNDEFINE(s);
UNDEFINE(buf);
UNDEFINE(command);
goto($T_return_var);
#_cond6_end:print("");
print("");
push("T: ERROR");
UNDEFINE(buf);
UNDEFINE(s);
UNDEFINE(command);
goto($T_return_var);
#T_end:print("");
string$main_return_var;
goto(#main_end);
#main:print("");
print("");
$init_return_var="#init_res0";
goto(#init);
#init_res0:print("");
print("");
stringcommand;
next_command(command);
#main_s:print("");
print("");
[print(""),(NOT("end"==command)),goto(#_cond7_end)];
bool$is_func_definition_res0;
push(command);
$is_func_definition_return_var="#is_func_definition_res0";
goto(#is_func_definition);
#is_func_definition_res0:pop($is_func_definition_res);
$is_func_definition_res0=$is_func_definition_res;
[print(""),($is_func_definition_res0),goto(#_cond8_end)];
string$T_res0;
push(command);
$T_return_var="#T_res0";
goto(#T);
#T_res0:pop($T_res);
$T_res0=$T_res;
string $print_arg0;
$print_arg0=$T_res0;
print($print_arg0);
UNDEFINE($print_arg0);
string $print_arg0;
$print_arg0="\n";
print($print_arg0);
UNDEFINE($print_arg0);
#_cond8_end:print("");
print("");
send_command(command);
next_command(command);
goto(#main_s);
#_cond7_end:print("");
print("");
$finish_return_var="#finish_res0";
goto(#finish);
#finish_res0:print("");
print("");
UNDEFINE($T_res0);
UNDEFINE($is_func_definition_res0);
UNDEFINE(command);
goto($main_return_var);
#main_end:print("");
$main_return_var="#main_res0";
goto(#main);
#main_res0:print("");
print("");
